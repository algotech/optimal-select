!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.OptimalSelect=e():t.OptimalSelect=e()}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"select",(function(){return O})),n.d(e,"getSingleSelector",(function(){return j})),n.d(e,"getMultiSelector",(function(){return A})),n.d(e,"optimize",(function(){return g})),n.d(e,"common",(function(){return r})),n.d(e,"default",(function(){return O}));var r={};function o(t){for(var e=t.length,n=new Array(e),r=0;r<e;r++)n[r]=t[r];return n}function c(t){return t&&t.replace(/['"`\\/:\?&!#$%^()[\]{|}*+;,.<=>@~]/g,"\\$&").replace(/\n/g,"A")}n.r(r),n.d(r,"getCommonAncestor",(function(){return y})),n.d(r,"getCommonProperties",(function(){return b}));var u={attribute:function(t){return["style","data-reactid","data-react-checksum"].indexOf(t)>-1}};function a(t,e){var n=e.root,r=void 0===n?document:n,o=e.skip,u=void 0===o?null:o,a=e.priority,l=void 0===a?["id","class","href","src"]:a,s=e.ignore,v=void 0===s?{}:s,g=[],h=t,m=g.length,y=u&&(Array.isArray(u)?u:[u]).map((function(t){return"function"!=typeof t?function(e){return e===t}:t})),b=function(t){return u&&y.some((function(e){return e(t)}))};Object.keys(v).forEach((function(t){var e=v[t];"function"!=typeof e&&("number"==typeof e&&(e=e.toString()),"string"==typeof e&&(e=new RegExp(c(e).replace(/\\/g,"\\\\"))),"boolean"==typeof e&&(e=e?/(?:)/:/.^/),v[t]=function(t,n){return e.test(n)})}));var S=v.attribute;for(v.attribute=function(t,e,n){return S&&S(t,e,n)};h!==r;){if(!0!==b(h)){if(i(l,h,v,g,r))break;if(f(h,v,g,r))break;i(l,h,v,g),g.length===m&&f(h,v,g),g.length===m&&d(l,h,v,g)}h=h.parentNode,m=g.length}if(h===r){var j=p(l,h,v);g.unshift(j)}return g.join(" ")}function i(t,e,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:e.parentNode,c=l(t,e,n);if(c){var u=o.querySelectorAll(c);if(1===u.length)return r.unshift(c),!0}return!1}function l(t,e,n){for(var r=e.attributes,o=Object.keys(r).sort((function(e,n){var o=t.indexOf(r[e].name),c=t.indexOf(r[n].name);return-1===c?-1===o?0:-1:o-c})),a=0,i=o.length;a<i;a++){var l=o[a],f=r[l],s=f.name,d=c(f.value);if(!v(n[s]||n.attribute,s,d,u[s]||u.attribute)){var p="[".concat(s,'="').concat(d,'"]');if(!1===/\b\d/.test(d)&&("id"===s&&(p="#".concat(d)),"class"===s)){var g=d.trim().replace(/\s+/g,".");p=".".concat(g)}return p}}return null}function f(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.parentNode,o=s(t,e);if(o){var c=r.getElementsByTagName(o);if(1===c.length)return n.unshift(o),!0}return!1}function s(t,e){var n=t.tagName.toLowerCase();return v(e.tag,null,n)?null:n}function d(t,e,n,r){for(var o=e.parentNode,c=o.childTags||o.children,u=0,a=c.length;u<a;u++){var i=c[u];if(i===e){var l=p(t,i,n);if(!l)return console.warn("\n          Element couldn't be matched through strict ignore pattern!\n        ",i,n,l);var f="> ".concat(l,":nth-child(").concat(u+1,")");return r.unshift(f),!0}}return!1}function p(t,e,n){var r=l(t,e,n);return r||(r=s(e,n)),r}function v(t,e,n,r){if(!n)return!0;var o=t||r;return!!o&&o(e,n,r)}function g(t,e){if(Array.isArray(e)||(e=e.length?o(e):[e]),!e.length||e.some((function(t){return 1!==t.nodeType})))throw new Error('Invalid input - to compare HTMLElements its necessary to provide a reference of the selected node(s)! (missing "elements")');e[0];var n=t.replace(/> /g,">").split(/\s+(?=(?:(?:[^"]*"){2})*[^"]*$)/);if(n.length<2)return h("",t,"",e);for(var r=[n.pop()];n.length>1;){var c=n.pop(),u=n.join(" "),a=r.join(" "),i="".concat(u," ").concat(a),l=document.querySelectorAll(i);l.length!==e.length&&r.unshift(h(u,c,a,e))}return r.unshift(n[0]),(n=r)[0]=h("",n[0],n.slice(1).join(" "),e),n[n.length-1]=h(n.slice(0,-1).join(" "),n[n.length-1],"",e),n.join(" ").replace(/>/g,"> ").trim()}function h(t,e,n,r){if(t.length&&(t="".concat(t," ")),n.length&&(n=" ".concat(n)),/\[*\]/.test(e)){var o=e.replace(/=.*$/,"]"),c="".concat(t).concat(o).concat(n);if(m(document.querySelectorAll(c),r))e=o;else for(var u=document.querySelectorAll("".concat(t).concat(o)),a=function(){var o=u[i];if(r.some((function(t){return o.contains(t)}))){var a=o.tagName.toLowerCase();return c="".concat(t).concat(a).concat(n),m(document.querySelectorAll(c),r)&&(e=a),"break"}},i=0,l=u.length;i<l;i++){if("break"===a())break}}if(/>/.test(e)){var f=e.replace(/>/,"");c="".concat(t).concat(f).concat(n);m(document.querySelectorAll(c),r)&&(e=f)}if(/:nth-child/.test(e)){var s=e.replace(/nth-child/g,"nth-of-type");c="".concat(t).concat(s).concat(n);m(document.querySelectorAll(c),r)&&(e=s)}if(/\.\S+\.\S+/.test(e)){for(var d=e.trim().split(".").slice(1).map((function(t){return".".concat(t)})).sort((function(t,e){return t.length-e.length}));d.length;){var p=e.replace(d.shift(),"").trim();if(!(c="".concat(t).concat(p).concat(n).trim()).length||">"===c.charAt(0)||">"===c.charAt(c.length-1))break;m(document.querySelectorAll(c),r)&&(e=p)}if((d=e&&e.match(/\./g))&&d.length>2){var v=document.querySelectorAll("".concat(t).concat(e)),g=function(){var o=v[i];if(r.some((function(t){return o.contains(t)}))){var u=o.tagName.toLowerCase();return c="".concat(t).concat(u).concat(n),m(document.querySelectorAll(c),r)&&(e=u),"break"}};for(i=0,l=v.length;i<l;i++){if("break"===g())break}}}return e}function m(t,e){var n=t.length;return n===e.length&&e.every((function(e){for(var r=0;r<n;r++)if(t[r]===e)return!0;return!1}))}function y(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.root,r=void 0===n?document:n,o=[];t.forEach((function(t,e){for(var n=[];t!==r;)t=t.parentNode,n.unshift(t);o[e]=n})),o.sort((function(t,e){return t.length-e.length}));for(var c=o.shift(),u=null,a=function(){var t=c[i];if(o.some((function(e){return!e.some((function(e){return e===t}))})))return"break";u=t},i=0,l=c.length;i<l;i++){var f=a();if("break"===f)break}return u}function b(t){var e={classes:[],attributes:{},tag:null};return t.forEach((function(t){var n=e.classes,r=e.attributes,o=e.tag;if(void 0!==n){var c=t.getAttribute("class");c?(c=c.trim().split(" "),n.length?(n=n.filter((function(t){return c.some((function(e){return e===t}))}))).length?e.classes=n:delete e.classes:e.classes=c):delete e.classes}if(void 0!==r){var u=t.attributes,a=Object.keys(u).reduce((function(t,e){var n=u[e],r=n.name;return n&&"class"!==r&&(t[r]=n.value),t}),{}),i=Object.keys(a),l=Object.keys(r);i.length?l.length?(r=l.reduce((function(t,e){var n=r[e];return n===a[e]&&(t[e]=n),t}),{}),Object.keys(r).length?e.attributes=r:delete e.attributes):e.attributes=a:delete e.attributes}if(void 0!==o){var f=t.tagName.toLowerCase();o?f!==o&&delete e.tag:e.tag=f}})),e}function S(t){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function j(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(3===t.nodeType&&(t=t.parentNode),1!==t.nodeType)throw new Error('Invalid input - only HTMLElements or representations of them are supported! (not "'.concat(S(t),'")'));var n=a(t,e),r=g(n,t,e);return document.querySelector(n)!=document.querySelector(r)?(console.log("Error at selector optimization. Returning the raw selector."),n):r}function A(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(Array.isArray(t)||(t=o(t)),t.some((function(t){return 1!==t.nodeType})))throw new Error("Invalid input - only an Array of HTMLElements or representations of them is supported!");t[0];var n=y(t,e),r=j(n,e),c=k(t),u=c[0],a=g("".concat(r," ").concat(u),t,e),i=o(document.querySelectorAll(a));return t.every((function(t){return i.some((function(e){return e===t}))}))?a:console.warn("\n      The selected elements can't be efficiently mapped.\n      Its probably best to use multiple single selectors instead!\n    ",t)}function k(t){var e=b(t),n=e.classes,r=e.attributes,o=e.tag,c=[];if(o&&c.push(o),n){var u=n.map((function(t){return".".concat(t)})).join("");c.push(u)}if(r){var a=Object.keys(r).reduce((function(t,e){return t.push("[".concat(e,'="').concat(r[e],'"]')),t}),[]).join("");c.push(a)}return c.length,[c.join("")]}function O(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.length&&!t.name?A(t,e):j(t,e)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9PcHRpbWFsU2VsZWN0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9PcHRpbWFsU2VsZWN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL09wdGltYWxTZWxlY3QvLi9zcmMvdXRpbGl0aWVzLmpzIiwid2VicGFjazovL09wdGltYWxTZWxlY3QvLi9zcmMvbWF0Y2guanMiLCJ3ZWJwYWNrOi8vT3B0aW1hbFNlbGVjdC8uL3NyYy9vcHRpbWl6ZS5qcyIsIndlYnBhY2s6Ly9PcHRpbWFsU2VsZWN0Ly4vc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9PcHRpbWFsU2VsZWN0Ly4vc3JjL3NlbGVjdC5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29udmVydE5vZGVMaXN0Iiwibm9kZXMiLCJsZW5ndGgiLCJhcnIiLCJBcnJheSIsImVzY2FwZVZhbHVlIiwicmVwbGFjZSIsImRlZmF1bHRJZ25vcmUiLCJhdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOYW1lIiwiaW5kZXhPZiIsIm1hdGNoIiwibm9kZSIsIm9wdGlvbnMiLCJkb2N1bWVudCIsInNraXAiLCJwcmlvcml0eSIsImlnbm9yZSIsInBhdGgiLCJlbGVtZW50Iiwic2tpcENvbXBhcmUiLCJpc0FycmF5IiwibWFwIiwiZW50cnkiLCJza2lwQ2hlY2tzIiwic29tZSIsImNvbXBhcmUiLCJrZXlzIiwiZm9yRWFjaCIsInR5cGUiLCJwcmVkaWNhdGUiLCJ0b1N0cmluZyIsIlJlZ0V4cCIsInRlc3QiLCJpZ25vcmVBdHRyaWJ1dGUiLCJkZWZhdWx0UHJlZGljYXRlIiwiY2hlY2tBdHRyaWJ1dGVzIiwiY2hlY2tUYWciLCJjaGVja0NoaWxkcyIsInBhcmVudE5vZGUiLCJwYXR0ZXJuIiwiZmluZFBhdHRlcm4iLCJ1bnNoaWZ0Iiwiam9pbiIsInBhcmVudCIsImZpbmRBdHRyaWJ1dGVzUGF0dGVybiIsIm1hdGNoZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYXR0cmlidXRlcyIsInNvcnRlZEtleXMiLCJzb3J0IiwiY3VyciIsIm5leHQiLCJjdXJyUG9zIiwibmV4dFBvcyIsImF0dHJpYnV0ZVZhbHVlIiwiY2hlY2tJZ25vcmUiLCJjbGFzc05hbWUiLCJ0cmltIiwiZmluZFRhZ1BhdHRlcm4iLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInRhZyIsImNoaWxkcmVuIiwiY2hpbGRUYWdzIiwiY2hpbGQiLCJjaGlsZFBhdHRlcm4iLCJjb25zb2xlIiwid2FybiIsImNoZWNrIiwib3B0aW1pemUiLCJzZWxlY3RvciIsImVsZW1lbnRzIiwibm9kZVR5cGUiLCJFcnJvciIsInNwbGl0Iiwib3B0aW1pemVQYXJ0Iiwic2hvcnRlbmVkIiwicG9wIiwiY3VycmVudCIsInByZVBhcnQiLCJwb3N0UGFydCIsInNsaWNlIiwiY29tcGFyZVJlc3VsdHMiLCJyZWZlcmVuY2VzIiwicmVmZXJlbmNlIiwiY29udGFpbnMiLCJkZXNjcmlwdGlvbiIsImRlc2NlbmRhbnQiLCJuYW1lcyIsInBhcnRpYWwiLCJzaGlmdCIsImNoYXJBdCIsImV2ZXJ5IiwiZ2V0Q29tbW9uQW5jZXN0b3IiLCJhbmNlc3RvcnMiLCJpbmRleCIsInBhcmVudHMiLCJzaGFsbG93QW5jZXN0b3IiLCJhbmNlc3RvciIsIm90aGVyUGFyZW50cyIsIm90aGVyUGFyZW50IiwiZ2V0Q29tbW9uUHJvcGVydGllcyIsImNvbW1vblByb3BlcnRpZXMiLCJjbGFzc2VzIiwiY29tbW9uQ2xhc3NlcyIsImNvbW1vbkF0dHJpYnV0ZXMiLCJjb21tb25UYWciLCJ1bmRlZmluZWQiLCJnZXRBdHRyaWJ1dGUiLCJmaWx0ZXIiLCJlbGVtZW50QXR0cmlidXRlcyIsInJlZHVjZSIsImF0dHJpYnV0ZXNOYW1lcyIsImNvbW1vbkF0dHJpYnV0ZXNOYW1lcyIsIm5leHRDb21tb25BdHRyaWJ1dGVzIiwiZ2V0U2luZ2xlU2VsZWN0b3IiLCJvcHRpbWl6ZWQiLCJxdWVyeVNlbGVjdG9yIiwibG9nIiwiZ2V0TXVsdGlTZWxlY3RvciIsImFuY2VzdG9yU2VsZWN0b3IiLCJjb21tb25TZWxlY3RvcnMiLCJnZXRDb21tb25TZWxlY3RvcnMiLCJkZXNjZW5kYW50U2VsZWN0b3IiLCJzZWxlY3Rvck1hdGNoZXMiLCJzZWxlY3RvclBhdGgiLCJwdXNoIiwiY2xhc3NTZWxlY3RvciIsImF0dHJpYnV0ZVNlbGVjdG9yIiwicGFydHMiLCJnZXRRdWVyeVNlbGVjdG9yIiwiaW5wdXQiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBdUIsY0FBSUQsSUFFM0JELEVBQW9CLGNBQUlDLElBUjFCLENBU0dLLFFBQVEsV0FDWCxPLFlDVEUsSUFBSUMsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVVAsUUFHbkMsSUFBSUMsRUFBU0ksRUFBaUJFLEdBQVksQ0FDekNDLEVBQUdELEVBQ0hFLEdBQUcsRUFDSFQsUUFBUyxJQVVW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ZSxHQU1yQixHQUpJaEUsR0FDRmdFLEVBQWFDLEtBQUtqRSxHQUdoQjBDLEVBQVMsQ0FDWCxJQUFNd0IsRUFBZ0J4QixFQUFRbkYsS0FBSSxTQUFDL0MsR0FBRCxpQkFBY0EsTUFBUW9FLEtBQUssSUFDN0RvRixFQUFhQyxLQUFLQyxHQUdwQixHQUFJakYsRUFBWSxDQUNkLElBQU1rRixFQUFvQnhKLE9BQU9pRCxLQUFLcUIsR0FBWWlFLFFBQU8sU0FBQ2tCLEVBQU81SixHQUUvRCxPQURBNEosRUFBTUgsS0FBTixXQUFlekosRUFBZixhQUF3QnlFLEVBQVd6RSxHQUFuQyxPQUNPNEosSUFDTixJQUFJeEYsS0FBSyxJQUNab0YsRUFBYUMsS0FBS0UsR0FPcEIsT0FKSUgsRUFBYTdILE9BSVYsQ0FDTDZILEVBQWFwRixLQUFLLEtBYVAsU0FBU3lGLEVBQWtCQyxHQUFxQixJQUFkeEgsRUFBYyx1REFBSixHQUN6RCxPQUFJd0gsRUFBTW5JLFNBQVdtSSxFQUFNOUosS0FDbEJrSixFQUFpQlksRUFBT3hILEdBRTFCd0csRUFBa0JnQixFQUFPeEgiLCJmaWxlIjoib3B0aW1hbC1zZWxlY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJPcHRpbWFsU2VsZWN0XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIk9wdGltYWxTZWxlY3RcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qKlxuICogIyBVdGlsaXRpZXNcbiAqXG4gKiBDb252ZW5pZW5jZSBoZWxwZXJzLlxuICovXG5cbi8qKlxuICogQ3JlYXRlIGFuIGFycmF5IHdpdGggdGhlIERPTSBub2RlcyBvZiB0aGUgbGlzdFxuICpcbiAqIEBwYXJhbSAge05vZGVMaXN0fSAgICAgICAgICAgICBub2RlcyAtIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge0FycmF5LjxIVE1MRWxlbWVudD59ICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnROb2RlTGlzdCAobm9kZXMpIHtcbiAgY29uc3QgeyBsZW5ndGggfSA9IG5vZGVzXG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBhcnJbaV0gPSBub2Rlc1tpXVxuICB9XG4gIHJldHVybiBhcnJcbn1cblxuLyoqXG4gKiBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBsaW5lIGJyZWFrcyBhcyBhIHNpbXBsaWZpZWQgdmVyc2lvbiBvZiAnQ1NTLmVzY2FwZSgpJ1xuICpcbiAqIERlc2NyaXB0aW9uIG9mIHZhbGlkIGNoYXJhY3RlcnM6IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlc1xuICpcbiAqIEBwYXJhbSAge1N0cmluZz99IHZhbHVlIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVWYWx1ZSAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLnJlcGxhY2UoL1snXCJgXFxcXC86XFw/JiEjJCVeKClbXFxde3x9Kis7LC48PT5Afl0vZywgJ1xcXFwkJicpXG4gICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgJ1xcQScpXG59XG4iLCIvKipcbiAqICMgTWF0Y2hcbiAqXG4gKiBSZXRyaWV2ZSBzZWxlY3RvciBmb3IgYSBub2RlLlxuICovXG5cbmltcG9ydCB7IGVzY2FwZVZhbHVlIH0gZnJvbSAnLi91dGlsaXRpZXMnXG5cbmNvbnN0IGRlZmF1bHRJZ25vcmUgPSB7XG4gIGF0dHJpYnV0ZSAoYXR0cmlidXRlTmFtZSkge1xuICAgIHJldHVybiBbXG4gICAgICAnc3R5bGUnLFxuICAgICAgJ2RhdGEtcmVhY3RpZCcsXG4gICAgICAnZGF0YS1yZWFjdC1jaGVja3N1bSdcbiAgICBdLmluZGV4T2YoYXR0cmlidXRlTmFtZSkgPiAtMVxuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBwYXRoIG9mIHRoZSBlbGVtZW50XG4gKlxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IG5vZGUgICAgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgb3B0aW9ucyAtIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXRjaCAobm9kZSwgb3B0aW9ucykge1xuXG4gIGNvbnN0IHtcbiAgICByb290ID0gZG9jdW1lbnQsXG4gICAgc2tpcCA9IG51bGwsXG4gICAgcHJpb3JpdHkgPSBbJ2lkJywgJ2NsYXNzJywgJ2hyZWYnLCAnc3JjJ10sXG4gICAgaWdub3JlID0ge31cbiAgfSA9IG9wdGlvbnNcblxuICBjb25zdCBwYXRoID0gW11cbiAgdmFyIGVsZW1lbnQgPSBub2RlXG4gIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aFxuXG4gIGNvbnN0IHNraXBDb21wYXJlID0gc2tpcCAmJiAoQXJyYXkuaXNBcnJheShza2lwKSA/IHNraXAgOiBbc2tpcF0pLm1hcCgoZW50cnkpID0+IHtcbiAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gKGVsZW1lbnQpID0+IGVsZW1lbnQgPT09IGVudHJ5XG4gICAgfVxuICAgIHJldHVybiBlbnRyeVxuICB9KVxuXG4gIGNvbnN0IHNraXBDaGVja3MgPSAoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiBza2lwICYmIHNraXBDb21wYXJlLnNvbWUoKGNvbXBhcmUpID0+IGNvbXBhcmUoZWxlbWVudCkpXG4gIH1cblxuICBPYmplY3Qua2V5cyhpZ25vcmUpLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICB2YXIgcHJlZGljYXRlID0gaWdub3JlW3R5cGVdXG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgPT09ICdmdW5jdGlvbicpIHJldHVyblxuICAgIGlmICh0eXBlb2YgcHJlZGljYXRlID09PSAnbnVtYmVyJykge1xuICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlLnRvU3RyaW5nKClcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwcmVkaWNhdGUgPSBuZXcgUmVnRXhwKGVzY2FwZVZhbHVlKHByZWRpY2F0ZSkucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKSlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgPT09ICdib29sZWFuJykge1xuICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlID8gLyg/OikvIDogLy5eL1xuICAgIH1cbiAgICAvLyBjaGVjayBjbGFzcy0vYXR0cmlidXRlbmFtZSBmb3IgcmVnZXhcbiAgICBpZ25vcmVbdHlwZV0gPSAobmFtZSwgdmFsdWUpID0+IHByZWRpY2F0ZS50ZXN0KHZhbHVlKVxuICB9KVxuXG4gIHZhciBpZ25vcmVBdHRyaWJ1dGUgPSBpZ25vcmUuYXR0cmlidXRlO1xuICBpZ25vcmUuYXR0cmlidXRlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBkZWZhdWx0UHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGlnbm9yZUF0dHJpYnV0ZSAmJiBpZ25vcmVBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGRlZmF1bHRQcmVkaWNhdGUpO1xuICB9O1xuXG4gIHdoaWxlIChlbGVtZW50ICE9PSByb290KSB7XG4gICAgaWYgKHNraXBDaGVja3MoZWxlbWVudCkgIT09IHRydWUpIHtcbiAgICAgIC8vIH4gZ2xvYmFsXG4gICAgICBpZiAoY2hlY2tBdHRyaWJ1dGVzKHByaW9yaXR5LCBlbGVtZW50LCBpZ25vcmUsIHBhdGgsIHJvb3QpKSBicmVha1xuICAgICAgaWYgKGNoZWNrVGFnKGVsZW1lbnQsIGlnbm9yZSwgcGF0aCwgcm9vdCkpIGJyZWFrXG5cbiAgICAgIC8vIH4gbG9jYWxcbiAgICAgIGNoZWNrQXR0cmlidXRlcyhwcmlvcml0eSwgZWxlbWVudCwgaWdub3JlLCBwYXRoKVxuICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSBsZW5ndGgpIHtcbiAgICAgICAgY2hlY2tUYWcoZWxlbWVudCwgaWdub3JlLCBwYXRoKVxuICAgICAgfVxuXG4gICAgICAvLyBkZWZpbmUgb25seSBvbmUgcGFydCBlYWNoIGl0ZXJhdGlvblxuICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSBsZW5ndGgpIHtcbiAgICAgICAgY2hlY2tDaGlsZHMocHJpb3JpdHksIGVsZW1lbnQsIGlnbm9yZSwgcGF0aClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlXG4gICAgbGVuZ3RoID0gcGF0aC5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbGVtZW50ID09PSByb290KSB7XG4gICAgY29uc3QgcGF0dGVybiA9IGZpbmRQYXR0ZXJuKHByaW9yaXR5LCBlbGVtZW50LCBpZ25vcmUpXG4gICAgcGF0aC51bnNoaWZ0KHBhdHRlcm4pXG4gIH1cblxuICByZXR1cm4gcGF0aC5qb2luKCcgJylcbn1cblxuLyoqXG4gKiBFeHRlbmQgcGF0aCB3aXRoIGF0dHJpYnV0ZSBpZGVudGlmaWVyXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPHN0cmluZz59IHByaW9yaXR5IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICAgIGVsZW1lbnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgIGlnbm9yZSAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7QXJyYXkuPHN0cmluZz59IHBhdGggICAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICAgIHBhcmVudCAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBjaGVja0F0dHJpYnV0ZXMgKHByaW9yaXR5LCBlbGVtZW50LCBpZ25vcmUsIHBhdGgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICBjb25zdCBwYXR0ZXJuID0gZmluZEF0dHJpYnV0ZXNQYXR0ZXJuKHByaW9yaXR5LCBlbGVtZW50LCBpZ25vcmUpXG4gIGlmIChwYXR0ZXJuKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHBhdHRlcm4pXG4gICAgaWYgKG1hdGNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICBwYXRoLnVuc2hpZnQocGF0dGVybilcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIExvb2t1cCBhdHRyaWJ1dGUgaWRlbnRpZmllclxuICpcbiAqIEBwYXJhbSAge0FycmF5LjxzdHJpbmc+fSBwcmlvcml0eSAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgICBlbGVtZW50ICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgICBpZ25vcmUgICAtIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge3N0cmluZz99ICAgICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZnVuY3Rpb24gZmluZEF0dHJpYnV0ZXNQYXR0ZXJuIChwcmlvcml0eSwgZWxlbWVudCwgaWdub3JlKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBlbGVtZW50LmF0dHJpYnV0ZXNcbiAgY29uc3Qgc29ydGVkS2V5cyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLnNvcnQoKGN1cnIsIG5leHQpID0+IHtcbiAgICBjb25zdCBjdXJyUG9zID0gcHJpb3JpdHkuaW5kZXhPZihhdHRyaWJ1dGVzW2N1cnJdLm5hbWUpXG4gICAgY29uc3QgbmV4dFBvcyA9IHByaW9yaXR5LmluZGV4T2YoYXR0cmlidXRlc1tuZXh0XS5uYW1lKVxuICAgIGlmIChuZXh0UG9zID09PSAtMSkge1xuICAgICAgaWYgKGN1cnJQb3MgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJQb3MgLSBuZXh0UG9zXG4gIH0pXG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzb3J0ZWRLZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IHNvcnRlZEtleXNbaV1cbiAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2tleV1cbiAgICBjb25zdCBhdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlLm5hbWVcbiAgICBjb25zdCBhdHRyaWJ1dGVWYWx1ZSA9IGVzY2FwZVZhbHVlKGF0dHJpYnV0ZS52YWx1ZSlcblxuICAgIGNvbnN0IGN1cnJlbnRJZ25vcmUgPSBpZ25vcmVbYXR0cmlidXRlTmFtZV0gfHwgaWdub3JlLmF0dHJpYnV0ZVxuICAgIGNvbnN0IGN1cnJlbnREZWZhdWx0SWdub3JlID0gZGVmYXVsdElnbm9yZVthdHRyaWJ1dGVOYW1lXSB8fCBkZWZhdWx0SWdub3JlLmF0dHJpYnV0ZVxuICAgIGlmIChjaGVja0lnbm9yZShjdXJyZW50SWdub3JlLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSwgY3VycmVudERlZmF1bHRJZ25vcmUpKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBwYXR0ZXJuID0gYFske2F0dHJpYnV0ZU5hbWV9PVwiJHthdHRyaWJ1dGVWYWx1ZX1cIl1gXG5cbiAgICBpZiAoKC9cXGJcXGQvKS50ZXN0KGF0dHJpYnV0ZVZhbHVlKSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmIChhdHRyaWJ1dGVOYW1lID09PSAnaWQnKSB7XG4gICAgICAgIHBhdHRlcm4gPSBgIyR7YXR0cmlidXRlVmFsdWV9YFxuICAgICAgfVxuXG4gICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PT0gJ2NsYXNzJykge1xuICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBhdHRyaWJ1dGVWYWx1ZS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnLicpXG4gICAgICAgIHBhdHRlcm4gPSBgLiR7Y2xhc3NOYW1lfWBcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGF0dGVyblxuICB9XG4gIHJldHVybiBudWxsXG59XG5cbi8qKlxuICogRXh0ZW5kIHBhdGggd2l0aCB0YWcgaWRlbnRpZmllclxuICpcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgICBlbGVtZW50IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgIGlnbm9yZSAgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtBcnJheS48c3RyaW5nPn0gcGF0aCAgICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgICBwYXJlbnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIGNoZWNrVGFnIChlbGVtZW50LCBpZ25vcmUsIHBhdGgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICBjb25zdCBwYXR0ZXJuID0gZmluZFRhZ1BhdHRlcm4oZWxlbWVudCwgaWdub3JlKVxuICBpZiAocGF0dGVybikge1xuICAgIGNvbnN0IG1hdGNoZXMgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocGF0dGVybilcbiAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHBhdGgudW5zaGlmdChwYXR0ZXJuKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogTG9va3VwIHRhZyBpZGVudGlmaWVyXG4gKlxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgaWdub3JlICAtIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge2Jvb2xlYW59ICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBmaW5kVGFnUGF0dGVybiAoZWxlbWVudCwgaWdub3JlKSB7XG4gIGNvbnN0IHRhZ05hbWUgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICBpZiAoY2hlY2tJZ25vcmUoaWdub3JlLnRhZywgbnVsbCwgdGFnTmFtZSkpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIHJldHVybiB0YWdOYW1lXG59XG5cbi8qKlxuICogRXh0ZW5kIHBhdGggd2l0aCBzcGVjaWZpYyBjaGlsZCBpZGVudGlmaWVyXG4gKlxuICogTk9URTogJ2NoaWxkVGFncycgaXMgYSBjdXN0b20gcHJvcGVydHkgdG8gdXNlIGFzIGEgdmlldyBmaWx0ZXIgZm9yIHRhZ3MgdXNpbmcgJ2FkYXB0ZXIuanMnXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPHN0cmluZz59IHByaW9yaXR5IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICAgIGVsZW1lbnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgIGlnbm9yZSAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7QXJyYXkuPHN0cmluZz59IHBhdGggICAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBjaGVja0NoaWxkcyAocHJpb3JpdHksIGVsZW1lbnQsIGlnbm9yZSwgcGF0aCkge1xuICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGVcbiAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnQuY2hpbGRUYWdzIHx8IHBhcmVudC5jaGlsZHJlblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV1cbiAgICBpZiAoY2hpbGQgPT09IGVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGNoaWxkUGF0dGVybiA9IGZpbmRQYXR0ZXJuKHByaW9yaXR5LCBjaGlsZCwgaWdub3JlKVxuICAgICAgaWYgKCFjaGlsZFBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihgXG4gICAgICAgICAgRWxlbWVudCBjb3VsZG5cXCd0IGJlIG1hdGNoZWQgdGhyb3VnaCBzdHJpY3QgaWdub3JlIHBhdHRlcm4hXG4gICAgICAgIGAsIGNoaWxkLCBpZ25vcmUsIGNoaWxkUGF0dGVybilcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhdHRlcm4gPSBgPiAke2NoaWxkUGF0dGVybn06bnRoLWNoaWxkKCR7aSsxfSlgXG4gICAgICBwYXRoLnVuc2hpZnQocGF0dGVybilcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIExvb2t1cCBpZGVudGlmaWVyXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPHN0cmluZz59IHByaW9yaXR5IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICAgIGVsZW1lbnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgIGlnbm9yZSAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBmaW5kUGF0dGVybiAocHJpb3JpdHksIGVsZW1lbnQsIGlnbm9yZSkge1xuICB2YXIgcGF0dGVybiA9IGZpbmRBdHRyaWJ1dGVzUGF0dGVybihwcmlvcml0eSwgZWxlbWVudCwgaWdub3JlKVxuICBpZiAoIXBhdHRlcm4pIHtcbiAgICBwYXR0ZXJuID0gZmluZFRhZ1BhdHRlcm4oZWxlbWVudCwgaWdub3JlKVxuICB9XG4gIHJldHVybiBwYXR0ZXJuXG59XG5cbi8qKlxuICogVmFsaWRhdGUgd2l0aCBjdXN0b20gYW5kIGRlZmF1bHQgZnVuY3Rpb25zXG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb259IHByZWRpY2F0ZSAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtzdHJpbmc/fSAgbmFtZSAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge3N0cmluZ30gICB2YWx1ZSAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7RnVuY3Rpb259IGRlZmF1bHRQcmVkaWNhdGUgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtib29sZWFufSAgICAgICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZnVuY3Rpb24gY2hlY2tJZ25vcmUgKHByZWRpY2F0ZSwgbmFtZSwgdmFsdWUsIGRlZmF1bHRQcmVkaWNhdGUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgY29uc3QgY2hlY2sgPSBwcmVkaWNhdGUgfHwgZGVmYXVsdFByZWRpY2F0ZVxuICBpZiAoIWNoZWNrKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIGNoZWNrKG5hbWUsIHZhbHVlLCBkZWZhdWx0UHJlZGljYXRlKVxufVxuIiwiLyoqXG4gKiAjIE9wdGltaXplXG4gKlxuICogMS4pIEltcHJvdmUgZWZmaWNpZW5jeSB0aHJvdWdoIHNob3J0ZXIgc2VsZWN0b3JzIGJ5IHJlbW92aW5nIHJlZHVuZGFuY3lcbiAqIDIuKSBJbXByb3ZlIHJvYnVzdG5lc3MgdGhyb3VnaCBzZWxlY3RvciB0cmFuc2Zvcm1hdGlvblxuICovXG5cbmltcG9ydCBhZGFwdCBmcm9tICcuL2FkYXB0J1xuaW1wb3J0IHsgY29udmVydE5vZGVMaXN0IH0gZnJvbSAnLi91dGlsaXRpZXMnXG5cbi8qKlxuICogQXBwbHkgZGlmZmVyZW50IG9wdGltaXphdGlvbiB0ZWNobmlxdWVzXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudHxBcnJheS48SFRNTEVsZW1lbnQ+fSBlbGVtZW50ICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9wdGltaXplIChzZWxlY3RvciwgZWxlbWVudHMsIG9wdGlvbnMgPSB7fSkge1xuXG4gIC8vIGNvbnZlcnQgc2luZ2xlIGVudHJ5IGFuZCBOb2RlTGlzdFxuICBpZiAoIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgZWxlbWVudHMgPSAhZWxlbWVudHMubGVuZ3RoID8gW2VsZW1lbnRzXSA6IGNvbnZlcnROb2RlTGlzdChlbGVtZW50cylcbiAgfVxuXG4gIGlmICghZWxlbWVudHMubGVuZ3RoIHx8IGVsZW1lbnRzLnNvbWUoKGVsZW1lbnQpID0+IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGlucHV0IC0gdG8gY29tcGFyZSBIVE1MRWxlbWVudHMgaXRzIG5lY2Vzc2FyeSB0byBwcm92aWRlIGEgcmVmZXJlbmNlIG9mIHRoZSBzZWxlY3RlZCBub2RlKHMpISAobWlzc2luZyBcImVsZW1lbnRzXCIpYClcbiAgfVxuXG4gIGNvbnN0IGdsb2JhbE1vZGlmaWVkID0gYWRhcHQoZWxlbWVudHNbMF0sIG9wdGlvbnMpXG5cbiAgLy8gY2h1bmsgcGFydHMgb3V0c2lkZSBvZiBxdW90ZXMgKGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI1NjYzNzI5KVxuICB2YXIgcGF0aCA9IHNlbGVjdG9yLnJlcGxhY2UoLz4gL2csICc+Jykuc3BsaXQoL1xccysoPz0oPzooPzpbXlwiXSpcIil7Mn0pKlteXCJdKiQpLylcblxuICBpZiAocGF0aC5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIG9wdGltaXplUGFydCgnJywgc2VsZWN0b3IsICcnLCBlbGVtZW50cylcbiAgfVxuXG4gIGNvbnN0IHNob3J0ZW5lZCA9IFtwYXRoLnBvcCgpXVxuICB3aGlsZSAocGF0aC5sZW5ndGggPiAxKSAge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBwYXRoLnBvcCgpXG4gICAgY29uc3QgcHJlUGFydCA9IHBhdGguam9pbignICcpXG4gICAgY29uc3QgcG9zdFBhcnQgPSBzaG9ydGVuZWQuam9pbignICcpXG5cbiAgICBjb25zdCBwYXR0ZXJuID0gYCR7cHJlUGFydH0gJHtwb3N0UGFydH1gXG4gICAgY29uc3QgbWF0Y2hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGF0dGVybilcbiAgICBpZiAobWF0Y2hlcy5sZW5ndGggIT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgc2hvcnRlbmVkLnVuc2hpZnQob3B0aW1pemVQYXJ0KHByZVBhcnQsIGN1cnJlbnQsIHBvc3RQYXJ0LCBlbGVtZW50cykpXG4gICAgfVxuICB9XG4gIHNob3J0ZW5lZC51bnNoaWZ0KHBhdGhbMF0pXG4gIHBhdGggPSBzaG9ydGVuZWRcblxuICAvLyBvcHRpbWl6ZSBzdGFydCArIGVuZFxuICBwYXRoWzBdID0gb3B0aW1pemVQYXJ0KCcnLCBwYXRoWzBdLCBwYXRoLnNsaWNlKDEpLmpvaW4oJyAnKSwgZWxlbWVudHMpXG4gIHBhdGhbcGF0aC5sZW5ndGgtMV0gPSBvcHRpbWl6ZVBhcnQocGF0aC5zbGljZSgwLCAtMSkuam9pbignICcpLCBwYXRoW3BhdGgubGVuZ3RoLTFdLCAnJywgZWxlbWVudHMpXG5cbiAgaWYgKGdsb2JhbE1vZGlmaWVkKSB7XG4gICAgZGVsZXRlIGdsb2JhbC5kb2N1bWVudFxuICB9XG5cbiAgcmV0dXJuIHBhdGguam9pbignICcpLnJlcGxhY2UoLz4vZywgJz4gJykudHJpbSgpXG59XG5cbi8qKlxuICogSW1wcm92ZSBhIGNodW5rIG9mIHRoZSBzZWxlY3RvclxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgIHByZVBhcnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICAgY3VycmVudCAgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgICBwb3N0UGFydCAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge0FycmF5LjxIVE1MRWxlbWVudD59IGVsZW1lbnRzIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIG9wdGltaXplUGFydCAocHJlUGFydCwgY3VycmVudCwgcG9zdFBhcnQsIGVsZW1lbnRzKSB7XG4gIGlmIChwcmVQYXJ0Lmxlbmd0aCkgcHJlUGFydCA9IGAke3ByZVBhcnR9IGBcbiAgaWYgKHBvc3RQYXJ0Lmxlbmd0aCkgcG9zdFBhcnQgPSBgICR7cG9zdFBhcnR9YFxuXG4gIC8vIHJvYnVzdG5lc3M6IGF0dHJpYnV0ZSB3aXRob3V0IHZhbHVlIChnZW5lcmFsaXphdGlvbilcbiAgaWYgKC9cXFsqXFxdLy50ZXN0KGN1cnJlbnQpKSB7XG4gICAgY29uc3Qga2V5ID0gY3VycmVudC5yZXBsYWNlKC89LiokLywgJ10nKVxuICAgIHZhciBwYXR0ZXJuID0gYCR7cHJlUGFydH0ke2tleX0ke3Bvc3RQYXJ0fWBcbiAgICB2YXIgbWF0Y2hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGF0dGVybilcbiAgICBpZiAoY29tcGFyZVJlc3VsdHMobWF0Y2hlcywgZWxlbWVudHMpKSB7XG4gICAgICBjdXJyZW50ID0ga2V5XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJvYnVzdG5lc3M6IHJlcGxhY2Ugc3BlY2lmaWMga2V5LXZhbHVlIHdpdGggYmFzZSB0YWcgKGhldXJpc3RpYylcbiAgICAgIGNvbnN0IHJlZmVyZW5jZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAke3ByZVBhcnR9JHtrZXl9YClcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmVmZXJlbmNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gcmVmZXJlbmNlc1tpXVxuICAgICAgICBpZiAoZWxlbWVudHMuc29tZSgoZWxlbWVudCkgPT4gcmVmZXJlbmNlLmNvbnRhaW5zKGVsZW1lbnQpKSkge1xuICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gcmVmZXJlbmNlLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIHZhciBwYXR0ZXJuID0gYCR7cHJlUGFydH0ke2Rlc2NyaXB0aW9ufSR7cG9zdFBhcnR9YFxuICAgICAgICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXR0ZXJuKVxuICAgICAgICAgIGlmIChjb21wYXJlUmVzdWx0cyhtYXRjaGVzLCBlbGVtZW50cykpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBkZXNjcmlwdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gcm9idXN0bmVzczogZGVzY2VuZGFudCBpbnN0ZWFkIGNoaWxkIChoZXVyaXN0aWMpXG4gIGlmICgvPi8udGVzdChjdXJyZW50KSkge1xuICAgIGNvbnN0IGRlc2NlbmRhbnQgPSBjdXJyZW50LnJlcGxhY2UoLz4vLCAnJylcbiAgICB2YXIgcGF0dGVybiA9IGAke3ByZVBhcnR9JHtkZXNjZW5kYW50fSR7cG9zdFBhcnR9YFxuICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXR0ZXJuKVxuICAgIGlmIChjb21wYXJlUmVzdWx0cyhtYXRjaGVzLCBlbGVtZW50cykpIHtcbiAgICAgIGN1cnJlbnQgPSBkZXNjZW5kYW50XG4gICAgfVxuICB9XG5cbiAgLy8gcm9idXN0bmVzczogJ250aC1vZi10eXBlJyBpbnN0ZWFkICdudGgtY2hpbGQnIChoZXVyaXN0aWMpXG4gIGlmICgvOm50aC1jaGlsZC8udGVzdChjdXJyZW50KSkge1xuICAgIC8vIFRPRE86IGNvbnNpZGVyIGNvbXBsZXRlIGNvdmVyYWdlIG9mICdudGgtb2YtdHlwZScgcmVwbGFjZW1lbnRcbiAgICBjb25zdCB0eXBlID0gY3VycmVudC5yZXBsYWNlKC9udGgtY2hpbGQvZywgJ250aC1vZi10eXBlJylcbiAgICB2YXIgcGF0dGVybiA9IGAke3ByZVBhcnR9JHt0eXBlfSR7cG9zdFBhcnR9YFxuICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXR0ZXJuKVxuICAgIGlmIChjb21wYXJlUmVzdWx0cyhtYXRjaGVzLCBlbGVtZW50cykpIHtcbiAgICAgIGN1cnJlbnQgPSB0eXBlXG4gICAgfVxuICB9XG5cbiAgLy8gZWZmaWNpZW5jeTogY29tYmluYXRpb25zIG9mIGNsYXNzbmFtZSAocGFydGlhbCBwZXJtdXRhdGlvbnMpXG4gIGlmICgvXFwuXFxTK1xcLlxcUysvLnRlc3QoY3VycmVudCkpIHtcbiAgICB2YXIgbmFtZXMgPSBjdXJyZW50LnRyaW0oKS5zcGxpdCgnLicpLnNsaWNlKDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKG5hbWUpID0+IGAuJHtuYW1lfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zb3J0KChjdXJyLCBuZXh0KSA9PiBjdXJyLmxlbmd0aCAtIG5leHQubGVuZ3RoKVxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHBhcnRpYWwgPSBjdXJyZW50LnJlcGxhY2UobmFtZXMuc2hpZnQoKSwgJycpLnRyaW0oKVxuICAgICAgdmFyIHBhdHRlcm4gPSBgJHtwcmVQYXJ0fSR7cGFydGlhbH0ke3Bvc3RQYXJ0fWAudHJpbSgpXG4gICAgICBpZiAoIXBhdHRlcm4ubGVuZ3RoIHx8IHBhdHRlcm4uY2hhckF0KDApID09PSAnPicgfHwgcGF0dGVybi5jaGFyQXQocGF0dGVybi5sZW5ndGgtMSkgPT09ICc+Jykge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhdHRlcm4pXG4gICAgICBpZiAoY29tcGFyZVJlc3VsdHMobWF0Y2hlcywgZWxlbWVudHMpKSB7XG4gICAgICAgIGN1cnJlbnQgPSBwYXJ0aWFsXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcm9idXN0bmVzczogZGVncmFkZSBjb21wbGV4IGNsYXNzbmFtZSAoaGV1cmlzdGljKVxuICAgIG5hbWVzID0gY3VycmVudCAmJiBjdXJyZW50Lm1hdGNoKC9cXC4vZylcbiAgICBpZiAobmFtZXMgJiYgbmFtZXMubGVuZ3RoID4gMikge1xuICAgICAgY29uc3QgcmVmZXJlbmNlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7cHJlUGFydH0ke2N1cnJlbnR9YClcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmVmZXJlbmNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gcmVmZXJlbmNlc1tpXVxuICAgICAgICBpZiAoZWxlbWVudHMuc29tZSgoZWxlbWVudCkgPT4gcmVmZXJlbmNlLmNvbnRhaW5zKGVsZW1lbnQpICkpIHtcbiAgICAgICAgICAvLyBUT0RPOlxuICAgICAgICAgIC8vIC0gY2hlY2sgdXNpbmcgYXR0cmlidXRlcyArIHJlZ2FyZCBleGNsdWRlc1xuICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gcmVmZXJlbmNlLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIHZhciBwYXR0ZXJuID0gYCR7cHJlUGFydH0ke2Rlc2NyaXB0aW9ufSR7cG9zdFBhcnR9YFxuICAgICAgICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXR0ZXJuKVxuICAgICAgICAgIGlmIChjb21wYXJlUmVzdWx0cyhtYXRjaGVzLCBlbGVtZW50cykpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBkZXNjcmlwdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGN1cnJlbnRcbn1cblxuLyoqXG4gKiBFdmFsdWF0ZSBtYXRjaGVzIHdpdGggZXhwZWN0ZWQgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0gIHtBcnJheS48SFRNTEVsZW1lbnQ+fSBtYXRjaGVzICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge0FycmF5LjxIVE1MRWxlbWVudD59IGVsZW1lbnRzIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVSZXN1bHRzIChtYXRjaGVzLCBlbGVtZW50cykge1xuICBjb25zdCB7IGxlbmd0aCB9ID0gbWF0Y2hlc1xuICByZXR1cm4gbGVuZ3RoID09PSBlbGVtZW50cy5sZW5ndGggJiYgZWxlbWVudHMuZXZlcnkoKGVsZW1lbnQpID0+IHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobWF0Y2hlc1tpXSA9PT0gZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfSlcbn1cbiIsIi8qKlxuICogIyBDb21tb25cbiAqXG4gKiBQcm9jZXNzIGNvbGxlY3Rpb25zIGZvciBzaW1pbGFyaXRpZXMuXG4gKi9cblxuLyoqXG4gKiBGaW5kIHRoZSBsYXN0IGNvbW1vbiBhbmNlc3RvciBvZiBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSAge0FycmF5LjxIVE1MRWxlbWVudHM+fSBlbGVtZW50cyAtIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbW1vbkFuY2VzdG9yIChlbGVtZW50cywgb3B0aW9ucyA9IHt9KSB7XG5cbiAgY29uc3Qge1xuICAgIHJvb3QgPSBkb2N1bWVudFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGFuY2VzdG9ycyA9IFtdXG5cbiAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBwYXJlbnRzID0gW11cbiAgICB3aGlsZSAoZWxlbWVudCAhPT0gcm9vdCkge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZVxuICAgICAgcGFyZW50cy51bnNoaWZ0KGVsZW1lbnQpXG4gICAgfVxuICAgIGFuY2VzdG9yc1tpbmRleF0gPSBwYXJlbnRzXG4gIH0pXG5cbiAgYW5jZXN0b3JzLnNvcnQoKGN1cnIsIG5leHQpID0+IGN1cnIubGVuZ3RoIC0gbmV4dC5sZW5ndGgpXG5cbiAgY29uc3Qgc2hhbGxvd0FuY2VzdG9yID0gYW5jZXN0b3JzLnNoaWZ0KClcblxuICB2YXIgYW5jZXN0b3IgPSBudWxsXG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzaGFsbG93QW5jZXN0b3IubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3QgcGFyZW50ID0gc2hhbGxvd0FuY2VzdG9yW2ldXG4gICAgY29uc3QgbWlzc2luZyA9IGFuY2VzdG9ycy5zb21lKChvdGhlclBhcmVudHMpID0+IHtcbiAgICAgIHJldHVybiAhb3RoZXJQYXJlbnRzLnNvbWUoKG90aGVyUGFyZW50KSA9PiBvdGhlclBhcmVudCA9PT0gcGFyZW50KVxuICAgIH0pXG5cbiAgICBpZiAobWlzc2luZykge1xuICAgICAgLy8gVE9ETzogZmluZCBzaW1pbGFyIHN1Yi1wYXJlbnRzLCBub3QgdGhlIHRvcCByb290LCBlLmcuIHNoYXJpbmcgYSBjbGFzcyBzZWxlY3RvclxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBhbmNlc3RvciA9IHBhcmVudFxuICB9XG5cbiAgcmV0dXJuIGFuY2VzdG9yXG59XG5cbi8qKlxuICogR2V0IGEgc2V0IG9mIGNvbW1vbiBwcm9wZXJ0aWVzIG9mIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPEhUTUxFbGVtZW50Pn0gZWxlbWVudHMgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbW1vblByb3BlcnRpZXMgKGVsZW1lbnRzKSB7XG5cbiAgY29uc3QgY29tbW9uUHJvcGVydGllcyA9IHtcbiAgICBjbGFzc2VzOiBbXSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICB0YWc6IG51bGxcbiAgfVxuXG4gIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcblxuICAgIHZhciB7XG4gICAgICBjbGFzc2VzOiBjb21tb25DbGFzc2VzLFxuICAgICAgYXR0cmlidXRlczogY29tbW9uQXR0cmlidXRlcyxcbiAgICAgIHRhZzogY29tbW9uVGFnXG4gICAgfSA9IGNvbW1vblByb3BlcnRpZXNcblxuICAgIC8vIH4gY2xhc3Nlc1xuICAgIGlmIChjb21tb25DbGFzc2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBjbGFzc2VzID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJylcbiAgICAgIGlmIChjbGFzc2VzKSB7XG4gICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLnRyaW0oKS5zcGxpdCgnICcpXG4gICAgICAgIGlmICghY29tbW9uQ2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgICBjb21tb25Qcm9wZXJ0aWVzLmNsYXNzZXMgPSBjbGFzc2VzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tbW9uQ2xhc3NlcyA9IGNvbW1vbkNsYXNzZXMuZmlsdGVyKChlbnRyeSkgPT4gY2xhc3Nlcy5zb21lKChuYW1lKSA9PiBuYW1lID09PSBlbnRyeSkpXG4gICAgICAgICAgaWYgKGNvbW1vbkNsYXNzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb21tb25Qcm9wZXJ0aWVzLmNsYXNzZXMgPSBjb21tb25DbGFzc2VzXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb21tb25Qcm9wZXJ0aWVzLmNsYXNzZXNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IHJlc3RydWN0dXJlIHJlbW92YWwgYXMgMnggc2V0IC8gMnggZGVsZXRlLCBpbnN0ZWFkIG9mIG1vZGlmeSBhbHdheXMgcmVwbGFjaW5nIHdpdGggbmV3IGNvbGxlY3Rpb25cbiAgICAgICAgZGVsZXRlIGNvbW1vblByb3BlcnRpZXMuY2xhc3Nlc1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIH4gYXR0cmlidXRlc1xuICAgIGlmIChjb21tb25BdHRyaWJ1dGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnRBdHRyaWJ1dGVzID0gZWxlbWVudC5hdHRyaWJ1dGVzXG4gICAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoZWxlbWVudEF0dHJpYnV0ZXMpLnJlZHVjZSgoYXR0cmlidXRlcywga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGVsZW1lbnRBdHRyaWJ1dGVzW2tleV1cbiAgICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZS5uYW1lXG4gICAgICAgIC8vIE5PVEU6IHdvcmthcm91bmQgZGV0ZWN0aW9uIGZvciBub24tc3RhbmRhcmQgcGhhbnRvbWpzIE5hbWVkTm9kZU1hcCBiZWhhdmlvdXJcbiAgICAgICAgLy8gKGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vYXJpeWEvcGhhbnRvbWpzL2lzc3Vlcy8xNDYzNClcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGVOYW1lICE9PSAnY2xhc3MnKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzXG4gICAgICB9LCB7fSlcblxuICAgICAgY29uc3QgYXR0cmlidXRlc05hbWVzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcylcbiAgICAgIGNvbnN0IGNvbW1vbkF0dHJpYnV0ZXNOYW1lcyA9IE9iamVjdC5rZXlzKGNvbW1vbkF0dHJpYnV0ZXMpXG5cbiAgICAgIGlmIChhdHRyaWJ1dGVzTmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICghY29tbW9uQXR0cmlidXRlc05hbWVzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbW1vblByb3BlcnRpZXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21tb25BdHRyaWJ1dGVzID0gY29tbW9uQXR0cmlidXRlc05hbWVzLnJlZHVjZSgobmV4dENvbW1vbkF0dHJpYnV0ZXMsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29tbW9uQXR0cmlidXRlc1tuYW1lXVxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBhdHRyaWJ1dGVzW25hbWVdKSB7XG4gICAgICAgICAgICAgIG5leHRDb21tb25BdHRyaWJ1dGVzW25hbWVdID0gdmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0Q29tbW9uQXR0cmlidXRlc1xuICAgICAgICAgIH0sIHt9KVxuICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhjb21tb25BdHRyaWJ1dGVzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbW1vblByb3BlcnRpZXMuYXR0cmlidXRlcyA9IGNvbW1vbkF0dHJpYnV0ZXNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGNvbW1vblByb3BlcnRpZXMuYXR0cmlidXRlc1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIGNvbW1vblByb3BlcnRpZXMuYXR0cmlidXRlc1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIH4gdGFnXG4gICAgaWYgKGNvbW1vblRhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCB0YWcgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgaWYgKCFjb21tb25UYWcpIHtcbiAgICAgICAgY29tbW9uUHJvcGVydGllcy50YWcgPSB0YWdcbiAgICAgIH0gZWxzZSBpZiAodGFnICE9PSBjb21tb25UYWcpIHtcbiAgICAgICAgZGVsZXRlIGNvbW1vblByb3BlcnRpZXMudGFnXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBjb21tb25Qcm9wZXJ0aWVzXG59XG4iLCIvKipcbiAqICMgU2VsZWN0XG4gKlxuICogQ29uc3RydWN0IGEgdW5pcXVlIENTUyBxdWVyeSBzZWxlY3RvciB0byBhY2Nlc3MgdGhlIHNlbGVjdGVkIERPTSBlbGVtZW50KHMpLlxuICogRm9yIGxvbmdldml0eSBpdCBhcHBsaWVzIGRpZmZlcmVudCBtYXRjaGluZyBhbmQgb3B0aW1pemF0aW9uIHN0cmF0ZWdpZXMuXG4gKi9cblxuaW1wb3J0IGFkYXB0IGZyb20gJy4vYWRhcHQnXG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9tYXRjaCdcbmltcG9ydCBvcHRpbWl6ZSBmcm9tICcuL29wdGltaXplJ1xuaW1wb3J0IHsgY29udmVydE5vZGVMaXN0IH0gZnJvbSAnLi91dGlsaXRpZXMnXG5pbXBvcnQgeyBnZXRDb21tb25BbmNlc3RvciwgZ2V0Q29tbW9uUHJvcGVydGllcyB9IGZyb20gJy4vY29tbW9uJ1xuXG4vKipcbiAqIEdldCBhIHNlbGVjdG9yIGZvciB0aGUgcHJvdmlkZWQgZWxlbWVudFxuICpcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgIG9wdGlvbnMgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNpbmdsZVNlbGVjdG9yIChlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgLy8gMyByZWZlcnMgdG8gLSBOb2RlLlRFWFRfTk9ERSB0eXBlXG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSAzKSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZVxuICB9XG5cbiAgLy8gMSByZWZlcnMgdG8gLSBOb2RlLkVMRU1FTlRfTk9ERSB0eXBlXG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGlucHV0IC0gb25seSBIVE1MRWxlbWVudHMgb3IgcmVwcmVzZW50YXRpb25zIG9mIHRoZW0gYXJlIHN1cHBvcnRlZCEgKG5vdCBcIiR7dHlwZW9mIGVsZW1lbnR9XCIpYClcbiAgfVxuXG4gIGNvbnN0IGdsb2JhbE1vZGlmaWVkID0gYWRhcHQoZWxlbWVudCwgb3B0aW9ucylcblxuICBjb25zdCBzZWxlY3RvciA9IG1hdGNoKGVsZW1lbnQsIG9wdGlvbnMpXG4gIGNvbnN0IG9wdGltaXplZCA9IG9wdGltaXplKHNlbGVjdG9yLCBlbGVtZW50LCBvcHRpb25zKVxuXG4gIC8vIGRlYnVnXG4gIC8vIGNvbnNvbGUubG9nKGBcbiAgLy8gICBzZWxlY3RvcjogICR7c2VsZWN0b3J9XG4gIC8vICAgb3B0aW1pemVkOiAke29wdGltaXplZH1cbiAgLy8gYClcbiAgbGV0IHNlbGVjdG9yVGFyZ2V0O1xuICBsZXQgb3B0aW1pemVkU2VsZWN0b3JUYXJnZXQ7XG5cbiAgaWYgKGdsb2JhbC5kb2N1bWVudCA9PT0gdHJ1ZSkge1xuICAgIHNlbGVjdG9yVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgb3B0aW1pemVkU2VsZWN0b3JUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGltaXplZCk7XG4gIH0gZWxzZSB7XG4gICAgc2VsZWN0b3JUYXJnZXQgPSBnbG9iYWwuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgb3B0aW1pemVkU2VsZWN0b3JUYXJnZXQgPSBnbG9iYWwuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpbWl6ZWQpO1xuICB9XG5cbiAgaWYgKGdsb2JhbE1vZGlmaWVkKSB7XG4gICAgZGVsZXRlIGdsb2JhbC5kb2N1bWVudFxuICB9XG5cbiAgaWYgKHNlbGVjdG9yVGFyZ2V0ICE9IG9wdGltaXplZFNlbGVjdG9yVGFyZ2V0KSB7XG4gICAgY29uc29sZS5sb2coJ0Vycm9yIGF0IHNlbGVjdG9yIG9wdGltaXphdGlvbi4gUmV0dXJuaW5nIHRoZSByYXcgc2VsZWN0b3IuJyk7XG5cbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cblxuICByZXR1cm4gb3B0aW1pemVkO1xufVxuXG4vKipcbiAqIEdldCBhIHNlbGVjdG9yIHRvIG1hdGNoIG11bHRpcGxlIGRlc2NlbmRhbnRzIGZyb20gYW4gYW5jZXN0b3JcbiAqXG4gKiBAcGFyYW0gIHtBcnJheS48SFRNTEVsZW1lbnQ+fE5vZGVMaXN0fSBlbGVtZW50cyAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNdWx0aVNlbGVjdG9yIChlbGVtZW50cywgb3B0aW9ucyA9IHt9KSB7XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGVsZW1lbnRzKSkge1xuICAgIGVsZW1lbnRzID0gY29udmVydE5vZGVMaXN0KGVsZW1lbnRzKVxuICB9XG5cbiAgaWYgKGVsZW1lbnRzLnNvbWUoKGVsZW1lbnQpID0+IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGlucHV0IC0gb25seSBhbiBBcnJheSBvZiBIVE1MRWxlbWVudHMgb3IgcmVwcmVzZW50YXRpb25zIG9mIHRoZW0gaXMgc3VwcG9ydGVkIWApXG4gIH1cblxuICBjb25zdCBnbG9iYWxNb2RpZmllZCA9IGFkYXB0KGVsZW1lbnRzWzBdLCBvcHRpb25zKVxuXG4gIGNvbnN0IGFuY2VzdG9yID0gZ2V0Q29tbW9uQW5jZXN0b3IoZWxlbWVudHMsIG9wdGlvbnMpXG4gIGNvbnN0IGFuY2VzdG9yU2VsZWN0b3IgPSBnZXRTaW5nbGVTZWxlY3RvcihhbmNlc3Rvciwgb3B0aW9ucylcblxuICAvLyBUT0RPOiBjb25zaWRlciB1c2FnZSBvZiBtdWx0aXBsZSBzZWxlY3RvcnMgKyBwYXJlbnQtY2hpbGQgcmVsYXRpb24gKyBjaGVjayBmb3IgcGFydCByZWR1bmRhbmN5XG4gIGNvbnN0IGNvbW1vblNlbGVjdG9ycyA9IGdldENvbW1vblNlbGVjdG9ycyhlbGVtZW50cylcbiAgY29uc3QgZGVzY2VuZGFudFNlbGVjdG9yID0gY29tbW9uU2VsZWN0b3JzWzBdXG5cbiAgY29uc3Qgc2VsZWN0b3IgPSBvcHRpbWl6ZShgJHthbmNlc3RvclNlbGVjdG9yfSAke2Rlc2NlbmRhbnRTZWxlY3Rvcn1gLCBlbGVtZW50cywgb3B0aW9ucylcbiAgY29uc3Qgc2VsZWN0b3JNYXRjaGVzID0gY29udmVydE5vZGVMaXN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKVxuXG4gIGlmICghZWxlbWVudHMuZXZlcnkoKGVsZW1lbnQpID0+IHNlbGVjdG9yTWF0Y2hlcy5zb21lKChlbnRyeSkgPT4gZW50cnkgPT09IGVsZW1lbnQpICkpIHtcbiAgICAvLyBUT0RPOiBjbHVzdGVyIG1hdGNoZXMgdG8gc3BsaXQgaW50byBzaW1pbGFyIGdyb3VwcyBmb3Igc3ViIHNlbGVjdGlvbnNcbiAgICByZXR1cm4gY29uc29sZS53YXJuKGBcbiAgICAgIFRoZSBzZWxlY3RlZCBlbGVtZW50cyBjYW5cXCd0IGJlIGVmZmljaWVudGx5IG1hcHBlZC5cbiAgICAgIEl0cyBwcm9iYWJseSBiZXN0IHRvIHVzZSBtdWx0aXBsZSBzaW5nbGUgc2VsZWN0b3JzIGluc3RlYWQhXG4gICAgYCwgZWxlbWVudHMpXG4gIH1cblxuICBpZiAoZ2xvYmFsTW9kaWZpZWQpIHtcbiAgICBkZWxldGUgZ2xvYmFsLmRvY3VtZW50XG4gIH1cblxuICByZXR1cm4gc2VsZWN0b3Jcbn1cblxuLyoqXG4gKiBHZXQgc2VsZWN0b3JzIHRvIGRlc2NyaWJlIGEgc2V0IG9mIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPEhUTUxFbGVtZW50cz59IGVsZW1lbnRzIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBnZXRDb21tb25TZWxlY3RvcnMgKGVsZW1lbnRzKSB7XG5cbiAgY29uc3QgeyBjbGFzc2VzLCBhdHRyaWJ1dGVzLCB0YWcgfSA9IGdldENvbW1vblByb3BlcnRpZXMoZWxlbWVudHMpXG5cbiAgY29uc3Qgc2VsZWN0b3JQYXRoID0gW11cblxuICBpZiAodGFnKSB7XG4gICAgc2VsZWN0b3JQYXRoLnB1c2godGFnKVxuICB9XG5cbiAgaWYgKGNsYXNzZXMpIHtcbiAgICBjb25zdCBjbGFzc1NlbGVjdG9yID0gY2xhc3Nlcy5tYXAoKG5hbWUpID0+IGAuJHtuYW1lfWApLmpvaW4oJycpXG4gICAgc2VsZWN0b3JQYXRoLnB1c2goY2xhc3NTZWxlY3RvcilcbiAgfVxuXG4gIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgY29uc3QgYXR0cmlidXRlU2VsZWN0b3IgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoKHBhcnRzLCBuYW1lKSA9PiB7XG4gICAgICBwYXJ0cy5wdXNoKGBbJHtuYW1lfT1cIiR7YXR0cmlidXRlc1tuYW1lXX1cIl1gKVxuICAgICAgcmV0dXJuIHBhcnRzXG4gICAgfSwgW10pLmpvaW4oJycpXG4gICAgc2VsZWN0b3JQYXRoLnB1c2goYXR0cmlidXRlU2VsZWN0b3IpXG4gIH1cblxuICBpZiAoc2VsZWN0b3JQYXRoLmxlbmd0aCkge1xuICAgIC8vIFRPRE86IGNoZWNrIGZvciBwYXJlbnQtY2hpbGQgcmVsYXRpb25cbiAgfVxuXG4gIHJldHVybiBbXG4gICAgc2VsZWN0b3JQYXRoLmpvaW4oJycpXG4gIF1cbn1cblxuLyoqXG4gKiBDaG9vc2UgYWN0aW9uIGRlcGVuZGluZyBvbiB0aGUgaW5wdXQgKG11bHRpcGxlL3NpbmdsZSlcbiAqXG4gKiBOT1RFOiBleHRlbmRlZCBkZXRlY3Rpb24gaXMgdXNlZCBmb3Igc3BlY2lhbCBjYXNlcyBsaWtlIHRoZSA8c2VsZWN0PiBlbGVtZW50IHdpdGggPG9wdGlvbnM+XG4gKlxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR8Tm9kZUxpc3R8QXJyYXkuPEhUTUxFbGVtZW50Pn0gaW5wdXQgICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRRdWVyeVNlbGVjdG9yIChpbnB1dCwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmIChpbnB1dC5sZW5ndGggJiYgIWlucHV0Lm5hbWUpIHtcbiAgICByZXR1cm4gZ2V0TXVsdGlTZWxlY3RvcihpbnB1dCwgb3B0aW9ucylcbiAgfVxuICByZXR1cm4gZ2V0U2luZ2xlU2VsZWN0b3IoaW5wdXQsIG9wdGlvbnMpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9