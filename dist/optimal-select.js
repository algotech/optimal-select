!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.OptimalSelect=e():t.OptimalSelect=e()}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"select",(function(){return w})),n.d(e,"getSingleSelector",(function(){return A})),n.d(e,"getMultiSelector",(function(){return k})),n.d(e,"optimize",(function(){return h})),n.d(e,"common",(function(){return r})),n.d(e,"default",(function(){return w}));var r={};function o(t){for(var e=t.length,n=new Array(e),r=0;r<e;r++)n[r]=t[r];return n}function c(t){return t&&t.replace(/['"`\\/:\?&!#$%^()[\]{|}*+;,.<=>@~]/g,"\\$&").replace(/\n/g,"A")}n.r(r),n.d(r,"getCommonAncestor",(function(){return b})),n.d(r,"getCommonProperties",(function(){return S}));var u={attribute:function(t){return["style","data-reactid","data-react-checksum"].indexOf(t)>-1}};function i(t,e){var n=e.root,r=void 0===n?document:n,o=e.skip,u=void 0===o?null:o,i=e.priority,l=void 0===i?["id","class","href","src"]:i,f=e.ignore,d=void 0===f?{}:f,v=e.exclude,h=void 0===v?{}:v,m=[],y=t,b=m.length,S=u&&(Array.isArray(u)?u:[u]).map((function(t){return"function"!=typeof t?function(e){return e===t}:t})),j=function(t){return u&&S.some((function(e){return e(t)}))};Object.keys(d).forEach((function(t){var e=d[t];"function"!=typeof e&&("number"==typeof e&&(e=e.toString()),"string"==typeof e&&(e=new RegExp(c(e).replace(/\\/g,"\\\\"))),"boolean"==typeof e&&(e=e?/(?:)/:/.^/),d[t]=function(t,n){return e.test(n)})}));var A=d.attribute;for(d.attribute=function(t,e,n){return A&&A(t,e,n)};y!==r;){if(!0!==j(y)){if(a(l,y,d,h,m,r))break;if(s(y,d,m,r))break;a(l,y,d,h,m),m.length===b&&s(y,d,m),m.length===b&&p(l,y,d,h,m)}y=y.parentNode,b=m.length}if(y===r){var k=g(l,y,d,h);m.unshift(k)}return m.join(" ")}function a(t,e,n,r,o){var c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e.parentNode,u=l(t,e,n,r);if(u){var i=c.querySelectorAll(u);if(1===i.length)return o.unshift(u),!0}return!1}function l(t,e,n,r){for(var o=e.attributes,i=Object.keys(o).sort((function(e,n){var r=t.indexOf(o[e].name),c=t.indexOf(o[n].name);return-1===c?-1===r?0:-1:r-c})),a=0,l=i.length;a<l;a++){var s=i[a],d=o[s],p=d.name,g=c(d.value);if(!v(n[p]||n.attribute,p,g,u[p]||u.attribute)){var h="[".concat(p,'="').concat(g,'"]');if(!1===/\b\d/.test(g)&&("id"===p&&(h="#".concat(g)),"class"===p)){var m=f(g,r.className);h=(m=m.trim().replace(/\s+/g,".")).length?".".concat(m):null}return h}}return null}function f(t,e){return t.split(" ").filter((function(t){return!t.length||!e(t)})).join(" ")}function s(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.parentNode,o=d(t,e);if(o){var c=r.getElementsByTagName(o);if(1===c.length)return n.unshift(o),!0}return!1}function d(t,e){var n=t.tagName.toLowerCase();return v(e.tag,null,n)?null:n}function p(t,e,n,r,o){for(var c=e.parentNode,u=c.childTags||c.children,i=0,a=u.length;i<a;i++){var l=u[i];if(l===e){var f=g(t,l,n,r);if(!f)return console.warn("\n          Element couldn't be matched through strict ignore pattern!\n        ",l,n,f);var s="> ".concat(f,":nth-child(").concat(i+1,")");return o.unshift(s),!0}}return!1}function g(t,e,n,r){var o=l(t,e,n,r);return o||(o=d(e,n)),o}function v(t,e,n,r){if(!n)return!0;var o=t||r;return!!o&&o(e,n,r)}function h(t,e){if(Array.isArray(e)||(e=e.length?o(e):[e]),!e.length||e.some((function(t){return 1!==t.nodeType})))throw new Error('Invalid input - to compare HTMLElements its necessary to provide a reference of the selected node(s)! (missing "elements")');e[0];var n=t.replace(/> /g,">").split(/\s+(?=(?:(?:[^"]*"){2})*[^"]*$)/);if(n.length<2)return m("",t,"",e);for(var r=[n.pop()];n.length>1;){var c=n.pop(),u=n.join(" "),i=r.join(" "),a="".concat(u," ").concat(i),l=document.querySelectorAll(a);l.length!==e.length&&r.unshift(m(u,c,i,e))}return r.unshift(n[0]),(n=r)[0]=m("",n[0],n.slice(1).join(" "),e),n[n.length-1]=m(n.slice(0,-1).join(" "),n[n.length-1],"",e),n.join(" ").replace(/>/g,"> ").trim()}function m(t,e,n,r){if(t.length&&(t="".concat(t," ")),n.length&&(n=" ".concat(n)),/\[*\]/.test(e)){var o=e.replace(/=.*$/,"]"),c="".concat(t).concat(o).concat(n);if(y(document.querySelectorAll(c),r))e=o;else for(var u=document.querySelectorAll("".concat(t).concat(o)),i=function(){var o=u[a];if(r.some((function(t){return o.contains(t)}))){var i=o.tagName.toLowerCase();return c="".concat(t).concat(i).concat(n),y(document.querySelectorAll(c),r)&&(e=i),"break"}},a=0,l=u.length;a<l;a++){if("break"===i())break}}if(/>/.test(e)){var f=e.replace(/>/,"");c="".concat(t).concat(f).concat(n);y(document.querySelectorAll(c),r)&&(e=f)}if(/:nth-child/.test(e)){var s=e.replace(/nth-child/g,"nth-of-type");c="".concat(t).concat(s).concat(n);y(document.querySelectorAll(c),r)&&(e=s)}if(/\.\S+\.\S+/.test(e)){for(var d=e.trim().split(".").slice(1).map((function(t){return".".concat(t)})).sort((function(t,e){return t.length-e.length}));d.length;){var p=e.replace(d.shift(),"").trim();if(!(c="".concat(t).concat(p).concat(n).trim()).length||">"===c.charAt(0)||">"===c.charAt(c.length-1))break;y(document.querySelectorAll(c),r)&&(e=p)}if((d=e&&e.match(/\./g))&&d.length>2){var g=document.querySelectorAll("".concat(t).concat(e)),v=function(){var o=g[a];if(r.some((function(t){return o.contains(t)}))){var u=o.tagName.toLowerCase();return c="".concat(t).concat(u).concat(n),y(document.querySelectorAll(c),r)&&(e=u),"break"}};for(a=0,l=g.length;a<l;a++){if("break"===v())break}}}return e}function y(t,e){var n=t.length;return n===e.length&&e.every((function(e){for(var r=0;r<n;r++)if(t[r]===e)return!0;return!1}))}function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.root,r=void 0===n?document:n,o=[];t.forEach((function(t,e){for(var n=[];t!==r;)t=t.parentNode,n.unshift(t);o[e]=n})),o.sort((function(t,e){return t.length-e.length}));for(var c=o.shift(),u=null,i=function(){var t=c[a];if(o.some((function(e){return!e.some((function(e){return e===t}))})))return"break";u=t},a=0,l=c.length;a<l;a++){var f=i();if("break"===f)break}return u}function S(t){var e={classes:[],attributes:{},tag:null};return t.forEach((function(t){var n=e.classes,r=e.attributes,o=e.tag;if(void 0!==n){var c=t.getAttribute("class");c?(c=c.trim().split(" "),n.length?(n=n.filter((function(t){return c.some((function(e){return e===t}))}))).length?e.classes=n:delete e.classes:e.classes=c):delete e.classes}if(void 0!==r){var u=t.attributes,i=Object.keys(u).reduce((function(t,e){var n=u[e],r=n.name;return n&&"class"!==r&&(t[r]=n.value),t}),{}),a=Object.keys(i),l=Object.keys(r);a.length?l.length?(r=l.reduce((function(t,e){var n=r[e];return n===i[e]&&(t[e]=n),t}),{}),Object.keys(r).length?e.attributes=r:delete e.attributes):e.attributes=i:delete e.attributes}if(void 0!==o){var f=t.tagName.toLowerCase();o?f!==o&&delete e.tag:e.tag=f}})),e}function j(t){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function A(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(3===t.nodeType&&(t=t.parentNode),1!==t.nodeType)throw new Error('Invalid input - only HTMLElements or representations of them are supported! (not "'.concat(j(t),'")'));var n=i(t,e),r=h(n,t,e);return document.querySelector(n)!=document.querySelector(r)?(console.log("Error at selector optimization. Returning the raw selector."),n):r}function k(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(Array.isArray(t)||(t=o(t)),t.some((function(t){return 1!==t.nodeType})))throw new Error("Invalid input - only an Array of HTMLElements or representations of them is supported!");t[0];var n=b(t,e),r=A(n,e),c=O(t),u=c[0],i=h("".concat(r," ").concat(u),t,e),a=o(document.querySelectorAll(i));return t.every((function(t){return a.some((function(e){return e===t}))}))?i:console.warn("\n      The selected elements can't be efficiently mapped.\n      Its probably best to use multiple single selectors instead!\n    ",t)}function O(t){var e=S(t),n=e.classes,r=e.attributes,o=e.tag,c=[];if(o&&c.push(o),n){var u=n.map((function(t){return".".concat(t)})).join("");c.push(u)}if(r){var i=Object.keys(r).reduce((function(t,e){return t.push("[".concat(e,'="').concat(r[e],'"]')),t}),[]).join("");c.push(i)}return c.length,[c.join("")]}function w(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.length&&!t.name?k(t,e):A(t,e)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9PcHRpbWFsU2VsZWN0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9PcHRpbWFsU2VsZWN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL09wdGltYWxTZWxlY3QvLi9zcmMvdXRpbGl0aWVzLmpzIiwid2VicGFjazovL09wdGltYWxTZWxlY3QvLi9zcmMvbWF0Y2guanMiLCJ3ZWJwYWNrOi8vT3B0aW1hbFNlbGVjdC8uL3NyYy9vcHRpbWl6ZS5qcyIsIndlYnBhY2s6Ly9PcHRpbWFsU2VsZWN0Ly4vc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9PcHRpbWFsU2VsZWN0Ly4vc3JjL3NlbGVjdC5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29udmVydE5vZGVMaXN0Iiwibm9kZXMiLCJsZW5ndGgiLCJhcnIiLCJBcnJheSIsImVzY2FwZVZhbHVlIiwicmVwbGFjZSIsImRlZmF1bHRJZ25vcmUiLCJhdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOYW1lIiwiaW5kZXhPZiIsIm1hdGNoIiwibm9kZSIsIm9wdGlvbnMiLCJkb2N1bWVudCIsInNraXAiLCJwcmlvcml0eSIsImlnbm9yZSIsImV4Y2x1ZGUiLCJwYXRoIiwiZWxlbWVudCIsInNraXBDb21wYXJlIiwiaXNBcnJheSIsIm1hcCIsImVudHJ5Iiwic2tpcENoZWNrcyIsInNvbWUiLCJjb21wYXJlIiwia2V5cyIsImZvckVhY2giLCJ0eXBlIiwicHJlZGljYXRlIiwidG9TdHJpbmciLCJSZWdFeHAiLCJ0ZXN0IiwiaWdub3JlQXR0cmlidXRlIiwiZGVmYXVsdFByZWRpY2F0ZSIsImNoZWNrQXR0cmlidXRlcyIsImNoZWNrVGFnIiwiY2hlY2tDaGlsZHMiLCJwYXJlbnROb2RlIiwicGF0dGVybiIsImZpbmRQYXR0ZXJuIiwidW5zaGlmdCIsImpvaW4iLCJwYXJlbnQiLCJmaW5kQXR0cmlidXRlc1BhdHRlcm4iLCJtYXRjaGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImF0dHJpYnV0ZXMiLCJzb3J0ZWRLZXlzIiwic29ydCIsImN1cnIiLCJuZXh0IiwiY3VyclBvcyIsIm5leHRQb3MiLCJhdHRyaWJ1dGVWYWx1ZSIsImNoZWNrSWdub3JlIiwiY2xhc3NOYW1lQWZ0ZXJFeGNsdXNpb24iLCJleGNsdWRlQ2xhc3NOYW1lUGFydHMiLCJjbGFzc05hbWUiLCJ0cmltIiwic2hvdWxkRXhjbHVkZSIsInNwbGl0IiwiZmlsdGVyIiwiZmluZFRhZ1BhdHRlcm4iLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInRhZyIsImNoaWxkcmVuIiwiY2hpbGRUYWdzIiwiY2hpbGQiLCJjaGlsZFBhdHRlcm4iLCJjb25zb2xlIiwid2FybiIsImNoZWNrIiwib3B0aW1pemUiLCJzZWxlY3RvciIsImVsZW1lbnRzIiwibm9kZVR5cGUiLCJFcnJvciIsIm9wdGltaXplUGFydCIsInNob3J0ZW5lZCIsInBvcCIsImN1cnJlbnQiLCJwcmVQYXJ0IiwicG9zdFBhcnQiLCJzbGljZSIsImNvbXBhcmVSZXN1bHRzIiwicmVmZXJlbmNlcyIsInJlZmVyZW5jZSIsImNvbnRhaW5zIiwiZGVzY3JpcHRpb24iLCJkZXNjZW5kYW50IiwibmFtZXMiLCJwYXJ0aWFsIiwic2hpZnQiLCJjaGFyQXQiLCJldmVyeSIsImdldENvbW1vbkFuY2VzdG9yIiwiYW5jZXN0b3JzIiwiaW5kZXgiLCJwYXJlbnRzIiwic2hhbGxvd0FuY2VzdG9yIiwiYW5jZXN0b3IiLCJvdGhlclBhcmVudHMiLCJvdGhlclBhcmVudCIsImdldENvbW1vblByb3BlcnRpZXMiLCJjb21tb25Qcm9wZXJ0aWVzIiwiY2xhc3NlcyIsImNvbW1vbkNsYXNzZXMiLCJjb21tb25BdHRyaWJ1dGVzIiwiY29tbW9uVGFnIiwidW5kZWZpbmVkIiwiZ2V0QXR0cmlidXRlIiwiZWxlbWVudEF0dHJpYnV0ZXMiLCJyZWR1Y2UiLCJhdHRyaWJ1dGVzTmFtZXMiLCJjb21tb25BdHRyaWJ1dGVzTmFtZXMiLCJuZXh0Q29tbW9uQXR0cmlidXRlcyIsImdldFNpbmdsZVNlbGVjdG9yIiwib3B0aW1pemVkIiwicXVlcnlTZWxlY3RvciIsImxvZyIsImdldE11bHRpU2VsZWN0b3IiLCJhbmNlc3RvclNlbGVjdG9yIiwiY29tbW9uU2VsZWN0b3JzIiwiZ2V0Q29tbW9uU2VsZWN0b3JzIiwiZGVzY2VuZGFudFNlbGVjdG9yIiwic2VsZWN0b3JNYXRjaGVzIiwic2VsZWN0b3JQYXRoIiwicHVzaCIsImNsYXNzU2VsZWN0b3IiLCJhdHRyaWJ1dGVTZWxlY3RvciIsInBhcnRzIiwiZ2V0UXVlcnlTZWxlY3RvciIsImlucHV0Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLEdBQUlILEdBQ2UsaUJBQVpDLFFBQ2RBLFFBQXVCLGNBQUlELElBRTNCRCxFQUFvQixjQUFJQyxJQVIxQixDQVNHSyxRQUFRLFdBQ1gsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJF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ckNrRCxFQUFxQkYsRUFBZ0IsR0FFckNqRCxFQUFXRCxFQUFTLEdBQUQsT0FBSWlELEVBQUosWUFBd0JHLEdBQXNCbEQsRUFBVWxFLEdBQzNFcUgsRUFBa0JsSSxFQUFnQmMsU0FBU2tDLGlCQUFpQjhCLElBRWxFLE9BQUtDLEVBQVNvQixPQUFNLFNBQUMvRSxHQUFELE9BQWE4RyxFQUFnQnhHLE1BQUssU0FBQ0YsR0FBRCxPQUFXQSxJQUFVSixRQVlwRTBELEVBVkVKLFFBQVFDLEtBQVIsc0lBR0pJLEdBZ0JQLFNBQVNpRCxFQUFvQmpELEdBQVUsTUFFQTZCLEVBQW9CN0IsR0FBakQrQixFQUY2QixFQUU3QkEsUUFBUzdELEVBRm9CLEVBRXBCQSxXQUFZb0IsRUFGUSxFQUVSQSxJQUV2QjhELEVBQWUsR0FNckIsR0FKSTlELEdBQ0Y4RCxFQUFhQyxLQUFLL0QsR0FHaEJ5QyxFQUFTLENBQ1gsSUFBTXVCLEVBQWdCdkIsRUFBUXZGLEtBQUksU0FBQ2hELEdBQUQsaUJBQWNBLE1BQVFxRSxLQUFLLElBQzdEdUYsRUFBYUMsS0FBS0MsR0FHcEIsR0FBSXBGLEVBQVksQ0FDZCxJQUFNcUYsRUFBb0I1SixPQUFPa0QsS0FBS3FCLEdBQVlvRSxRQUFPLFNBQUNrQixFQUFPaEssR0FFL0QsT0FEQWdLLEVBQU1ILEtBQU4sV0FBZTdKLEVBQWYsYUFBd0IwRSxFQUFXMUUsR0FBbkMsT0FDT2dLLElBQ04sSUFBSTNGLEtBQUssSUFDWnVGLEVBQWFDLEtBQUtFLEdBT3BCLE9BSklILEVBQWFqSSxPQUlWLENBQ0xpSSxFQUFhdkYsS0FBSyxLQWFQLFNBQVM0RixFQUFrQkMsR0FBcUIsSUFBZDVILEVBQWMsdURBQUosR0FDekQsT0FBSTRILEVBQU12SSxTQUFXdUksRUFBTWxLLEtBQ2xCc0osRUFBaUJZLEVBQU81SCxHQUUxQjRHLEVBQWtCZ0IsRUFBTzVIIiwiZmlsZSI6Im9wdGltYWwtc2VsZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiT3B0aW1hbFNlbGVjdFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJPcHRpbWFsU2VsZWN0XCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvKipcbiAqICMgVXRpbGl0aWVzXG4gKlxuICogQ29udmVuaWVuY2UgaGVscGVycy5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhbiBhcnJheSB3aXRoIHRoZSBET00gbm9kZXMgb2YgdGhlIGxpc3RcbiAqXG4gKiBAcGFyYW0gIHtOb2RlTGlzdH0gICAgICAgICAgICAgbm9kZXMgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtBcnJheS48SFRNTEVsZW1lbnQ+fSAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0Tm9kZUxpc3QgKG5vZGVzKSB7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBub2Rlc1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkobGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgYXJyW2ldID0gbm9kZXNbaV1cbiAgfVxuICByZXR1cm4gYXJyXG59XG5cbi8qKlxuICogRXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbGluZSBicmVha3MgYXMgYSBzaW1wbGlmaWVkIHZlcnNpb24gb2YgJ0NTUy5lc2NhcGUoKSdcbiAqXG4gKiBEZXNjcmlwdGlvbiBvZiB2YWxpZCBjaGFyYWN0ZXJzOiBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvY3NzLWVzY2FwZXNcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmc/fSB2YWx1ZSAtIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlVmFsdWUgKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5yZXBsYWNlKC9bJ1wiYFxcXFwvOlxcPyYhIyQlXigpW1xcXXt8fSorOywuPD0+QH5dL2csICdcXFxcJCYnKVxuICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxuL2csICdcXEEnKVxufVxuIiwiLyoqXG4gKiAjIE1hdGNoXG4gKlxuICogUmV0cmlldmUgc2VsZWN0b3IgZm9yIGEgbm9kZS5cbiAqL1xuXG5pbXBvcnQgeyBlc2NhcGVWYWx1ZSB9IGZyb20gJy4vdXRpbGl0aWVzJ1xuXG5jb25zdCBkZWZhdWx0SWdub3JlID0ge1xuICBhdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ3N0eWxlJyxcbiAgICAgICdkYXRhLXJlYWN0aWQnLFxuICAgICAgJ2RhdGEtcmVhY3QtY2hlY2tzdW0nXG4gICAgXS5pbmRleE9mKGF0dHJpYnV0ZU5hbWUpID4gLTFcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgcGF0aCBvZiB0aGUgZWxlbWVudFxuICpcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBub2RlICAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgIG9wdGlvbnMgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF0Y2ggKG5vZGUsIG9wdGlvbnMpIHtcblxuICBjb25zdCB7XG4gICAgcm9vdCA9IGRvY3VtZW50LFxuICAgIHNraXAgPSBudWxsLFxuICAgIHByaW9yaXR5ID0gWydpZCcsICdjbGFzcycsICdocmVmJywgJ3NyYyddLFxuICAgIGlnbm9yZSA9IHt9LFxuICAgIGV4Y2x1ZGUgPSB7fSxcbiAgfSA9IG9wdGlvbnNcblxuICBjb25zdCBwYXRoID0gW11cbiAgdmFyIGVsZW1lbnQgPSBub2RlXG4gIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aFxuXG4gIGNvbnN0IHNraXBDb21wYXJlID0gc2tpcCAmJiAoQXJyYXkuaXNBcnJheShza2lwKSA/IHNraXAgOiBbc2tpcF0pLm1hcCgoZW50cnkpID0+IHtcbiAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gKGVsZW1lbnQpID0+IGVsZW1lbnQgPT09IGVudHJ5XG4gICAgfVxuICAgIHJldHVybiBlbnRyeVxuICB9KVxuXG4gIGNvbnN0IHNraXBDaGVja3MgPSAoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiBza2lwICYmIHNraXBDb21wYXJlLnNvbWUoKGNvbXBhcmUpID0+IGNvbXBhcmUoZWxlbWVudCkpXG4gIH1cblxuICBPYmplY3Qua2V5cyhpZ25vcmUpLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICB2YXIgcHJlZGljYXRlID0gaWdub3JlW3R5cGVdXG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgPT09ICdmdW5jdGlvbicpIHJldHVyblxuICAgIGlmICh0eXBlb2YgcHJlZGljYXRlID09PSAnbnVtYmVyJykge1xuICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlLnRvU3RyaW5nKClcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwcmVkaWNhdGUgPSBuZXcgUmVnRXhwKGVzY2FwZVZhbHVlKHByZWRpY2F0ZSkucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKSlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgPT09ICdib29sZWFuJykge1xuICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlID8gLyg/OikvIDogLy5eL1xuICAgIH1cbiAgICAvLyBjaGVjayBjbGFzcy0vYXR0cmlidXRlbmFtZSBmb3IgcmVnZXhcbiAgICBpZ25vcmVbdHlwZV0gPSAobmFtZSwgdmFsdWUpID0+IHByZWRpY2F0ZS50ZXN0KHZhbHVlKVxuICB9KVxuXG4gIHZhciBpZ25vcmVBdHRyaWJ1dGUgPSBpZ25vcmUuYXR0cmlidXRlO1xuICBpZ25vcmUuYXR0cmlidXRlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBkZWZhdWx0UHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGlnbm9yZUF0dHJpYnV0ZSAmJiBpZ25vcmVBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGRlZmF1bHRQcmVkaWNhdGUpO1xuICB9O1xuXG4gIHdoaWxlIChlbGVtZW50ICE9PSByb290KSB7XG4gICAgaWYgKHNraXBDaGVja3MoZWxlbWVudCkgIT09IHRydWUpIHtcbiAgICAgIC8vIH4gZ2xvYmFsXG4gICAgICBpZiAoY2hlY2tBdHRyaWJ1dGVzKHByaW9yaXR5LCBlbGVtZW50LCBpZ25vcmUsIGV4Y2x1ZGUsIHBhdGgsIHJvb3QpKSBicmVha1xuICAgICAgaWYgKGNoZWNrVGFnKGVsZW1lbnQsIGlnbm9yZSwgcGF0aCwgcm9vdCkpIGJyZWFrXG5cbiAgICAgIC8vIH4gbG9jYWxcbiAgICAgIGNoZWNrQXR0cmlidXRlcyhwcmlvcml0eSwgZWxlbWVudCwgaWdub3JlLCBleGNsdWRlLCBwYXRoKVxuICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSBsZW5ndGgpIHtcbiAgICAgICAgY2hlY2tUYWcoZWxlbWVudCwgaWdub3JlLCBwYXRoKVxuICAgICAgfVxuXG4gICAgICAvLyBkZWZpbmUgb25seSBvbmUgcGFydCBlYWNoIGl0ZXJhdGlvblxuICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSBsZW5ndGgpIHtcbiAgICAgICAgY2hlY2tDaGlsZHMocHJpb3JpdHksIGVsZW1lbnQsIGlnbm9yZSwgZXhjbHVkZSwgcGF0aClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlXG4gICAgbGVuZ3RoID0gcGF0aC5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbGVtZW50ID09PSByb290KSB7XG4gICAgY29uc3QgcGF0dGVybiA9IGZpbmRQYXR0ZXJuKHByaW9yaXR5LCBlbGVtZW50LCBpZ25vcmUsIGV4Y2x1ZGUpXG4gICAgcGF0aC51bnNoaWZ0KHBhdHRlcm4pXG4gIH1cblxuICByZXR1cm4gcGF0aC5qb2luKCcgJylcbn1cblxuLyoqXG4gKiBFeHRlbmQgcGF0aCB3aXRoIGF0dHJpYnV0ZSBpZGVudGlmaWVyXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPHN0cmluZz59IHByaW9yaXR5IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICAgIGVsZW1lbnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgIGlnbm9yZSAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgIGV4Y2x1ZGUgIC0gRXhjbHVkZSBmdW5jdGlvbnMgZm9yIHBhcnRzIG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSAge0FycmF5LjxzdHJpbmc+fSBwYXRoICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgICBwYXJlbnQgICAtIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge2Jvb2xlYW59ICAgICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZnVuY3Rpb24gY2hlY2tBdHRyaWJ1dGVzIChwcmlvcml0eSwgZWxlbWVudCwgaWdub3JlLCBleGNsdWRlLCBwYXRoLCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgY29uc3QgcGF0dGVybiA9IGZpbmRBdHRyaWJ1dGVzUGF0dGVybihwcmlvcml0eSwgZWxlbWVudCwgaWdub3JlLCBleGNsdWRlKVxuICBpZiAocGF0dGVybikge1xuICAgIGNvbnN0IG1hdGNoZXMgPSBwYXJlbnQucXVlcnlTZWxlY3RvckFsbChwYXR0ZXJuKVxuICAgIGlmIChtYXRjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcGF0aC51bnNoaWZ0KHBhdHRlcm4pXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBMb29rdXAgYXR0cmlidXRlIGlkZW50aWZpZXJcbiAqXG4gKiBAcGFyYW0gIHtBcnJheS48c3RyaW5nPn0gcHJpb3JpdHkgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gICAgZWxlbWVudCAgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgICAgaWdub3JlICAgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgICAgZXhjbHVkZSAgLSBFeGNsdWRlIGZ1bmN0aW9ucyBmb3IgcGFydHMgb2YgYXR0cmlidXRlc1xuICogQHJldHVybiB7c3RyaW5nP30gICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBmaW5kQXR0cmlidXRlc1BhdHRlcm4gKHByaW9yaXR5LCBlbGVtZW50LCBpZ25vcmUsIGV4Y2x1ZGUpIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGVsZW1lbnQuYXR0cmlidXRlc1xuICBjb25zdCBzb3J0ZWRLZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcykuc29ydCgoY3VyciwgbmV4dCkgPT4ge1xuICAgIGNvbnN0IGN1cnJQb3MgPSBwcmlvcml0eS5pbmRleE9mKGF0dHJpYnV0ZXNbY3Vycl0ubmFtZSlcbiAgICBjb25zdCBuZXh0UG9zID0gcHJpb3JpdHkuaW5kZXhPZihhdHRyaWJ1dGVzW25leHRdLm5hbWUpXG4gICAgaWYgKG5leHRQb3MgPT09IC0xKSB7XG4gICAgICBpZiAoY3VyclBvcyA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gY3VyclBvcyAtIG5leHRQb3NcbiAgfSlcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHNvcnRlZEtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0gc29ydGVkS2V5c1tpXVxuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNba2V5XVxuICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGUubmFtZVxuICAgIGNvbnN0IGF0dHJpYnV0ZVZhbHVlID0gZXNjYXBlVmFsdWUoYXR0cmlidXRlLnZhbHVlKVxuXG4gICAgY29uc3QgY3VycmVudElnbm9yZSA9IGlnbm9yZVthdHRyaWJ1dGVOYW1lXSB8fCBpZ25vcmUuYXR0cmlidXRlXG4gICAgY29uc3QgY3VycmVudERlZmF1bHRJZ25vcmUgPSBkZWZhdWx0SWdub3JlW2F0dHJpYnV0ZU5hbWVdIHx8IGRlZmF1bHRJZ25vcmUuYXR0cmlidXRlXG4gICAgaWYgKGNoZWNrSWdub3JlKGN1cnJlbnRJZ25vcmUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlLCBjdXJyZW50RGVmYXVsdElnbm9yZSkpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIHBhdHRlcm4gPSBgWyR7YXR0cmlidXRlTmFtZX09XCIke2F0dHJpYnV0ZVZhbHVlfVwiXWBcblxuICAgIGlmICgoL1xcYlxcZC8pLnRlc3QoYXR0cmlidXRlVmFsdWUpID09PSBmYWxzZSkge1xuICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT09ICdpZCcpIHtcbiAgICAgICAgcGF0dGVybiA9IGAjJHthdHRyaWJ1dGVWYWx1ZX1gXG4gICAgICB9XG5cbiAgICAgIGlmIChhdHRyaWJ1dGVOYW1lID09PSAnY2xhc3MnKSB7XG4gICAgICAgIGxldCBjbGFzc05hbWVBZnRlckV4Y2x1c2lvbiA9IGV4Y2x1ZGVDbGFzc05hbWVQYXJ0cyhhdHRyaWJ1dGVWYWx1ZSwgZXhjbHVkZS5jbGFzc05hbWUpO1xuICAgICAgICBjbGFzc05hbWVBZnRlckV4Y2x1c2lvbiA9IGNsYXNzTmFtZUFmdGVyRXhjbHVzaW9uLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcuJyk7XG4gICAgICAgIHBhdHRlcm4gPSBjbGFzc05hbWVBZnRlckV4Y2x1c2lvbi5sZW5ndGggPyBgLiR7Y2xhc3NOYW1lQWZ0ZXJFeGNsdXNpb259YCA6IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdHRlcm5cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuLyoqXG4qIFRha2VzIHBhcnRzIHRoYXQgc2hvdWxkIGJlIGV4Y2x1ZGVkIG91dCBvZiB0aGUgY2xhc3NuYW1lIGJhc2VkIG9uIHNob3VsZEV4Y2x1ZGUgY2FsbCByZXN1bHQuXG4qIEEgXCJwYXJ0XCIgaXMgYSBzdWJzdHJpbmcgb2YgdGhlIGNsYXNzIGF0dHJpYnV0ZSB2YWx1ZSBkZWxpbWl0ZWQgYnkgc3BhY2VzLlxuKlxuKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgY2xhc3NOYW1lICAgICAgQSBwYXJ0IG9mIGEgY2xhc3MgYXR0cmlidXRlIHZhbHVlXG4qIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgICBzaG91bGRFeGNsdWRlICBEZWNpZGVzIGlmIG5hbWUgaXMgYWNjZXB0ZWQgb3Igbm90XG4qIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgd2l0aCB1bndhbnRlZCBwYXJ0cyhuYW1lcykgZXhjbHVkZWRcbiovXG5mdW5jdGlvbiBleGNsdWRlQ2xhc3NOYW1lUGFydHMoY2xhc3NOYW1lLCBzaG91bGRFeGNsdWRlKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcblxuICByZXR1cm4gY2xhc3NOYW1lcy5maWx0ZXIobmFtZSA9PiB7XG4gICAgaWYgKCFuYW1lLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuICFzaG91bGRFeGNsdWRlKG5hbWUpO1xuICB9KS5qb2luKCcgJyk7XG59XG5cbi8qKlxuICogRXh0ZW5kIHBhdGggd2l0aCB0YWcgaWRlbnRpZmllclxuICpcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgICBlbGVtZW50IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgIGlnbm9yZSAgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtBcnJheS48c3RyaW5nPn0gcGF0aCAgICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgICBwYXJlbnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIGNoZWNrVGFnIChlbGVtZW50LCBpZ25vcmUsIHBhdGgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICBjb25zdCBwYXR0ZXJuID0gZmluZFRhZ1BhdHRlcm4oZWxlbWVudCwgaWdub3JlKVxuICBpZiAocGF0dGVybikge1xuICAgIGNvbnN0IG1hdGNoZXMgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocGF0dGVybilcbiAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHBhdGgudW5zaGlmdChwYXR0ZXJuKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogTG9va3VwIHRhZyBpZGVudGlmaWVyXG4gKlxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgaWdub3JlICAtIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge2Jvb2xlYW59ICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBmaW5kVGFnUGF0dGVybiAoZWxlbWVudCwgaWdub3JlKSB7XG4gIGNvbnN0IHRhZ05hbWUgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICBpZiAoY2hlY2tJZ25vcmUoaWdub3JlLnRhZywgbnVsbCwgdGFnTmFtZSkpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIHJldHVybiB0YWdOYW1lXG59XG5cbi8qKlxuICogRXh0ZW5kIHBhdGggd2l0aCBzcGVjaWZpYyBjaGlsZCBpZGVudGlmaWVyXG4gKlxuICogTk9URTogJ2NoaWxkVGFncycgaXMgYSBjdXN0b20gcHJvcGVydHkgdG8gdXNlIGFzIGEgdmlldyBmaWx0ZXIgZm9yIHRhZ3MgdXNpbmcgJ2FkYXB0ZXIuanMnXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPHN0cmluZz59IHByaW9yaXR5IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICAgIGVsZW1lbnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgIGlnbm9yZSAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7QXJyYXkuPHN0cmluZz59IHBhdGggICAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBjaGVja0NoaWxkcyAocHJpb3JpdHksIGVsZW1lbnQsIGlnbm9yZSwgZXhjbHVkZSwgcGF0aCkge1xuICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGVcbiAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnQuY2hpbGRUYWdzIHx8IHBhcmVudC5jaGlsZHJlblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV1cbiAgICBpZiAoY2hpbGQgPT09IGVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGNoaWxkUGF0dGVybiA9IGZpbmRQYXR0ZXJuKHByaW9yaXR5LCBjaGlsZCwgaWdub3JlLCBleGNsdWRlKVxuICAgICAgaWYgKCFjaGlsZFBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihgXG4gICAgICAgICAgRWxlbWVudCBjb3VsZG5cXCd0IGJlIG1hdGNoZWQgdGhyb3VnaCBzdHJpY3QgaWdub3JlIHBhdHRlcm4hXG4gICAgICAgIGAsIGNoaWxkLCBpZ25vcmUsIGNoaWxkUGF0dGVybilcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhdHRlcm4gPSBgPiAke2NoaWxkUGF0dGVybn06bnRoLWNoaWxkKCR7aSsxfSlgXG4gICAgICBwYXRoLnVuc2hpZnQocGF0dGVybilcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIExvb2t1cCBpZGVudGlmaWVyXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPHN0cmluZz59IHByaW9yaXR5IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICAgIGVsZW1lbnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgIGlnbm9yZSAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBmaW5kUGF0dGVybiAocHJpb3JpdHksIGVsZW1lbnQsIGlnbm9yZSwgZXhjbHVkZSkge1xuICB2YXIgcGF0dGVybiA9IGZpbmRBdHRyaWJ1dGVzUGF0dGVybihwcmlvcml0eSwgZWxlbWVudCwgaWdub3JlLCBleGNsdWRlKVxuICBpZiAoIXBhdHRlcm4pIHtcbiAgICBwYXR0ZXJuID0gZmluZFRhZ1BhdHRlcm4oZWxlbWVudCwgaWdub3JlKVxuICB9XG4gIHJldHVybiBwYXR0ZXJuXG59XG5cbi8qKlxuICogVmFsaWRhdGUgd2l0aCBjdXN0b20gYW5kIGRlZmF1bHQgZnVuY3Rpb25zXG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb259IHByZWRpY2F0ZSAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtzdHJpbmc/fSAgbmFtZSAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge3N0cmluZ30gICB2YWx1ZSAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7RnVuY3Rpb259IGRlZmF1bHRQcmVkaWNhdGUgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtib29sZWFufSAgICAgICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZnVuY3Rpb24gY2hlY2tJZ25vcmUgKHByZWRpY2F0ZSwgbmFtZSwgdmFsdWUsIGRlZmF1bHRQcmVkaWNhdGUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgY29uc3QgY2hlY2sgPSBwcmVkaWNhdGUgfHwgZGVmYXVsdFByZWRpY2F0ZVxuICBpZiAoIWNoZWNrKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIGNoZWNrKG5hbWUsIHZhbHVlLCBkZWZhdWx0UHJlZGljYXRlKVxufVxuIiwiLyoqXG4gKiAjIE9wdGltaXplXG4gKlxuICogMS4pIEltcHJvdmUgZWZmaWNpZW5jeSB0aHJvdWdoIHNob3J0ZXIgc2VsZWN0b3JzIGJ5IHJlbW92aW5nIHJlZHVuZGFuY3lcbiAqIDIuKSBJbXByb3ZlIHJvYnVzdG5lc3MgdGhyb3VnaCBzZWxlY3RvciB0cmFuc2Zvcm1hdGlvblxuICovXG5cbmltcG9ydCBhZGFwdCBmcm9tICcuL2FkYXB0J1xuaW1wb3J0IHsgY29udmVydE5vZGVMaXN0IH0gZnJvbSAnLi91dGlsaXRpZXMnXG5cbi8qKlxuICogQXBwbHkgZGlmZmVyZW50IG9wdGltaXphdGlvbiB0ZWNobmlxdWVzXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudHxBcnJheS48SFRNTEVsZW1lbnQ+fSBlbGVtZW50ICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9wdGltaXplIChzZWxlY3RvciwgZWxlbWVudHMsIG9wdGlvbnMgPSB7fSkge1xuXG4gIC8vIGNvbnZlcnQgc2luZ2xlIGVudHJ5IGFuZCBOb2RlTGlzdFxuICBpZiAoIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgZWxlbWVudHMgPSAhZWxlbWVudHMubGVuZ3RoID8gW2VsZW1lbnRzXSA6IGNvbnZlcnROb2RlTGlzdChlbGVtZW50cylcbiAgfVxuXG4gIGlmICghZWxlbWVudHMubGVuZ3RoIHx8IGVsZW1lbnRzLnNvbWUoKGVsZW1lbnQpID0+IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGlucHV0IC0gdG8gY29tcGFyZSBIVE1MRWxlbWVudHMgaXRzIG5lY2Vzc2FyeSB0byBwcm92aWRlIGEgcmVmZXJlbmNlIG9mIHRoZSBzZWxlY3RlZCBub2RlKHMpISAobWlzc2luZyBcImVsZW1lbnRzXCIpYClcbiAgfVxuXG4gIGNvbnN0IGdsb2JhbE1vZGlmaWVkID0gYWRhcHQoZWxlbWVudHNbMF0sIG9wdGlvbnMpXG5cbiAgLy8gY2h1bmsgcGFydHMgb3V0c2lkZSBvZiBxdW90ZXMgKGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI1NjYzNzI5KVxuICB2YXIgcGF0aCA9IHNlbGVjdG9yLnJlcGxhY2UoLz4gL2csICc+Jykuc3BsaXQoL1xccysoPz0oPzooPzpbXlwiXSpcIil7Mn0pKlteXCJdKiQpLylcblxuICBpZiAocGF0aC5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIG9wdGltaXplUGFydCgnJywgc2VsZWN0b3IsICcnLCBlbGVtZW50cylcbiAgfVxuXG4gIGNvbnN0IHNob3J0ZW5lZCA9IFtwYXRoLnBvcCgpXVxuICB3aGlsZSAocGF0aC5sZW5ndGggPiAxKSAge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBwYXRoLnBvcCgpXG4gICAgY29uc3QgcHJlUGFydCA9IHBhdGguam9pbignICcpXG4gICAgY29uc3QgcG9zdFBhcnQgPSBzaG9ydGVuZWQuam9pbignICcpXG5cbiAgICBjb25zdCBwYXR0ZXJuID0gYCR7cHJlUGFydH0gJHtwb3N0UGFydH1gXG4gICAgY29uc3QgbWF0Y2hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGF0dGVybilcbiAgICBpZiAobWF0Y2hlcy5sZW5ndGggIT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgc2hvcnRlbmVkLnVuc2hpZnQob3B0aW1pemVQYXJ0KHByZVBhcnQsIGN1cnJlbnQsIHBvc3RQYXJ0LCBlbGVtZW50cykpXG4gICAgfVxuICB9XG4gIHNob3J0ZW5lZC51bnNoaWZ0KHBhdGhbMF0pXG4gIHBhdGggPSBzaG9ydGVuZWRcblxuICAvLyBvcHRpbWl6ZSBzdGFydCArIGVuZFxuICBwYXRoWzBdID0gb3B0aW1pemVQYXJ0KCcnLCBwYXRoWzBdLCBwYXRoLnNsaWNlKDEpLmpvaW4oJyAnKSwgZWxlbWVudHMpXG4gIHBhdGhbcGF0aC5sZW5ndGgtMV0gPSBvcHRpbWl6ZVBhcnQocGF0aC5zbGljZSgwLCAtMSkuam9pbignICcpLCBwYXRoW3BhdGgubGVuZ3RoLTFdLCAnJywgZWxlbWVudHMpXG5cbiAgaWYgKGdsb2JhbE1vZGlmaWVkKSB7XG4gICAgZGVsZXRlIGdsb2JhbC5kb2N1bWVudFxuICB9XG5cbiAgcmV0dXJuIHBhdGguam9pbignICcpLnJlcGxhY2UoLz4vZywgJz4gJykudHJpbSgpXG59XG5cbi8qKlxuICogSW1wcm92ZSBhIGNodW5rIG9mIHRoZSBzZWxlY3RvclxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgIHByZVBhcnQgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICAgY3VycmVudCAgLSBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgICBwb3N0UGFydCAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge0FycmF5LjxIVE1MRWxlbWVudD59IGVsZW1lbnRzIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIG9wdGltaXplUGFydCAocHJlUGFydCwgY3VycmVudCwgcG9zdFBhcnQsIGVsZW1lbnRzKSB7XG4gIGlmIChwcmVQYXJ0Lmxlbmd0aCkgcHJlUGFydCA9IGAke3ByZVBhcnR9IGBcbiAgaWYgKHBvc3RQYXJ0Lmxlbmd0aCkgcG9zdFBhcnQgPSBgICR7cG9zdFBhcnR9YFxuXG4gIC8vIHJvYnVzdG5lc3M6IGF0dHJpYnV0ZSB3aXRob3V0IHZhbHVlIChnZW5lcmFsaXphdGlvbilcbiAgaWYgKC9cXFsqXFxdLy50ZXN0KGN1cnJlbnQpKSB7XG4gICAgY29uc3Qga2V5ID0gY3VycmVudC5yZXBsYWNlKC89LiokLywgJ10nKVxuICAgIHZhciBwYXR0ZXJuID0gYCR7cHJlUGFydH0ke2tleX0ke3Bvc3RQYXJ0fWBcbiAgICB2YXIgbWF0Y2hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGF0dGVybilcbiAgICBpZiAoY29tcGFyZVJlc3VsdHMobWF0Y2hlcywgZWxlbWVudHMpKSB7XG4gICAgICBjdXJyZW50ID0ga2V5XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJvYnVzdG5lc3M6IHJlcGxhY2Ugc3BlY2lmaWMga2V5LXZhbHVlIHdpdGggYmFzZSB0YWcgKGhldXJpc3RpYylcbiAgICAgIGNvbnN0IHJlZmVyZW5jZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAke3ByZVBhcnR9JHtrZXl9YClcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmVmZXJlbmNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gcmVmZXJlbmNlc1tpXVxuICAgICAgICBpZiAoZWxlbWVudHMuc29tZSgoZWxlbWVudCkgPT4gcmVmZXJlbmNlLmNvbnRhaW5zKGVsZW1lbnQpKSkge1xuICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gcmVmZXJlbmNlLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIHZhciBwYXR0ZXJuID0gYCR7cHJlUGFydH0ke2Rlc2NyaXB0aW9ufSR7cG9zdFBhcnR9YFxuICAgICAgICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXR0ZXJuKVxuICAgICAgICAgIGlmIChjb21wYXJlUmVzdWx0cyhtYXRjaGVzLCBlbGVtZW50cykpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBkZXNjcmlwdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gcm9idXN0bmVzczogZGVzY2VuZGFudCBpbnN0ZWFkIGNoaWxkIChoZXVyaXN0aWMpXG4gIGlmICgvPi8udGVzdChjdXJyZW50KSkge1xuICAgIGNvbnN0IGRlc2NlbmRhbnQgPSBjdXJyZW50LnJlcGxhY2UoLz4vLCAnJylcbiAgICB2YXIgcGF0dGVybiA9IGAke3ByZVBhcnR9JHtkZXNjZW5kYW50fSR7cG9zdFBhcnR9YFxuICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXR0ZXJuKVxuICAgIGlmIChjb21wYXJlUmVzdWx0cyhtYXRjaGVzLCBlbGVtZW50cykpIHtcbiAgICAgIGN1cnJlbnQgPSBkZXNjZW5kYW50XG4gICAgfVxuICB9XG5cbiAgLy8gcm9idXN0bmVzczogJ250aC1vZi10eXBlJyBpbnN0ZWFkICdudGgtY2hpbGQnIChoZXVyaXN0aWMpXG4gIGlmICgvOm50aC1jaGlsZC8udGVzdChjdXJyZW50KSkge1xuICAgIC8vIFRPRE86IGNvbnNpZGVyIGNvbXBsZXRlIGNvdmVyYWdlIG9mICdudGgtb2YtdHlwZScgcmVwbGFjZW1lbnRcbiAgICBjb25zdCB0eXBlID0gY3VycmVudC5yZXBsYWNlKC9udGgtY2hpbGQvZywgJ250aC1vZi10eXBlJylcbiAgICB2YXIgcGF0dGVybiA9IGAke3ByZVBhcnR9JHt0eXBlfSR7cG9zdFBhcnR9YFxuICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXR0ZXJuKVxuICAgIGlmIChjb21wYXJlUmVzdWx0cyhtYXRjaGVzLCBlbGVtZW50cykpIHtcbiAgICAgIGN1cnJlbnQgPSB0eXBlXG4gICAgfVxuICB9XG5cbiAgLy8gZWZmaWNpZW5jeTogY29tYmluYXRpb25zIG9mIGNsYXNzbmFtZSAocGFydGlhbCBwZXJtdXRhdGlvbnMpXG4gIGlmICgvXFwuXFxTK1xcLlxcUysvLnRlc3QoY3VycmVudCkpIHtcbiAgICB2YXIgbmFtZXMgPSBjdXJyZW50LnRyaW0oKS5zcGxpdCgnLicpLnNsaWNlKDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKG5hbWUpID0+IGAuJHtuYW1lfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zb3J0KChjdXJyLCBuZXh0KSA9PiBjdXJyLmxlbmd0aCAtIG5leHQubGVuZ3RoKVxuICAgIHdoaWxlIChuYW1lcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHBhcnRpYWwgPSBjdXJyZW50LnJlcGxhY2UobmFtZXMuc2hpZnQoKSwgJycpLnRyaW0oKVxuICAgICAgdmFyIHBhdHRlcm4gPSBgJHtwcmVQYXJ0fSR7cGFydGlhbH0ke3Bvc3RQYXJ0fWAudHJpbSgpXG4gICAgICBpZiAoIXBhdHRlcm4ubGVuZ3RoIHx8IHBhdHRlcm4uY2hhckF0KDApID09PSAnPicgfHwgcGF0dGVybi5jaGFyQXQocGF0dGVybi5sZW5ndGgtMSkgPT09ICc+Jykge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhdHRlcm4pXG4gICAgICBpZiAoY29tcGFyZVJlc3VsdHMobWF0Y2hlcywgZWxlbWVudHMpKSB7XG4gICAgICAgIGN1cnJlbnQgPSBwYXJ0aWFsXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcm9idXN0bmVzczogZGVncmFkZSBjb21wbGV4IGNsYXNzbmFtZSAoaGV1cmlzdGljKVxuICAgIG5hbWVzID0gY3VycmVudCAmJiBjdXJyZW50Lm1hdGNoKC9cXC4vZylcbiAgICBpZiAobmFtZXMgJiYgbmFtZXMubGVuZ3RoID4gMikge1xuICAgICAgY29uc3QgcmVmZXJlbmNlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7cHJlUGFydH0ke2N1cnJlbnR9YClcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmVmZXJlbmNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gcmVmZXJlbmNlc1tpXVxuICAgICAgICBpZiAoZWxlbWVudHMuc29tZSgoZWxlbWVudCkgPT4gcmVmZXJlbmNlLmNvbnRhaW5zKGVsZW1lbnQpICkpIHtcbiAgICAgICAgICAvLyBUT0RPOlxuICAgICAgICAgIC8vIC0gY2hlY2sgdXNpbmcgYXR0cmlidXRlcyArIHJlZ2FyZCBleGNsdWRlc1xuICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gcmVmZXJlbmNlLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIHZhciBwYXR0ZXJuID0gYCR7cHJlUGFydH0ke2Rlc2NyaXB0aW9ufSR7cG9zdFBhcnR9YFxuICAgICAgICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXR0ZXJuKVxuICAgICAgICAgIGlmIChjb21wYXJlUmVzdWx0cyhtYXRjaGVzLCBlbGVtZW50cykpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBkZXNjcmlwdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGN1cnJlbnRcbn1cblxuLyoqXG4gKiBFdmFsdWF0ZSBtYXRjaGVzIHdpdGggZXhwZWN0ZWQgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0gIHtBcnJheS48SFRNTEVsZW1lbnQ+fSBtYXRjaGVzICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge0FycmF5LjxIVE1MRWxlbWVudD59IGVsZW1lbnRzIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVSZXN1bHRzIChtYXRjaGVzLCBlbGVtZW50cykge1xuICBjb25zdCB7IGxlbmd0aCB9ID0gbWF0Y2hlc1xuICByZXR1cm4gbGVuZ3RoID09PSBlbGVtZW50cy5sZW5ndGggJiYgZWxlbWVudHMuZXZlcnkoKGVsZW1lbnQpID0+IHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobWF0Y2hlc1tpXSA9PT0gZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfSlcbn1cbiIsIi8qKlxuICogIyBDb21tb25cbiAqXG4gKiBQcm9jZXNzIGNvbGxlY3Rpb25zIGZvciBzaW1pbGFyaXRpZXMuXG4gKi9cblxuLyoqXG4gKiBGaW5kIHRoZSBsYXN0IGNvbW1vbiBhbmNlc3RvciBvZiBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSAge0FycmF5LjxIVE1MRWxlbWVudHM+fSBlbGVtZW50cyAtIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbW1vbkFuY2VzdG9yIChlbGVtZW50cywgb3B0aW9ucyA9IHt9KSB7XG5cbiAgY29uc3Qge1xuICAgIHJvb3QgPSBkb2N1bWVudFxuICB9ID0gb3B0aW9uc1xuXG4gIGNvbnN0IGFuY2VzdG9ycyA9IFtdXG5cbiAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBwYXJlbnRzID0gW11cbiAgICB3aGlsZSAoZWxlbWVudCAhPT0gcm9vdCkge1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZVxuICAgICAgcGFyZW50cy51bnNoaWZ0KGVsZW1lbnQpXG4gICAgfVxuICAgIGFuY2VzdG9yc1tpbmRleF0gPSBwYXJlbnRzXG4gIH0pXG5cbiAgYW5jZXN0b3JzLnNvcnQoKGN1cnIsIG5leHQpID0+IGN1cnIubGVuZ3RoIC0gbmV4dC5sZW5ndGgpXG5cbiAgY29uc3Qgc2hhbGxvd0FuY2VzdG9yID0gYW5jZXN0b3JzLnNoaWZ0KClcblxuICB2YXIgYW5jZXN0b3IgPSBudWxsXG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzaGFsbG93QW5jZXN0b3IubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3QgcGFyZW50ID0gc2hhbGxvd0FuY2VzdG9yW2ldXG4gICAgY29uc3QgbWlzc2luZyA9IGFuY2VzdG9ycy5zb21lKChvdGhlclBhcmVudHMpID0+IHtcbiAgICAgIHJldHVybiAhb3RoZXJQYXJlbnRzLnNvbWUoKG90aGVyUGFyZW50KSA9PiBvdGhlclBhcmVudCA9PT0gcGFyZW50KVxuICAgIH0pXG5cbiAgICBpZiAobWlzc2luZykge1xuICAgICAgLy8gVE9ETzogZmluZCBzaW1pbGFyIHN1Yi1wYXJlbnRzLCBub3QgdGhlIHRvcCByb290LCBlLmcuIHNoYXJpbmcgYSBjbGFzcyBzZWxlY3RvclxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBhbmNlc3RvciA9IHBhcmVudFxuICB9XG5cbiAgcmV0dXJuIGFuY2VzdG9yXG59XG5cbi8qKlxuICogR2V0IGEgc2V0IG9mIGNvbW1vbiBwcm9wZXJ0aWVzIG9mIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPEhUTUxFbGVtZW50Pn0gZWxlbWVudHMgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbW1vblByb3BlcnRpZXMgKGVsZW1lbnRzKSB7XG5cbiAgY29uc3QgY29tbW9uUHJvcGVydGllcyA9IHtcbiAgICBjbGFzc2VzOiBbXSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICB0YWc6IG51bGxcbiAgfVxuXG4gIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcblxuICAgIHZhciB7XG4gICAgICBjbGFzc2VzOiBjb21tb25DbGFzc2VzLFxuICAgICAgYXR0cmlidXRlczogY29tbW9uQXR0cmlidXRlcyxcbiAgICAgIHRhZzogY29tbW9uVGFnXG4gICAgfSA9IGNvbW1vblByb3BlcnRpZXNcblxuICAgIC8vIH4gY2xhc3Nlc1xuICAgIGlmIChjb21tb25DbGFzc2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBjbGFzc2VzID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJylcbiAgICAgIGlmIChjbGFzc2VzKSB7XG4gICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLnRyaW0oKS5zcGxpdCgnICcpXG4gICAgICAgIGlmICghY29tbW9uQ2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgICBjb21tb25Qcm9wZXJ0aWVzLmNsYXNzZXMgPSBjbGFzc2VzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tbW9uQ2xhc3NlcyA9IGNvbW1vbkNsYXNzZXMuZmlsdGVyKChlbnRyeSkgPT4gY2xhc3Nlcy5zb21lKChuYW1lKSA9PiBuYW1lID09PSBlbnRyeSkpXG4gICAgICAgICAgaWYgKGNvbW1vbkNsYXNzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb21tb25Qcm9wZXJ0aWVzLmNsYXNzZXMgPSBjb21tb25DbGFzc2VzXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb21tb25Qcm9wZXJ0aWVzLmNsYXNzZXNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IHJlc3RydWN0dXJlIHJlbW92YWwgYXMgMnggc2V0IC8gMnggZGVsZXRlLCBpbnN0ZWFkIG9mIG1vZGlmeSBhbHdheXMgcmVwbGFjaW5nIHdpdGggbmV3IGNvbGxlY3Rpb25cbiAgICAgICAgZGVsZXRlIGNvbW1vblByb3BlcnRpZXMuY2xhc3Nlc1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIH4gYXR0cmlidXRlc1xuICAgIGlmIChjb21tb25BdHRyaWJ1dGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnRBdHRyaWJ1dGVzID0gZWxlbWVudC5hdHRyaWJ1dGVzXG4gICAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoZWxlbWVudEF0dHJpYnV0ZXMpLnJlZHVjZSgoYXR0cmlidXRlcywga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGVsZW1lbnRBdHRyaWJ1dGVzW2tleV1cbiAgICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZS5uYW1lXG4gICAgICAgIC8vIE5PVEU6IHdvcmthcm91bmQgZGV0ZWN0aW9uIGZvciBub24tc3RhbmRhcmQgcGhhbnRvbWpzIE5hbWVkTm9kZU1hcCBiZWhhdmlvdXJcbiAgICAgICAgLy8gKGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vYXJpeWEvcGhhbnRvbWpzL2lzc3Vlcy8xNDYzNClcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGVOYW1lICE9PSAnY2xhc3MnKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzXG4gICAgICB9LCB7fSlcblxuICAgICAgY29uc3QgYXR0cmlidXRlc05hbWVzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcylcbiAgICAgIGNvbnN0IGNvbW1vbkF0dHJpYnV0ZXNOYW1lcyA9IE9iamVjdC5rZXlzKGNvbW1vbkF0dHJpYnV0ZXMpXG5cbiAgICAgIGlmIChhdHRyaWJ1dGVzTmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICghY29tbW9uQXR0cmlidXRlc05hbWVzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbW1vblByb3BlcnRpZXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21tb25BdHRyaWJ1dGVzID0gY29tbW9uQXR0cmlidXRlc05hbWVzLnJlZHVjZSgobmV4dENvbW1vbkF0dHJpYnV0ZXMsIG5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29tbW9uQXR0cmlidXRlc1tuYW1lXVxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBhdHRyaWJ1dGVzW25hbWVdKSB7XG4gICAgICAgICAgICAgIG5leHRDb21tb25BdHRyaWJ1dGVzW25hbWVdID0gdmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0Q29tbW9uQXR0cmlidXRlc1xuICAgICAgICAgIH0sIHt9KVxuICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhjb21tb25BdHRyaWJ1dGVzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbW1vblByb3BlcnRpZXMuYXR0cmlidXRlcyA9IGNvbW1vbkF0dHJpYnV0ZXNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGNvbW1vblByb3BlcnRpZXMuYXR0cmlidXRlc1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIGNvbW1vblByb3BlcnRpZXMuYXR0cmlidXRlc1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIH4gdGFnXG4gICAgaWYgKGNvbW1vblRhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCB0YWcgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgaWYgKCFjb21tb25UYWcpIHtcbiAgICAgICAgY29tbW9uUHJvcGVydGllcy50YWcgPSB0YWdcbiAgICAgIH0gZWxzZSBpZiAodGFnICE9PSBjb21tb25UYWcpIHtcbiAgICAgICAgZGVsZXRlIGNvbW1vblByb3BlcnRpZXMudGFnXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBjb21tb25Qcm9wZXJ0aWVzXG59XG4iLCIvKipcbiAqICMgU2VsZWN0XG4gKlxuICogQ29uc3RydWN0IGEgdW5pcXVlIENTUyBxdWVyeSBzZWxlY3RvciB0byBhY2Nlc3MgdGhlIHNlbGVjdGVkIERPTSBlbGVtZW50KHMpLlxuICogRm9yIGxvbmdldml0eSBpdCBhcHBsaWVzIGRpZmZlcmVudCBtYXRjaGluZyBhbmQgb3B0aW1pemF0aW9uIHN0cmF0ZWdpZXMuXG4gKi9cblxuaW1wb3J0IGFkYXB0IGZyb20gJy4vYWRhcHQnXG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9tYXRjaCdcbmltcG9ydCBvcHRpbWl6ZSBmcm9tICcuL29wdGltaXplJ1xuaW1wb3J0IHsgY29udmVydE5vZGVMaXN0IH0gZnJvbSAnLi91dGlsaXRpZXMnXG5pbXBvcnQgeyBnZXRDb21tb25BbmNlc3RvciwgZ2V0Q29tbW9uUHJvcGVydGllcyB9IGZyb20gJy4vY29tbW9uJ1xuXG4vKipcbiAqIEdldCBhIHNlbGVjdG9yIGZvciB0aGUgcHJvdmlkZWQgZWxlbWVudFxuICpcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgIG9wdGlvbnMgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgICAtIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNpbmdsZVNlbGVjdG9yIChlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgLy8gMyByZWZlcnMgdG8gLSBOb2RlLlRFWFRfTk9ERSB0eXBlXG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSAzKSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZVxuICB9XG5cbiAgLy8gMSByZWZlcnMgdG8gLSBOb2RlLkVMRU1FTlRfTk9ERSB0eXBlXG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGlucHV0IC0gb25seSBIVE1MRWxlbWVudHMgb3IgcmVwcmVzZW50YXRpb25zIG9mIHRoZW0gYXJlIHN1cHBvcnRlZCEgKG5vdCBcIiR7dHlwZW9mIGVsZW1lbnR9XCIpYClcbiAgfVxuXG4gIGNvbnN0IGdsb2JhbE1vZGlmaWVkID0gYWRhcHQoZWxlbWVudCwgb3B0aW9ucylcblxuICBjb25zdCBzZWxlY3RvciA9IG1hdGNoKGVsZW1lbnQsIG9wdGlvbnMpXG4gIGNvbnN0IG9wdGltaXplZCA9IG9wdGltaXplKHNlbGVjdG9yLCBlbGVtZW50LCBvcHRpb25zKVxuXG4gIC8vIGRlYnVnXG4gIC8vIGNvbnNvbGUubG9nKGBcbiAgLy8gICBzZWxlY3RvcjogICR7c2VsZWN0b3J9XG4gIC8vICAgb3B0aW1pemVkOiAke29wdGltaXplZH1cbiAgLy8gYClcbiAgbGV0IHNlbGVjdG9yVGFyZ2V0O1xuICBsZXQgb3B0aW1pemVkU2VsZWN0b3JUYXJnZXQ7XG5cbiAgaWYgKGdsb2JhbC5kb2N1bWVudCA9PT0gdHJ1ZSkge1xuICAgIHNlbGVjdG9yVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgb3B0aW1pemVkU2VsZWN0b3JUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGltaXplZCk7XG4gIH0gZWxzZSB7XG4gICAgc2VsZWN0b3JUYXJnZXQgPSBnbG9iYWwuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgb3B0aW1pemVkU2VsZWN0b3JUYXJnZXQgPSBnbG9iYWwuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpbWl6ZWQpO1xuICB9XG5cbiAgaWYgKGdsb2JhbE1vZGlmaWVkKSB7XG4gICAgZGVsZXRlIGdsb2JhbC5kb2N1bWVudFxuICB9XG5cbiAgaWYgKHNlbGVjdG9yVGFyZ2V0ICE9IG9wdGltaXplZFNlbGVjdG9yVGFyZ2V0KSB7XG4gICAgY29uc29sZS5sb2coJ0Vycm9yIGF0IHNlbGVjdG9yIG9wdGltaXphdGlvbi4gUmV0dXJuaW5nIHRoZSByYXcgc2VsZWN0b3IuJyk7XG5cbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cblxuICByZXR1cm4gb3B0aW1pemVkO1xufVxuXG4vKipcbiAqIEdldCBhIHNlbGVjdG9yIHRvIG1hdGNoIG11bHRpcGxlIGRlc2NlbmRhbnRzIGZyb20gYW4gYW5jZXN0b3JcbiAqXG4gKiBAcGFyYW0gIHtBcnJheS48SFRNTEVsZW1lbnQ+fE5vZGVMaXN0fSBlbGVtZW50cyAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBbZGVzY3JpcHRpb25dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNdWx0aVNlbGVjdG9yIChlbGVtZW50cywgb3B0aW9ucyA9IHt9KSB7XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGVsZW1lbnRzKSkge1xuICAgIGVsZW1lbnRzID0gY29udmVydE5vZGVMaXN0KGVsZW1lbnRzKVxuICB9XG5cbiAgaWYgKGVsZW1lbnRzLnNvbWUoKGVsZW1lbnQpID0+IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGlucHV0IC0gb25seSBhbiBBcnJheSBvZiBIVE1MRWxlbWVudHMgb3IgcmVwcmVzZW50YXRpb25zIG9mIHRoZW0gaXMgc3VwcG9ydGVkIWApXG4gIH1cblxuICBjb25zdCBnbG9iYWxNb2RpZmllZCA9IGFkYXB0KGVsZW1lbnRzWzBdLCBvcHRpb25zKVxuXG4gIGNvbnN0IGFuY2VzdG9yID0gZ2V0Q29tbW9uQW5jZXN0b3IoZWxlbWVudHMsIG9wdGlvbnMpXG4gIGNvbnN0IGFuY2VzdG9yU2VsZWN0b3IgPSBnZXRTaW5nbGVTZWxlY3RvcihhbmNlc3Rvciwgb3B0aW9ucylcblxuICAvLyBUT0RPOiBjb25zaWRlciB1c2FnZSBvZiBtdWx0aXBsZSBzZWxlY3RvcnMgKyBwYXJlbnQtY2hpbGQgcmVsYXRpb24gKyBjaGVjayBmb3IgcGFydCByZWR1bmRhbmN5XG4gIGNvbnN0IGNvbW1vblNlbGVjdG9ycyA9IGdldENvbW1vblNlbGVjdG9ycyhlbGVtZW50cylcbiAgY29uc3QgZGVzY2VuZGFudFNlbGVjdG9yID0gY29tbW9uU2VsZWN0b3JzWzBdXG5cbiAgY29uc3Qgc2VsZWN0b3IgPSBvcHRpbWl6ZShgJHthbmNlc3RvclNlbGVjdG9yfSAke2Rlc2NlbmRhbnRTZWxlY3Rvcn1gLCBlbGVtZW50cywgb3B0aW9ucylcbiAgY29uc3Qgc2VsZWN0b3JNYXRjaGVzID0gY29udmVydE5vZGVMaXN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKVxuXG4gIGlmICghZWxlbWVudHMuZXZlcnkoKGVsZW1lbnQpID0+IHNlbGVjdG9yTWF0Y2hlcy5zb21lKChlbnRyeSkgPT4gZW50cnkgPT09IGVsZW1lbnQpICkpIHtcbiAgICAvLyBUT0RPOiBjbHVzdGVyIG1hdGNoZXMgdG8gc3BsaXQgaW50byBzaW1pbGFyIGdyb3VwcyBmb3Igc3ViIHNlbGVjdGlvbnNcbiAgICByZXR1cm4gY29uc29sZS53YXJuKGBcbiAgICAgIFRoZSBzZWxlY3RlZCBlbGVtZW50cyBjYW5cXCd0IGJlIGVmZmljaWVudGx5IG1hcHBlZC5cbiAgICAgIEl0cyBwcm9iYWJseSBiZXN0IHRvIHVzZSBtdWx0aXBsZSBzaW5nbGUgc2VsZWN0b3JzIGluc3RlYWQhXG4gICAgYCwgZWxlbWVudHMpXG4gIH1cblxuICBpZiAoZ2xvYmFsTW9kaWZpZWQpIHtcbiAgICBkZWxldGUgZ2xvYmFsLmRvY3VtZW50XG4gIH1cblxuICByZXR1cm4gc2VsZWN0b3Jcbn1cblxuLyoqXG4gKiBHZXQgc2VsZWN0b3JzIHRvIGRlc2NyaWJlIGEgc2V0IG9mIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtICB7QXJyYXkuPEhUTUxFbGVtZW50cz59IGVsZW1lbnRzIC0gW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5mdW5jdGlvbiBnZXRDb21tb25TZWxlY3RvcnMgKGVsZW1lbnRzKSB7XG5cbiAgY29uc3QgeyBjbGFzc2VzLCBhdHRyaWJ1dGVzLCB0YWcgfSA9IGdldENvbW1vblByb3BlcnRpZXMoZWxlbWVudHMpXG5cbiAgY29uc3Qgc2VsZWN0b3JQYXRoID0gW11cblxuICBpZiAodGFnKSB7XG4gICAgc2VsZWN0b3JQYXRoLnB1c2godGFnKVxuICB9XG5cbiAgaWYgKGNsYXNzZXMpIHtcbiAgICBjb25zdCBjbGFzc1NlbGVjdG9yID0gY2xhc3Nlcy5tYXAoKG5hbWUpID0+IGAuJHtuYW1lfWApLmpvaW4oJycpXG4gICAgc2VsZWN0b3JQYXRoLnB1c2goY2xhc3NTZWxlY3RvcilcbiAgfVxuXG4gIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgY29uc3QgYXR0cmlidXRlU2VsZWN0b3IgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoKHBhcnRzLCBuYW1lKSA9PiB7XG4gICAgICBwYXJ0cy5wdXNoKGBbJHtuYW1lfT1cIiR7YXR0cmlidXRlc1tuYW1lXX1cIl1gKVxuICAgICAgcmV0dXJuIHBhcnRzXG4gICAgfSwgW10pLmpvaW4oJycpXG4gICAgc2VsZWN0b3JQYXRoLnB1c2goYXR0cmlidXRlU2VsZWN0b3IpXG4gIH1cblxuICBpZiAoc2VsZWN0b3JQYXRoLmxlbmd0aCkge1xuICAgIC8vIFRPRE86IGNoZWNrIGZvciBwYXJlbnQtY2hpbGQgcmVsYXRpb25cbiAgfVxuXG4gIHJldHVybiBbXG4gICAgc2VsZWN0b3JQYXRoLmpvaW4oJycpXG4gIF1cbn1cblxuLyoqXG4gKiBDaG9vc2UgYWN0aW9uIGRlcGVuZGluZyBvbiB0aGUgaW5wdXQgKG11bHRpcGxlL3NpbmdsZSlcbiAqXG4gKiBOT1RFOiBleHRlbmRlZCBkZXRlY3Rpb24gaXMgdXNlZCBmb3Igc3BlY2lhbCBjYXNlcyBsaWtlIHRoZSA8c2VsZWN0PiBlbGVtZW50IHdpdGggPG9wdGlvbnM+XG4gKlxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR8Tm9kZUxpc3R8QXJyYXkuPEhUTUxFbGVtZW50Pn0gaW5wdXQgICAtIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgLSBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gW2Rlc2NyaXB0aW9uXVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRRdWVyeVNlbGVjdG9yIChpbnB1dCwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmIChpbnB1dC5sZW5ndGggJiYgIWlucHV0Lm5hbWUpIHtcbiAgICByZXR1cm4gZ2V0TXVsdGlTZWxlY3RvcihpbnB1dCwgb3B0aW9ucylcbiAgfVxuICByZXR1cm4gZ2V0U2luZ2xlU2VsZWN0b3IoaW5wdXQsIG9wdGlvbnMpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9