!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.OptimalSelect=e():t.OptimalSelect=e()}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"select",(function(){return w})),n.d(e,"getSingleSelector",(function(){return A})),n.d(e,"getMultiSelector",(function(){return k})),n.d(e,"optimize",(function(){return h})),n.d(e,"common",(function(){return r})),n.d(e,"default",(function(){return w}));var r={};function o(t){for(var e=t.length,n=new Array(e),r=0;r<e;r++)n[r]=t[r];return n}function c(t){return t&&t.replace(/['"`\\/:\?&!#$%^()[\]{|}*+;,.<=>@~]/g,"\\$&").replace(/\n/g,"A")}n.r(r),n.d(r,"getCommonAncestor",(function(){return b})),n.d(r,"getCommonProperties",(function(){return S}));var u={attribute:function(t){return["style","data-reactid","data-react-checksum"].indexOf(t)>-1}};function i(t,e){var n=e.root,r=void 0===n?document:n,o=e.skip,u=void 0===o?null:o,i=e.priority,l=void 0===i?["id","class","href","src"]:i,f=e.ignore,d=void 0===f?{}:f,v=e.exclude,h=void 0===v?{}:v,m=[],y=t,b=m.length,S=u&&(Array.isArray(u)?u:[u]).map((function(t){return"function"!=typeof t?function(e){return e===t}:t})),j=function(t){return u&&S.some((function(e){return e(t)}))};Object.keys(d).forEach((function(t){var e=d[t];"function"!=typeof e&&("number"==typeof e&&(e=e.toString()),"string"==typeof e&&(e=new RegExp(c(e).replace(/\\/g,"\\\\"))),"boolean"==typeof e&&(e=e?/(?:)/:/.^/),d[t]=function(t,n){return e.test(n)})}));var A=d.attribute;for(d.attribute=function(t,e,n){return A&&A(t,e,n)};y!==r;){if(!0!==j(y)){if(a(l,y,d,h,m,r))break;if(s(y,d,m,r))break;a(l,y,d,h,m),m.length===b&&s(y,d,m),m.length===b&&p(l,y,d,m)}y=y.parentNode,b=m.length}if(y===r){var k=g(l,y,d);m.unshift(k)}return m.join(" ")}function a(t,e,n,r,o){var c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e.parentNode,u=l(t,e,n,r);if(u){var i=c.querySelectorAll(u);if(1===i.length)return o.unshift(u),!0}return!1}function l(t,e,n,r){for(var o=e.attributes,i=Object.keys(o).sort((function(e,n){var r=t.indexOf(o[e].name),c=t.indexOf(o[n].name);return-1===c?-1===r?0:-1:r-c})),a=0,l=i.length;a<l;a++){var s=i[a],d=o[s],p=d.name,g=c(d.value);if(!v(n[p]||n.attribute,p,g,u[p]||u.attribute)){var h="[".concat(p,'="').concat(g,'"]');if(!1===/\b\d/.test(g)&&("id"===p&&(h="#".concat(g)),"class"===p)){console.log("exclude?",g.split(" ").map((function(t){return{ex:r.className(t),c:t}})));var m=f(g,r.className);h=(m=m.trim().replace(/\s+/g,".")).length?".".concat(m):null,console.log("after exclusion",h)}return h}}return null}function f(t,e){return t.split(" ").filter((function(t){return!t.length||!e(t)})).join(" ")}function s(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.parentNode,o=d(t,e);if(o){var c=r.getElementsByTagName(o);if(1===c.length)return n.unshift(o),!0}return!1}function d(t,e){var n=t.tagName.toLowerCase();return v(e.tag,null,n)?null:n}function p(t,e,n,r){for(var o=e.parentNode,c=o.childTags||o.children,u=0,i=c.length;u<i;u++){var a=c[u];if(a===e){var l=g(t,a,n);if(!l)return console.warn("\n          Element couldn't be matched through strict ignore pattern!\n        ",a,n,l);var f="> ".concat(l,":nth-child(").concat(u+1,")");return r.unshift(f),!0}}return!1}function g(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=l(t,e,n,r);return o||(o=d(e,n)),o}function v(t,e,n,r){if(!n)return!0;var o=t||r;return!!o&&o(e,n,r)}function h(t,e){if(Array.isArray(e)||(e=e.length?o(e):[e]),!e.length||e.some((function(t){return 1!==t.nodeType})))throw new Error('Invalid input - to compare HTMLElements its necessary to provide a reference of the selected node(s)! (missing "elements")');e[0];var n=t.replace(/> /g,">").split(/\s+(?=(?:(?:[^"]*"){2})*[^"]*$)/);if(n.length<2)return m("",t,"",e);for(var r=[n.pop()];n.length>1;){var c=n.pop(),u=n.join(" "),i=r.join(" "),a="".concat(u," ").concat(i),l=document.querySelectorAll(a);l.length!==e.length&&r.unshift(m(u,c,i,e))}return r.unshift(n[0]),(n=r)[0]=m("",n[0],n.slice(1).join(" "),e),n[n.length-1]=m(n.slice(0,-1).join(" "),n[n.length-1],"",e),n.join(" ").replace(/>/g,"> ").trim()}function m(t,e,n,r){if(t.length&&(t="".concat(t," ")),n.length&&(n=" ".concat(n)),/\[*\]/.test(e)){var o=e.replace(/=.*$/,"]"),c="".concat(t).concat(o).concat(n);if(y(document.querySelectorAll(c),r))e=o;else for(var u=document.querySelectorAll("".concat(t).concat(o)),i=function(){var o=u[a];if(r.some((function(t){return o.contains(t)}))){var i=o.tagName.toLowerCase();return c="".concat(t).concat(i).concat(n),y(document.querySelectorAll(c),r)&&(e=i),"break"}},a=0,l=u.length;a<l;a++){if("break"===i())break}}if(/>/.test(e)){var f=e.replace(/>/,"");c="".concat(t).concat(f).concat(n);y(document.querySelectorAll(c),r)&&(e=f)}if(/:nth-child/.test(e)){var s=e.replace(/nth-child/g,"nth-of-type");c="".concat(t).concat(s).concat(n);y(document.querySelectorAll(c),r)&&(e=s)}if(/\.\S+\.\S+/.test(e)){for(var d=e.trim().split(".").slice(1).map((function(t){return".".concat(t)})).sort((function(t,e){return t.length-e.length}));d.length;){var p=e.replace(d.shift(),"").trim();if(!(c="".concat(t).concat(p).concat(n).trim()).length||">"===c.charAt(0)||">"===c.charAt(c.length-1))break;y(document.querySelectorAll(c),r)&&(e=p)}if((d=e&&e.match(/\./g))&&d.length>2){var g=document.querySelectorAll("".concat(t).concat(e)),v=function(){var o=g[a];if(r.some((function(t){return o.contains(t)}))){var u=o.tagName.toLowerCase();return c="".concat(t).concat(u).concat(n),y(document.querySelectorAll(c),r)&&(e=u),"break"}};for(a=0,l=g.length;a<l;a++){if("break"===v())break}}}return e}function y(t,e){var n=t.length;return n===e.length&&e.every((function(e){for(var r=0;r<n;r++)if(t[r]===e)return!0;return!1}))}function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.root,r=void 0===n?document:n,o=[];t.forEach((function(t,e){for(var n=[];t!==r;)t=t.parentNode,n.unshift(t);o[e]=n})),o.sort((function(t,e){return t.length-e.length}));for(var c=o.shift(),u=null,i=function(){var t=c[a];if(o.some((function(e){return!e.some((function(e){return e===t}))})))return"break";u=t},a=0,l=c.length;a<l;a++){var f=i();if("break"===f)break}return u}function S(t){var e={classes:[],attributes:{},tag:null};return t.forEach((function(t){var n=e.classes,r=e.attributes,o=e.tag;if(void 0!==n){var c=t.getAttribute("class");c?(c=c.trim().split(" "),n.length?(n=n.filter((function(t){return c.some((function(e){return e===t}))}))).length?e.classes=n:delete e.classes:e.classes=c):delete e.classes}if(void 0!==r){var u=t.attributes,i=Object.keys(u).reduce((function(t,e){var n=u[e],r=n.name;return n&&"class"!==r&&(t[r]=n.value),t}),{}),a=Object.keys(i),l=Object.keys(r);a.length?l.length?(r=l.reduce((function(t,e){var n=r[e];return n===i[e]&&(t[e]=n),t}),{}),Object.keys(r).length?e.attributes=r:delete e.attributes):e.attributes=i:delete e.attributes}if(void 0!==o){var f=t.tagName.toLowerCase();o?f!==o&&delete e.tag:e.tag=f}})),e}function j(t){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function A(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(3===t.nodeType&&(t=t.parentNode),1!==t.nodeType)throw new Error('Invalid input - only HTMLElements or representations of them are supported! (not "'.concat(j(t),'")'));var n=i(t,e),r=h(n,t,e);return document.querySelector(n)!=document.querySelector(r)?(console.log("Error at selector optimization. Returning the raw selector."),n):r}function k(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(Array.isArray(t)||(t=o(t)),t.some((function(t){return 1!==t.nodeType})))throw new Error("Invalid input - only an Array of HTMLElements or representations of them is supported!");t[0];var n=b(t,e),r=A(n,e),c=O(t),u=c[0],i=h("".concat(r," ").concat(u),t,e),a=o(document.querySelectorAll(i));return t.every((function(t){return a.some((function(e){return e===t}))}))?i:console.warn("\n      The selected elements can't be efficiently mapped.\n      Its probably best to use multiple single selectors instead!\n    ",t)}function O(t){var e=S(t),n=e.classes,r=e.attributes,o=e.tag,c=[];if(o&&c.push(o),n){var u=n.map((function(t){return".".concat(t)})).join("");c.push(u)}if(r){var i=Object.keys(r).reduce((function(t,e){return t.push("[".concat(e,'="').concat(r[e],'"]')),t}),[]).join("");c.push(i)}return c.length,[c.join("")]}function w(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.length&&!t.name?k(t,e):A(t,e)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,