!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.OptimalSelect=t():e.OptimalSelect=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"select",(function(){return w})),n.d(t,"getSingleSelector",(function(){return j})),n.d(t,"getMultiSelector",(function(){return A})),n.d(t,"optimize",(function(){return g})),n.d(t,"common",(function(){return r})),n.d(t,"default",(function(){return w}));var r={};function o(e){for(var t=e.length,n=new Array(t),r=0;r<t;r++)n[r]=e[r];return n}function c(e){return e&&e.replace(/['"`\\/:\?&!#$%^()[\]{|}*+;,.<=>@~]/g,"\\$&").replace(/\n/g,"A")}n.r(r),n.d(r,"getCommonAncestor",(function(){return y})),n.d(r,"getCommonProperties",(function(){return b}));var a={attribute:function(e){return["style","data-reactid","data-react-checksum"].indexOf(e)>-1}};function u(e,t){var n=t.root,r=void 0===n?document:n,o=t.skip,a=void 0===o?null:o,u=t.priority,l=void 0===u?["id","class","href","src"]:u,s=t.ignore,v=void 0===s?{}:s,g=t.exclude,m=void 0===g?{}:g;console.log("match op",t,m.className&&m.className("jss251 markdown-body"));var h=[],y=e,b=h.length,S=a&&(Array.isArray(a)?a:[a]).map((function(e){return"function"!=typeof e?function(t){return t===e}:e})),j=function(e){return a&&S.some((function(t){return t(e)}))};Object.keys(v).forEach((function(e){var t=v[e];"function"!=typeof t&&("number"==typeof t&&(t=t.toString()),"string"==typeof t&&(t=new RegExp(c(t).replace(/\\/g,"\\\\"))),"boolean"==typeof t&&(t=t?/(?:)/:/.^/),v[e]=function(e,n){return t.test(n)})}));var A=v.attribute;for(v.attribute=function(e,t,n){return A&&A(e,t,n)};y!==r;){if(!0!==j(y)){if(i(l,y,v,m,h,r))break;if(f(y,v,h,r))break;i(l,y,v,m,h),h.length===b&&f(y,v,h),h.length===b&&d(l,y,v,h)}y=y.parentNode,b=h.length}if(y===r){var k=p(l,y,v);h.unshift(k)}return h.join(" ")}function i(e,t,n,r,o){var c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:t.parentNode,a=l(e,t,n,r);if(a){var u=c.querySelectorAll(a);if(1===u.length)return o.unshift(a),!0}return!1}function l(e,t,n,r){for(var o=t.attributes,u=Object.keys(o).sort((function(t,n){var r=e.indexOf(o[t].name),c=e.indexOf(o[n].name);return-1===c?-1===r?0:-1:r-c})),i=0,l=u.length;i<l;i++){var f=u[i],s=o[f],d=s.name,p=c(s.value);if(!v(n[d]||n.attribute,d,p,a[d]||a.attribute)){var g="[".concat(d,'="').concat(p,'"]');if(!1===/\b\d/.test(p)&&("id"===d&&(g="#".concat(p)),"class"===d)){console.log("exclude?",p.split(" ").map((function(e){return{ex:r.className(e),c:e}})));var m=p.trim().replace(/\s+/g,".");g=".".concat(m)}return g}}return null}function f(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e.parentNode,o=s(e,t);if(o){var c=r.getElementsByTagName(o);if(1===c.length)return n.unshift(o),!0}return!1}function s(e,t){var n=e.tagName.toLowerCase();return v(t.tag,null,n)?null:n}function d(e,t,n,r){for(var o=t.parentNode,c=o.childTags||o.children,a=0,u=c.length;a<u;a++){var i=c[a];if(i===t){var l=p(e,i,n);if(!l)return console.warn("\n          Element couldn't be matched through strict ignore pattern!\n        ",i,n,l);var f="> ".concat(l,":nth-child(").concat(a+1,")");return r.unshift(f),!0}}return!1}function p(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=l(e,t,n,r);return o||(o=s(t,n)),o}function v(e,t,n,r){if(!n)return!0;var o=e||r;return!!o&&o(t,n,r)}function g(e,t){if(Array.isArray(t)||(t=t.length?o(t):[t]),!t.length||t.some((function(e){return 1!==e.nodeType})))throw new Error('Invalid input - to compare HTMLElements its necessary to provide a reference of the selected node(s)! (missing "elements")');t[0];var n=e.replace(/> /g,">").split(/\s+(?=(?:(?:[^"]*"){2})*[^"]*$)/);if(n.length<2)return m("",e,"",t);for(var r=[n.pop()];n.length>1;){var c=n.pop(),a=n.join(" "),u=r.join(" "),i="".concat(a," ").concat(u),l=document.querySelectorAll(i);l.length!==t.length&&r.unshift(m(a,c,u,t))}return r.unshift(n[0]),(n=r)[0]=m("",n[0],n.slice(1).join(" "),t),n[n.length-1]=m(n.slice(0,-1).join(" "),n[n.length-1],"",t),n.join(" ").replace(/>/g,"> ").trim()}function m(e,t,n,r){if(e.length&&(e="".concat(e," ")),n.length&&(n=" ".concat(n)),/\[*\]/.test(t)){var o=t.replace(/=.*$/,"]"),c="".concat(e).concat(o).concat(n);if(h(document.querySelectorAll(c),r))t=o;else for(var a=document.querySelectorAll("".concat(e).concat(o)),u=function(){var o=a[i];if(r.some((function(e){return o.contains(e)}))){var u=o.tagName.toLowerCase();return c="".concat(e).concat(u).concat(n),h(document.querySelectorAll(c),r)&&(t=u),"break"}},i=0,l=a.length;i<l;i++){if("break"===u())break}}if(/>/.test(t)){var f=t.replace(/>/,"");c="".concat(e).concat(f).concat(n);h(document.querySelectorAll(c),r)&&(t=f)}if(/:nth-child/.test(t)){var s=t.replace(/nth-child/g,"nth-of-type");c="".concat(e).concat(s).concat(n);h(document.querySelectorAll(c),r)&&(t=s)}if(/\.\S+\.\S+/.test(t)){for(var d=t.trim().split(".").slice(1).map((function(e){return".".concat(e)})).sort((function(e,t){return e.length-t.length}));d.length;){var p=t.replace(d.shift(),"").trim();if(!(c="".concat(e).concat(p).concat(n).trim()).length||">"===c.charAt(0)||">"===c.charAt(c.length-1))break;h(document.querySelectorAll(c),r)&&(t=p)}if((d=t&&t.match(/\./g))&&d.length>2){var v=document.querySelectorAll("".concat(e).concat(t)),g=function(){var o=v[i];if(r.some((function(e){return o.contains(e)}))){var a=o.tagName.toLowerCase();return c="".concat(e).concat(a).concat(n),h(document.querySelectorAll(c),r)&&(t=a),"break"}};for(i=0,l=v.length;i<l;i++){if("break"===g())break}}}return t}function h(e,t){var n=e.length;return n===t.length&&t.every((function(t){for(var r=0;r<n;r++)if(e[r]===t)return!0;return!1}))}function y(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.root,r=void 0===n?document:n,o=[];e.forEach((function(e,t){for(var n=[];e!==r;)e=e.parentNode,n.unshift(e);o[t]=n})),o.sort((function(e,t){return e.length-t.length}));for(var c=o.shift(),a=null,u=function(){var e=c[i];if(o.some((function(t){return!t.some((function(t){return t===e}))})))return"break";a=e},i=0,l=c.length;i<l;i++){var f=u();if("break"===f)break}return a}function b(e){var t={classes:[],attributes:{},tag:null};return e.forEach((function(e){var n=t.classes,r=t.attributes,o=t.tag;if(void 0!==n){var c=e.getAttribute("class");c?(c=c.trim().split(" "),n.length?(n=n.filter((function(e){return c.some((function(t){return t===e}))}))).length?t.classes=n:delete t.classes:t.classes=c):delete t.classes}if(void 0!==r){var a=e.attributes,u=Object.keys(a).reduce((function(e,t){var n=a[t],r=n.name;return n&&"class"!==r&&(e[r]=n.value),e}),{}),i=Object.keys(u),l=Object.keys(r);i.length?l.length?(r=l.reduce((function(e,t){var n=r[t];return n===u[t]&&(e[t]=n),e}),{}),Object.keys(r).length?t.attributes=r:delete t.attributes):t.attributes=u:delete t.attributes}if(void 0!==o){var f=e.tagName.toLowerCase();o?f!==o&&delete t.tag:t.tag=f}})),t}function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(3===e.nodeType&&(e=e.parentNode),1!==e.nodeType)throw new Error('Invalid input - only HTMLElements or representations of them are supported! (not "'.concat(S(e),'")'));var n=u(e,t),r=g(n,e,t);return document.querySelector(n)!=document.querySelector(r)?(console.log("Error at selector optimization. Returning the raw selector."),n):r}function A(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(Array.isArray(e)||(e=o(e)),e.some((function(e){return 1!==e.nodeType})))throw new Error("Invalid input - only an Array of HTMLElements or representations of them is supported!");e[0];var n=y(e,t),r=j(n,t),c=k(e),a=c[0],u=g("".concat(r," ").concat(a),e,t),i=o(document.querySelectorAll(u));return e.every((function(e){return i.some((function(t){return t===e}))}))?u:console.warn("\n      The selected elements can't be efficiently mapped.\n      Its probably best to use multiple single selectors instead!\n    ",e)}function k(e){var t=b(e),n=t.classes,r=t.attributes,o=t.tag,c=[];if(o&&c.push(o),n){var a=n.map((function(e){return".".concat(e)})).join("");c.push(a)}if(r){var u=Object.keys(r).reduce((function(e,t){return e.push("[".concat(t,'="').concat(r[t],'"]')),e}),[]).join("");c.push(u)}return c.length,[c.join("")]}function w(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.length&&!e.name?A(e,t):j(e,t)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,