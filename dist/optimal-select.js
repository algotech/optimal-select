!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.OptimalSelect=e():t.OptimalSelect=e()}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=110)}([function(t,e,n){var r=n(25),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();t.exports=i},function(t,e,n){var r=n(51),o=n(57);t.exports=function(t,e){var n=o(t,e);return r(n)?n:void 0}},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){var r=n(39);t.exports=function(t){return r(t,5)}},function(t,e,n){var r=n(41),o=n(42),i=n(43),c=n(44),u=n(45);function a(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}a.prototype.clear=r,a.prototype.delete=o,a.prototype.get=i,a.prototype.has=c,a.prototype.set=u,t.exports=a},function(t,e,n){var r=n(23);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e,n){var r=n(12),o=n(53),i=n(54),c=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":c&&c in Object(t)?o(t):i(t)}},function(t,e,n){var r=n(1)(Object,"create");t.exports=r},function(t,e,n){var r=n(67);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},function(t,e,n){var r=n(27),o=n(28);t.exports=function(t,e,n,i){var c=!n;n||(n={});for(var u=-1,a=e.length;++u<a;){var s=e[u],f=i?i(n[s],t[s],s,n,t):void 0;void 0===f&&(f=t[s]),c?o(n,s,f):r(n,s,f)}return n}},function(t,e,n){var r=n(1)(n(0),"Map");t.exports=r},function(t,e,n){var r=n(0).Symbol;t.exports=r},function(t,e,n){var r=n(29),o=n(81),i=n(33);t.exports=function(t){return i(t)?r(t):o(t)}},function(t,e){var n=Array.isArray;t.exports=n},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){(function(t){var r=n(25),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,c=i&&i.exports===o&&r.process,u=function(){try{var t=i&&i.require&&i.require("util").types;return t||c&&c.binding&&c.binding("util")}catch(t){}}();t.exports=u}).call(this,n(15)(t))},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e,n){var r=n(29),o=n(84),i=n(33);t.exports=function(t){return i(t)?r(t,!0):o(t)}},function(t,e,n){var r=n(89),o=n(34),i=Object.prototype.propertyIsEnumerable,c=Object.getOwnPropertySymbols,u=c?function(t){return null==t?[]:(t=Object(t),r(c(t),(function(e){return i.call(t,e)})))}:o;t.exports=u},function(t,e,n){var r=n(93),o=n(11),i=n(94),c=n(95),u=n(96),a=n(7),s=n(26),f=s(r),l=s(o),p=s(i),d=s(c),b=s(u),v=a;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=v(new o)||i&&"[object Promise]"!=v(i.resolve())||c&&"[object Set]"!=v(new c)||u&&"[object WeakMap]"!=v(new u))&&(v=function(t){var e=a(t),n="[object Object]"==e?t.constructor:void 0,r=n?s(n):"";if(r)switch(r){case f:return"[object DataView]";case l:return"[object Map]";case p:return"[object Promise]";case d:return"[object Set]";case b:return"[object WeakMap]"}return e}),t.exports=v},function(t,e,n){var r=n(99);t.exports=function(t){var e=new t.constructor(t.byteLength);return new r(e).set(new r(t)),e}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(7),o=n(2);t.exports=function(t){if(!o(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(52))},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(28),o=n(23),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n){var c=t[e];i.call(t,e)&&o(c,n)&&(void 0!==n||e in t)||r(t,e,n)}},function(t,e,n){var r=n(72);t.exports=function(t,e,n){"__proto__"==e&&r?r(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}},function(t,e,n){var r=n(74),o=n(75),i=n(14),c=n(30),u=n(78),a=n(79),s=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=i(t),f=!n&&o(t),l=!n&&!f&&c(t),p=!n&&!f&&!l&&a(t),d=n||f||l||p,b=d?r(t.length,String):[],v=b.length;for(var h in t)!e&&!s.call(t,h)||d&&("length"==h||l&&("offset"==h||"parent"==h)||p&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||u(h,v))||b.push(h);return b}},function(t,e,n){(function(t){var r=n(0),o=n(77),i=e&&!e.nodeType&&e,c=i&&"object"==typeof t&&t&&!t.nodeType&&t,u=c&&c.exports===i?r.Buffer:void 0,a=(u?u.isBuffer:void 0)||o;t.exports=a}).call(this,n(15)(t))},function(t,e){t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e,n){var r=n(24),o=n(31);t.exports=function(t){return null!=t&&o(t.length)&&!r(t)}},function(t,e){t.exports=function(){return[]}},function(t,e,n){var r=n(36),o=n(37),i=n(20),c=n(34),u=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)r(e,i(t)),t=o(t);return e}:c;t.exports=u},function(t,e){t.exports=function(t,e){for(var n=-1,r=e.length,o=t.length;++n<r;)t[o+n]=e[n];return t}},function(t,e,n){var r=n(32)(Object.getPrototypeOf,Object);t.exports=r},function(t,e,n){var r=n(36),o=n(14);t.exports=function(t,e,n){var i=e(t);return o(t)?i:r(i,n(t))}},function(t,e,n){var r=n(40),o=n(71),i=n(27),c=n(73),u=n(83),a=n(86),s=n(87),f=n(88),l=n(90),p=n(91),d=n(92),b=n(21),v=n(97),h=n(98),g=n(104),y=n(14),m=n(30),j=n(106),x=n(2),_=n(108),S=n(13),A=n(19),w={};w["[object Arguments]"]=w["[object Array]"]=w["[object ArrayBuffer]"]=w["[object DataView]"]=w["[object Boolean]"]=w["[object Date]"]=w["[object Float32Array]"]=w["[object Float64Array]"]=w["[object Int8Array]"]=w["[object Int16Array]"]=w["[object Int32Array]"]=w["[object Map]"]=w["[object Number]"]=w["[object Object]"]=w["[object RegExp]"]=w["[object Set]"]=w["[object String]"]=w["[object Symbol]"]=w["[object Uint8Array]"]=w["[object Uint8ClampedArray]"]=w["[object Uint16Array]"]=w["[object Uint32Array]"]=!0,w["[object Error]"]=w["[object Function]"]=w["[object WeakMap]"]=!1,t.exports=function t(e,n,O,C,k,E){var I,F=1&n,T=2&n,P=4&n;if(O&&(I=k?O(e,C,k,E):O(e)),void 0!==I)return I;if(!x(e))return e;var N=y(e);if(N){if(I=v(e),!F)return s(e,I)}else{var D=b(e),z="[object Function]"==D||"[object GeneratorFunction]"==D;if(m(e))return a(e,F);if("[object Object]"==D||"[object Arguments]"==D||z&&!k){if(I=T||z?{}:g(e),!F)return T?l(e,u(I,e)):f(e,c(I,e))}else{if(!w[D])return k?e:{};I=h(e,D,F)}}E||(E=new r);var L=E.get(e);if(L)return L;E.set(e,I),_(e)?e.forEach((function(r){I.add(t(r,n,O,r,e,E))})):j(e)&&e.forEach((function(r,o){I.set(o,t(r,n,O,o,e,E))}));var M=N?void 0:(P?T?d:p:T?A:S)(e);return o(M||e,(function(r,o){M&&(r=e[o=r]),i(I,o,t(r,n,O,o,e,E))})),I}},function(t,e,n){var r=n(5),o=n(46),i=n(47),c=n(48),u=n(49),a=n(50);function s(t){var e=this.__data__=new r(t);this.size=e.size}s.prototype.clear=o,s.prototype.delete=i,s.prototype.get=c,s.prototype.has=u,s.prototype.set=a,t.exports=s},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(6),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0)&&(n==e.length-1?e.pop():o.call(e,n,1),--this.size,!0)}},function(t,e,n){var r=n(6);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(6);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(6);t.exports=function(t,e){var n=this.__data__,o=r(n,t);return o<0?(++this.size,n.push([t,e])):n[o][1]=e,this}},function(t,e,n){var r=n(5);t.exports=function(){this.__data__=new r,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,n){var r=n(5),o=n(11),i=n(58);t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var c=n.__data__;if(!o||c.length<199)return c.push([t,e]),this.size=++n.size,this;n=this.__data__=new i(c)}return n.set(t,e),this.size=n.size,this}},function(t,e,n){var r=n(24),o=n(55),i=n(2),c=n(26),u=/^\[object .+?Constructor\]$/,a=Function.prototype,s=Object.prototype,f=a.toString,l=s.hasOwnProperty,p=RegExp("^"+f.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||o(t))&&(r(t)?p:u).test(c(t))}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(12),o=Object.prototype,i=o.hasOwnProperty,c=o.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=i.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var o=c.call(t);return r&&(e?t[u]=n:delete t[u]),o}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r,o=n(56),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!i&&i in t}},function(t,e,n){var r=n(0)["__core-js_shared__"];t.exports=r},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,n){var r=n(59),o=n(66),i=n(68),c=n(69),u=n(70);function a(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}a.prototype.clear=r,a.prototype.delete=o,a.prototype.get=i,a.prototype.has=c,a.prototype.set=u,t.exports=a},function(t,e,n){var r=n(60),o=n(5),i=n(11);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(t,e,n){var r=n(61),o=n(62),i=n(63),c=n(64),u=n(65);function a(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}a.prototype.clear=r,a.prototype.delete=o,a.prototype.get=i,a.prototype.has=c,a.prototype.set=u,t.exports=a},function(t,e,n){var r=n(8);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,n){var r=n(8),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(e,t)?e[t]:void 0}},function(t,e,n){var r=n(8),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:o.call(e,t)}},function(t,e,n){var r=n(8);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(t,e,n){var r=n(9);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,n){var r=n(9);t.exports=function(t){return r(this,t).get(t)}},function(t,e,n){var r=n(9);t.exports=function(t){return r(this,t).has(t)}},function(t,e,n){var r=n(9);t.exports=function(t,e){var n=r(this,t),o=n.size;return n.set(t,e),this.size+=n.size==o?0:1,this}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}},function(t,e,n){var r=n(1),o=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=o},function(t,e,n){var r=n(10),o=n(13);t.exports=function(t,e){return t&&r(e,o(e),t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},function(t,e,n){var r=n(76),o=n(3),i=Object.prototype,c=i.hasOwnProperty,u=i.propertyIsEnumerable,a=r(function(){return arguments}())?r:function(t){return o(t)&&c.call(t,"callee")&&!u.call(t,"callee")};t.exports=a},function(t,e,n){var r=n(7),o=n(3);t.exports=function(t){return o(t)&&"[object Arguments]"==r(t)}},function(t,e){t.exports=function(){return!1}},function(t,e){var n=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var r=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&n.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,n){var r=n(80),o=n(16),i=n(17),c=i&&i.isTypedArray,u=c?o(c):r;t.exports=u},function(t,e,n){var r=n(7),o=n(31),i=n(3),c={};c["[object Float32Array]"]=c["[object Float64Array]"]=c["[object Int8Array]"]=c["[object Int16Array]"]=c["[object Int32Array]"]=c["[object Uint8Array]"]=c["[object Uint8ClampedArray]"]=c["[object Uint16Array]"]=c["[object Uint32Array]"]=!0,c["[object Arguments]"]=c["[object Array]"]=c["[object ArrayBuffer]"]=c["[object Boolean]"]=c["[object DataView]"]=c["[object Date]"]=c["[object Error]"]=c["[object Function]"]=c["[object Map]"]=c["[object Number]"]=c["[object Object]"]=c["[object RegExp]"]=c["[object Set]"]=c["[object String]"]=c["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&o(t.length)&&!!c[r(t)]}},function(t,e,n){var r=n(18),o=n(82),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return o(t);var e=[];for(var n in Object(t))i.call(t,n)&&"constructor"!=n&&e.push(n);return e}},function(t,e,n){var r=n(32)(Object.keys,Object);t.exports=r},function(t,e,n){var r=n(10),o=n(19);t.exports=function(t,e){return t&&r(e,o(e),t)}},function(t,e,n){var r=n(2),o=n(18),i=n(85),c=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=o(t),n=[];for(var u in t)("constructor"!=u||!e&&c.call(t,u))&&n.push(u);return n}},function(t,e){t.exports=function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}},function(t,e,n){(function(t){var r=n(0),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,c=i&&i.exports===o?r.Buffer:void 0,u=c?c.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var n=t.length,r=u?u(n):new t.constructor(n);return t.copy(r),r}}).call(this,n(15)(t))},function(t,e){t.exports=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}},function(t,e,n){var r=n(10),o=n(20);t.exports=function(t,e){return r(t,o(t),e)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,o=0,i=[];++n<r;){var c=t[n];e(c,n,t)&&(i[o++]=c)}return i}},function(t,e,n){var r=n(10),o=n(35);t.exports=function(t,e){return r(t,o(t),e)}},function(t,e,n){var r=n(38),o=n(20),i=n(13);t.exports=function(t){return r(t,i,o)}},function(t,e,n){var r=n(38),o=n(35),i=n(19);t.exports=function(t){return r(t,i,o)}},function(t,e,n){var r=n(1)(n(0),"DataView");t.exports=r},function(t,e,n){var r=n(1)(n(0),"Promise");t.exports=r},function(t,e,n){var r=n(1)(n(0),"Set");t.exports=r},function(t,e,n){var r=n(1)(n(0),"WeakMap");t.exports=r},function(t,e){var n=Object.prototype.hasOwnProperty;t.exports=function(t){var e=t.length,r=new t.constructor(e);return e&&"string"==typeof t[0]&&n.call(t,"index")&&(r.index=t.index,r.input=t.input),r}},function(t,e,n){var r=n(22),o=n(100),i=n(101),c=n(102),u=n(103);t.exports=function(t,e,n){var a=t.constructor;switch(e){case"[object ArrayBuffer]":return r(t);case"[object Boolean]":case"[object Date]":return new a(+t);case"[object DataView]":return o(t,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return u(t,n);case"[object Map]":return new a;case"[object Number]":case"[object String]":return new a(t);case"[object RegExp]":return i(t);case"[object Set]":return new a;case"[object Symbol]":return c(t)}}},function(t,e,n){var r=n(0).Uint8Array;t.exports=r},function(t,e,n){var r=n(22);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}},function(t,e){var n=/\w*$/;t.exports=function(t){var e=new t.constructor(t.source,n.exec(t));return e.lastIndex=t.lastIndex,e}},function(t,e,n){var r=n(12),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;t.exports=function(t){return i?Object(i.call(t)):{}}},function(t,e,n){var r=n(22);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}},function(t,e,n){var r=n(105),o=n(37),i=n(18);t.exports=function(t){return"function"!=typeof t.constructor||i(t)?{}:r(o(t))}},function(t,e,n){var r=n(2),o=Object.create,i=function(){function t(){}return function(e){if(!r(e))return{};if(o)return o(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();t.exports=i},function(t,e,n){var r=n(107),o=n(16),i=n(17),c=i&&i.isMap,u=c?o(c):r;t.exports=u},function(t,e,n){var r=n(21),o=n(3);t.exports=function(t){return o(t)&&"[object Map]"==r(t)}},function(t,e,n){var r=n(109),o=n(16),i=n(17),c=i&&i.isSet,u=c?o(c):r;t.exports=u},function(t,e,n){var r=n(21),o=n(3);t.exports=function(t){return o(t)&&"[object Set]"==r(t)}},function(t,e,n){"use strict";n.r(e),n.d(e,"select",(function(){return w})),n.d(e,"getSingleSelector",(function(){return _})),n.d(e,"getMultiSelector",(function(){return S})),n.d(e,"getSelector",(function(){return nt})),n.d(e,"optimize",(function(){return h})),n.d(e,"common",(function(){return r})),n.d(e,"default",(function(){return w}));var r={};function o(t){for(var e=t.length,n=new Array(e),r=0;r<e;r++)n[r]=t[r];return n}function i(t){return t&&t.replace(/['"`\\/:\?&!#$%^()[\]{|}*+;,.<=>@~]/g,"\\$&").replace(/\n/g,"A")}n.r(r),n.d(r,"getCommonAncestor",(function(){return m})),n.d(r,"getCommonProperties",(function(){return j}));var c={attribute:function(t){return["style","data-reactid","data-react-checksum"].indexOf(t)>-1}};function u(t,e){var n=e.root,r=void 0===n?document:n,o=e.skip,c=void 0===o?null:o,u=e.priority,s=void 0===u?["id","class","href","src"]:u,f=e.ignore,p=void 0===f?{}:f,v=e.exclude,h=void 0===v?{}:v,g=[],y=t,m=g.length,j=c&&(Array.isArray(c)?c:[c]).map((function(t){return"function"!=typeof t?function(e){return e===t}:t})),x=function(t){return c&&j.some((function(e){return e(t)}))};Object.keys(p).forEach((function(t){var e=p[t];"function"!=typeof e&&("number"==typeof e&&(e=e.toString()),"string"==typeof e&&(e=new RegExp(i(e).replace(/\\/g,"\\\\"))),"boolean"==typeof e&&(e=e?/(?:)/:/.^/),p[t]=function(t,n){return e.test(n)})}));var _=p.attribute;for(p.attribute=function(t,e,n){return _&&_(t,e,n)};y!==r;){if(!0!==x(y)){if(a(s,y,p,h,g,r))break;if(l(y,p,g,r))break;a(s,y,p,h,g),g.length===m&&l(y,p,g),g.length===m&&d(s,y,p,h,g)}y=y.parentNode,m=g.length}if(y===r){var S=b(s,y,p,h);g.unshift(S)}return g.join(" ")}function a(t,e,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e.parentNode,c=s(t,e,n,r);if(c){var u=i.querySelectorAll(c);if(1===u.length)return o.unshift(c),!0}return!1}function s(t,e,n,r){for(var o=e.attributes,u=Object.keys(o).sort((function(e,n){var r=t.indexOf(o[e].name),i=t.indexOf(o[n].name);return-1===i&&-1===r?0:-1===i&&-1!==r?-1:-1!==i&&-1===r?1:r-i})),a=0,s=u.length;a<s;a++){var l=u[a],p=o[l],d=p.name,b=i(p.value);if(!v(n[d]||n.attribute,d,b,c[d]||c.attribute)){var h="[".concat(d,'="').concat(b,'"]');if("id"===d&&(h="#".concat(b)),"class"===d){var g=f(b,r.className);h=(g=g.trim().replace(/\s+/g,".")).length?".".concat(g):null}return h}}return null}function f(t,e){return t.split(" ").filter((function(t){return!t.length||!e(t)})).join(" ")}function l(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.parentNode,o=p(t,e);if(o){var i=r.getElementsByTagName(o);if(1===i.length)return n.unshift(o),!0}return!1}function p(t,e){var n=t.tagName.toLowerCase();return v(e.tag,null,n)?null:n}function d(t,e,n,r,o){for(var i=e.parentNode,c=i.childTags||i.children,u=0,a=c.length;u<a;u++){var s=c[u];if(s===e){var f=b(t,s,n,r);if(!f)return console.warn("\n          Element couldn't be matched through strict ignore pattern!\n        ",s,n,f);var l="> ".concat(f,":nth-child(").concat(u+1,")");return o.unshift(l),!0}}return!1}function b(t,e,n,r){var o=s(t,e,n,r);return o||(o=p(e,n)),o}function v(t,e,n,r){if(!n)return!0;var o=t||r;return!!o&&o(e,n,r)}function h(t,e){if(Array.isArray(e)||(e=e.length?o(e):[e]),!e.length||e.some((function(t){return 1!==t.nodeType})))throw new Error('Invalid input - to compare HTMLElements its necessary to provide a reference of the selected node(s)! (missing "elements")');e[0];var n=t.replace(/> /g,">").split(/\s+(?=(?:(?:[^"]*"){2})*[^"]*$)/);if(n.length<2)return g("",t,"",e);for(var r=[n.pop()];n.length>1;){var i=n.pop(),c=n.join(" "),u=r.join(" "),a="".concat(c," ").concat(u),s=document.querySelectorAll(a);s.length!==e.length&&r.unshift(g(c,i,u,e))}return r.unshift(n[0]),(n=r)[0]=g("",n[0],n.slice(1).join(" "),e),n[n.length-1]=g(n.slice(0,-1).join(" "),n[n.length-1],"",e),n.join(" ").replace(/>/g,"> ").trim()}function g(t,e,n,r){if(t.length&&(t="".concat(t," ")),n.length&&(n=" ".concat(n)),/\[*\]/.test(e)){var o=e.replace(/=.*$/,"]"),i="".concat(t).concat(o).concat(n);if(y(document.querySelectorAll(i),r))e=o;else for(var c=document.querySelectorAll("".concat(t).concat(o)),u=function(){var o=c[a];if(r.some((function(t){return o.contains(t)}))){var u=o.tagName.toLowerCase();return i="".concat(t).concat(u).concat(n),y(document.querySelectorAll(i),r)&&(e=u),"break"}},a=0,s=c.length;a<s;a++){if("break"===u())break}}if(/>/.test(e)){var f=e.replace(/>/,"");i="".concat(t).concat(f).concat(n);y(document.querySelectorAll(i),r)&&(e=f)}if(/:nth-child/.test(e)){var l=e.replace(/nth-child/g,"nth-of-type");i="".concat(t).concat(l).concat(n);y(document.querySelectorAll(i),r)&&(e=l)}if(/\.\S+\.\S+/.test(e)){for(var p=e.trim().split(".").slice(1).map((function(t){return".".concat(t)})).sort((function(t,e){return t.length-e.length}));p.length;){var d=e.replace(p.shift(),"").trim();if(!(i="".concat(t).concat(d).concat(n).trim()).length||">"===i.charAt(0)||">"===i.charAt(i.length-1))break;y(document.querySelectorAll(i),r)&&(e=d)}if((p=e&&e.match(/\./g))&&p.length>2){var b=document.querySelectorAll("".concat(t).concat(e)),v=function(){var o=b[a];if(r.some((function(t){return o.contains(t)}))){var c=o.tagName.toLowerCase();return i="".concat(t).concat(c).concat(n),y(document.querySelectorAll(i),r)&&(e=c),"break"}};for(a=0,s=b.length;a<s;a++){if("break"===v())break}}}return e}function y(t,e){var n=t.length;return n===e.length&&e.every((function(e){for(var r=0;r<n;r++)if(t[r]===e)return!0;return!1}))}function m(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.root,r=void 0===n?document:n,o=[];t.forEach((function(t,e){for(var n=[];t!==r;)t=t.parentNode,n.unshift(t);o[e]=n})),o.sort((function(t,e){return t.length-e.length}));for(var i=o.shift(),c=null,u=function(){var t=i[a];if(o.some((function(e){return!e.some((function(e){return e===t}))})))return"break";c=t},a=0,s=i.length;a<s;a++){var f=u();if("break"===f)break}return c}function j(t){var e={classes:[],attributes:{},tag:null};return t.forEach((function(t){var n=e.classes,r=e.attributes,o=e.tag;if(void 0!==n){var i=t.getAttribute("class");i?(i=i.trim().split(" "),n.length?(n=n.filter((function(t){return i.some((function(e){return e===t}))}))).length?e.classes=n:delete e.classes:e.classes=i):delete e.classes}if(void 0!==r){var c=t.attributes,u=Object.keys(c).reduce((function(t,e){var n=c[e],r=n.name;return n&&"class"!==r&&(t[r]=n.value),t}),{}),a=Object.keys(u),s=Object.keys(r);a.length?s.length?(r=s.reduce((function(t,e){var n=r[e];return n===u[e]&&(t[e]=n),t}),{}),Object.keys(r).length?e.attributes=r:delete e.attributes):e.attributes=u:delete e.attributes}if(void 0!==o){var f=t.tagName.toLowerCase();o?f!==o&&delete e.tag:e.tag=f}})),e}function x(t){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(3===t.nodeType&&(t=t.parentNode),1!==t.nodeType)throw new Error('Invalid input - only HTMLElements or representations of them are supported! (not "'.concat(x(t),'")'));var n=u(t,e),r=h(n,t,e);return document.querySelector(n)!=document.querySelector(r)?(console.log("Error at selector optimization. Returning the raw selector."),n):r}function S(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(Array.isArray(t)||(t=o(t)),t.some((function(t){return 1!==t.nodeType})))throw new Error("Invalid input - only an Array of HTMLElements or representations of them is supported!");t[0];var n=m(t,e),r=_(n,e),i=A(t),c=i[0],u=h("".concat(r," ").concat(c),t,e),a=o(document.querySelectorAll(u));return t.every((function(t){return a.some((function(e){return e===t}))}))?u:console.warn("\n      The selected elements can't be efficiently mapped.\n      Its probably best to use multiple single selectors instead!\n    ",t)}function A(t){var e=j(t),n=e.classes,r=e.attributes,o=e.tag,i=[];if(o&&i.push(o),n){var c=n.map((function(t){return".".concat(t)})).join("");i.push(c)}if(r){var u=Object.keys(r).reduce((function(t,e){return t.push("[".concat(e,'="').concat(r[e],'"]')),t}),[]).join("");i.push(u)}return i.length,[i.join("")]}function w(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.length&&!t.name?S(t,e):_(t,e)}var O=n(4),C=n.n(O);function k(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var E=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.name=e||"Unnamed Selector Configuration",this.defaultComposition={classes:!0,ids:!0,tags:!0,attributes:!1,excludeRandomSelectors:!0,exceptions:{}},n?this.composition={classes:n.classes,ids:n.ids,tags:n.tags,attributes:n.attributes,excludeRandomSelectors:n.excludeRandomSelectors,exceptions:n.exceptions}:this.useDefaultComposition(),this.validCompositionProperties=["classes","attributes","ids","tags","excludeRandomSelectors","exceptions"]}var e,n,r;return e=t,(n=[{key:"modifyComposition",value:function(t,e){if(!this.validCompositionProperties.includes(t))return console.error("Invalid composition property:",t);this.saveComposition(),this.composition[t]=e}},{key:"saveComposition",value:function(){this.savedComposition=C()(this.composition)}},{key:"getComposition",value:function(){return this.composition}},{key:"getForbiddenClassSubstrings",value:function(){return this.composition.exceptions&&this.composition.exceptions.forbiddenClassSubstrings||[]}},{key:"getForbiddenIdSubstrings",value:function(){return this.composition.exceptions&&this.composition.exceptions.forbiddenIdSubstrings||[]}},{key:"getForbiddenAttributeSubstrings",value:function(){return this.composition.exceptions&&this.composition.exceptions.forbiddenAttributeSubstrings||[]}},{key:"deleteForbiddenClassSubstring",value:function(t){var e=this.getForbiddenClassSubstrings().indexOf(t);e>=0&&this.composition.exceptions.forbiddenClassSubstrings.splice(e,1)}},{key:"deleteForbiddenIdSubstring",value:function(t){var e=this.getForbiddenIdSubstrings().indexOf(t);e>=0&&this.composition.exceptions.forbiddenIdSubstrings.splice(e,1)}},{key:"deleteForbiddenAttributeSubstring",value:function(t){var e=this.getForbiddenAttributeSubstrings().indexOf(t);e>=0&&this.composition.exceptions.forbiddenAttributeSubstrings.splice(e,1)}},{key:"insertForbiddenClassSubstring",value:function(t){var e=this.getForbiddenClassSubstrings();e.push(t),this.composition.exceptions.forbiddenClassSubstrings=e}},{key:"insertForbiddenIdSubstring",value:function(t){var e=this.getForbiddenIdSubstrings();e.push(t),this.composition.exceptions.forbiddenIdSubstrings=e}},{key:"insertForbiddenAttributeSubstring",value:function(t){var e=this.getForbiddenAttributeSubstrings();e.push(t),this.composition.exceptions.forbiddenAttributeSubstrings=e}},{key:"restoreSavedComposition",value:function(){this.composition=C()(this.savedComposition)}},{key:"useDefaultComposition",value:function(){this.composition=C()(this.defaultComposition)}},{key:"isAllowIds",value:function(){return this.composition.ids}},{key:"isAllowClasses",value:function(){return this.composition.classes}},{key:"isAllowAttributes",value:function(){return this.composition.attributes}},{key:"isAllowTags",value:function(){return this.composition.tags}},{key:"isExcludingRandomSelectors",value:function(){return this.composition.excludeRandomSelectors}},{key:"isCompositionValid",value:function(){var t=this.composition,e=t.ids,n=t.classes,r=t.tags,o=t.attributes;return e||n||r||o}},{key:"clone",value:function(){return new t(this.name,C()(this.composition))}},{key:"isIncludedInConfig",value:function(t){var e=this,n=t.getComposition();return Object.keys(this.composition).every((function(t){return!e.composition[t]||n[t]}))}}])&&k(e.prototype,n),r&&k(e,r),t}();function I(t){var e=!(!t.match(/.*([0-9]{1}.{0,3}[0-9]{1}){1}.*/)||t.match(/.*\D+(1[0-2]){1}(\D{1}.*)?$/)),n="[^aeiouy_-]",r=new RegExp(".*".concat(n).concat(n).concat(n).concat("[aeiouy]").concat(n).concat(n,".*"),"i"),o=new RegExp(".*".concat(n).concat(n).concat("[aeiouy]").concat(n).concat(n).concat(n,".*"),"i"),i=new RegExp(".*".concat(n).concat(n).concat(n).concat(n,".*"),"i"),c=!!t.match(r)||!!t.match(o)||!!t.match(i);return e||c}var F=function(t){return{root:document,priority:["id","class"],ignore:{id:T.bind(void 0,t),class:P.bind(void 0,t),tag:N.bind(void 0,t),attribute:D.bind(void 0,t)},exclude:{className:z.bind(void 0,t)}}};function T(t,e,n){if(t.isAllowIds()){if(I(n)&&t.isExcludingRandomSelectors())return!0;for(var r=t.getForbiddenIdSubstrings(),o=0;o<r.length;o++)if(n.includes(r[o]))return!0;return!1}return!0}function P(t,e,n){return!n||!t.isAllowClasses()}function N(t,e,n){return!t.isAllowTags()}function D(t,e,n,r){if(t.isAllowAttributes()){if((I(e)||I(n))&&t.isExcludingRandomSelectors())return!0;for(var o=t.getForbiddenAttributeSubstrings(),i=0;i<o.length;i++)if(e.includes(o[i]))return!0;return r(e,n)}return!0}function z(t,e){if(e&&e.length>30)return!0;if(I(e)&&t.isExcludingRandomSelectors())return!0;for(var n=t.getForbiddenClassSubstrings(),r=0;r<n.length;r++)if(e.includes(n[r]))return!0;return!1}var L,M,R=function(t,e,n){return t.querySelector(e.join(" "))===n&&1===t.querySelectorAll(e.join(" ")).length};function U(t){try{document.createDocumentFragment().querySelector(t)}catch(t){return!1}return!0}function q(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var $="VALIDATION_FAILED",B="GENERATION_FAILED",V="DEFAULT_GENERATION_FAILED",G="VALUE_IS_MISSING",W="FELL_TO_DEFAULT_CONFIG",H="FELL_TO_DEFAULT_STRATEGY",Y=(q(L={},$,{type:$,message:"Selector didn't pass the validation test."}),q(L,B,{type:B,message:"Selector couldn't be generated using the specified config."}),q(L,V,{type:V,message:"Selector couldn't be generated using the default/safest config."}),q(L,G,{type:G,message:"Selector value is missing."}),L),J=(q(M={},W,{type:W,message:"Could not generate selector using the specified config. Using the default config instead."}),q(M,H,{type:H,message:"Could not generate selector using the specified strategy. Using the default strategy instead."}),M),K=function(t,e,n){var r=Y[e];t.errors.push(Object.assign({},r,{context:n})),t.hasError=!0},Q=function(t,e,n){var r=J[e];t.warnings.push(Object.assign({},r,n)),t.hasWarning=!0},X=new E("Default Selector Configuration");var Z=function(t,e,n,r){r=r||_;var o={$target:t,success:!0,hasError:!1,hasWarning:!1,value:null,errors:[],warnings:[],config:n=n||X},i=F(n);try{e&&(i.root=e);var c=r(t,i);if(i.root.querySelector(c)===t){var u=function(t,e,n){for(var r=t.split(" "),o="";U(r.join(" "))&&R(e,r,n);)o=r.shift(),[">","+","~"].includes(r[0])&&(o+=" "+r.shift());var i="".concat(o," ").concat(r.join(" "));return i.length<t.length?i:null}(c,i.root,t);o.value=u||c}else K(o,$,{invalidatedSelector:c,configComposition:n.getComposition(),expectedElement:t,strategy:r})}catch(t){K(o,B,{failedConfigComposition:n.getComposition(),error:t,strategy:r})}return o.value||K(o,G,{foundValue:o.value,strategy:r}),o.success=!o.hasError,o},tt=new E("Default Selector Configuration");function et(t,e,n){var r=Z(t,e,n,w);if(!r.hasError)return r;var o=Z(t,e,null,w);if(tt.isIncludedInConfig(n)||Q(o,W),!o.hasError)return o;var i=Z(t,e,n,_);if(Q(i,H),!i.hasError)return i;var c=Z(t,e,null,_);if(tt.isIncludedInConfig(n)||Q(c,W),Q(c,H),!c.hasError)return c;var u={classes:!1,ids:!1,tags:!0,attributes:!1,exceptions:Object.assign({},{forbiddenClassSubstrings:n.getForbiddenClassSubstrings()},{forbiddenIdSubstrings:n.getForbiddenIdSubstrings()},{forbiddenAttributeSubstrings:n.getForbiddenAttributeSubstrings()})},a=new E(n.name,u),s=Z(t,e,a,w);return a.isIncludedInConfig(n)||Q(s,W),s.hasError?(function(t,e,n,r,o){console.error("[optimal-select-log] All produce selector attempts failed. The selectors are:"),console.error("[optimal-select-log] userConfig + defaultStrategy",t),console.error("[optimal-select-log] fallbackConfig + defaultStrategy",e),console.error("[optimal-select-log] userConfig + fallbackStrategy",n),console.error("[optimal-select-log] fallbackConfig + fallbackStrategy",r),console.error("[optimal-select-log] tagsOnlyComposition + defaultStrategy",o)}(r,o,i,c,s),null):s}function nt(t,e,n){var r=new E("Global Selector Config",e);return et(t,n||window.document,r)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,