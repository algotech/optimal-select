!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.OptimalSelect=e():t.OptimalSelect=e()}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"select",(function(){return w})),n.d(e,"getSingleSelector",(function(){return j})),n.d(e,"getMultiSelector",(function(){return A})),n.d(e,"optimize",(function(){return g})),n.d(e,"common",(function(){return r})),n.d(e,"default",(function(){return w}));var r={};function o(t){for(var e=t.length,n=new Array(e),r=0;r<e;r++)n[r]=t[r];return n}function c(t){return t&&t.replace(/['"`\\/:\?&!#$%^()[\]{|}*+;,.<=>@~]/g,"\\$&").replace(/\n/g,"A")}n.r(r),n.d(r,"getCommonAncestor",(function(){return y})),n.d(r,"getCommonProperties",(function(){return b}));var a={attribute:function(t){return["style","data-reactid","data-react-checksum"].indexOf(t)>-1}};function u(t,e){var n=e.root,r=void 0===n?document:n,o=e.skip,a=void 0===o?null:o,u=e.priority,l=void 0===u?["id","class","href","src"]:u,s=e.ignore,v=void 0===s?{}:s,g=e.exclude,m=void 0===g?{}:g;console.log("match op",e,m.className&&m.className("jss251 markdown-body"));var h=[],y=t,b=h.length,S=a&&(Array.isArray(a)?a:[a]).map((function(t){return"function"!=typeof t?function(e){return e===t}:t})),j=function(t){return a&&S.some((function(e){return e(t)}))};Object.keys(v).forEach((function(t){var e=v[t];"function"!=typeof e&&("number"==typeof e&&(e=e.toString()),"string"==typeof e&&(e=new RegExp(c(e).replace(/\\/g,"\\\\"))),"boolean"==typeof e&&(e=e?/(?:)/:/.^/),v[t]=function(t,n){return e.test(n)})}));var A=v.attribute;for(v.attribute=function(t,e,n){return A&&A(t,e,n)};y!==r;){if(!0!==j(y)){if(i(l,y,v,h,r))break;if(f(y,v,h,r))break;i(l,y,v,h),h.length===b&&f(y,v,h),h.length===b&&d(l,y,v,h)}y=y.parentNode,b=h.length}if(y===r){var k=p(l,y,v);h.unshift(k)}return h.join(" ")}function i(t,e,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:e.parentNode,c=l(t,e,n);if(c){var a=o.querySelectorAll(c);if(1===a.length)return r.unshift(c),!0}return!1}function l(t,e,n){for(var r=e.attributes,o=Object.keys(r).sort((function(e,n){var o=t.indexOf(r[e].name),c=t.indexOf(r[n].name);return-1===c?-1===o?0:-1:o-c})),u=0,i=o.length;u<i;u++){var l=o[u],f=r[l],s=f.name,d=c(f.value);if(!v(n[s]||n.attribute,s,d,a[s]||a.attribute)){var p="[".concat(s,'="').concat(d,'"]');if(!1===/\b\d/.test(d)&&("id"===s&&(p="#".concat(d)),"class"===s)){var g=d.trim().replace(/\s+/g,".");p=".".concat(g)}return p}}return null}function f(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.parentNode,o=s(t,e);if(o){var c=r.getElementsByTagName(o);if(1===c.length)return n.unshift(o),!0}return!1}function s(t,e){var n=t.tagName.toLowerCase();return v(e.tag,null,n)?null:n}function d(t,e,n,r){for(var o=e.parentNode,c=o.childTags||o.children,a=0,u=c.length;a<u;a++){var i=c[a];if(i===e){var l=p(t,i,n);if(!l)return console.warn("\n          Element couldn't be matched through strict ignore pattern!\n        ",i,n,l);var f="> ".concat(l,":nth-child(").concat(a+1,")");return r.unshift(f),!0}}return!1}function p(t,e,n){var r=l(t,e,n);return r||(r=s(e,n)),r}function v(t,e,n,r){if(!n)return!0;var o=t||r;return!!o&&o(e,n,r)}function g(t,e){if(Array.isArray(e)||(e=e.length?o(e):[e]),!e.length||e.some((function(t){return 1!==t.nodeType})))throw new Error('Invalid input - to compare HTMLElements its necessary to provide a reference of the selected node(s)! (missing "elements")');e[0];var n=t.replace(/> /g,">").split(/\s+(?=(?:(?:[^"]*"){2})*[^"]*$)/);if(n.length<2)return m("",t,"",e);for(var r=[n.pop()];n.length>1;){var c=n.pop(),a=n.join(" "),u=r.join(" "),i="".concat(a," ").concat(u),l=document.querySelectorAll(i);l.length!==e.length&&r.unshift(m(a,c,u,e))}return r.unshift(n[0]),(n=r)[0]=m("",n[0],n.slice(1).join(" "),e),n[n.length-1]=m(n.slice(0,-1).join(" "),n[n.length-1],"",e),n.join(" ").replace(/>/g,"> ").trim()}function m(t,e,n,r){if(t.length&&(t="".concat(t," ")),n.length&&(n=" ".concat(n)),/\[*\]/.test(e)){var o=e.replace(/=.*$/,"]"),c="".concat(t).concat(o).concat(n);if(h(document.querySelectorAll(c),r))e=o;else for(var a=document.querySelectorAll("".concat(t).concat(o)),u=function(){var o=a[i];if(r.some((function(t){return o.contains(t)}))){var u=o.tagName.toLowerCase();return c="".concat(t).concat(u).concat(n),h(document.querySelectorAll(c),r)&&(e=u),"break"}},i=0,l=a.length;i<l;i++){if("break"===u())break}}if(/>/.test(e)){var f=e.replace(/>/,"");c="".concat(t).concat(f).concat(n);h(document.querySelectorAll(c),r)&&(e=f)}if(/:nth-child/.test(e)){var s=e.replace(/nth-child/g,"nth-of-type");c="".concat(t).concat(s).concat(n);h(document.querySelectorAll(c),r)&&(e=s)}if(/\.\S+\.\S+/.test(e)){for(var d=e.trim().split(".").slice(1).map((function(t){return".".concat(t)})).sort((function(t,e){return t.length-e.length}));d.length;){var p=e.replace(d.shift(),"").trim();if(!(c="".concat(t).concat(p).concat(n).trim()).length||">"===c.charAt(0)||">"===c.charAt(c.length-1))break;h(document.querySelectorAll(c),r)&&(e=p)}if((d=e&&e.match(/\./g))&&d.length>2){var v=document.querySelectorAll("".concat(t).concat(e)),g=function(){var o=v[i];if(r.some((function(t){return o.contains(t)}))){var a=o.tagName.toLowerCase();return c="".concat(t).concat(a).concat(n),h(document.querySelectorAll(c),r)&&(e=a),"break"}};for(i=0,l=v.length;i<l;i++){if("break"===g())break}}}return e}function h(t,e){var n=t.length;return n===e.length&&e.every((function(e){for(var r=0;r<n;r++)if(t[r]===e)return!0;return!1}))}function y(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.root,r=void 0===n?document:n,o=[];t.forEach((function(t,e){for(var n=[];t!==r;)t=t.parentNode,n.unshift(t);o[e]=n})),o.sort((function(t,e){return t.length-e.length}));for(var c=o.shift(),a=null,u=function(){var t=c[i];if(o.some((function(e){return!e.some((function(e){return e===t}))})))return"break";a=t},i=0,l=c.length;i<l;i++){var f=u();if("break"===f)break}return a}function b(t){var e={classes:[],attributes:{},tag:null};return t.forEach((function(t){var n=e.classes,r=e.attributes,o=e.tag;if(void 0!==n){var c=t.getAttribute("class");c?(c=c.trim().split(" "),n.length?(n=n.filter((function(t){return c.some((function(e){return e===t}))}))).length?e.classes=n:delete e.classes:e.classes=c):delete e.classes}if(void 0!==r){var a=t.attributes,u=Object.keys(a).reduce((function(t,e){var n=a[e],r=n.name;return n&&"class"!==r&&(t[r]=n.value),t}),{}),i=Object.keys(u),l=Object.keys(r);i.length?l.length?(r=l.reduce((function(t,e){var n=r[e];return n===u[e]&&(t[e]=n),t}),{}),Object.keys(r).length?e.attributes=r:delete e.attributes):e.attributes=u:delete e.attributes}if(void 0!==o){var f=t.tagName.toLowerCase();o?f!==o&&delete e.tag:e.tag=f}})),e}function S(t){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function j(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(3===t.nodeType&&(t=t.parentNode),1!==t.nodeType)throw new Error('Invalid input - only HTMLElements or representations of them are supported! (not "'.concat(S(t),'")'));var n=u(t,e),r=g(n,t,e);return document.querySelector(n)!=document.querySelector(r)?(console.log("Error at selector optimization. Returning the raw selector."),n):r}function A(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(Array.isArray(t)||(t=o(t)),t.some((function(t){return 1!==t.nodeType})))throw new Error("Invalid input - only an Array of HTMLElements or representations of them is supported!");t[0];var n=y(t,e),r=j(n,e),c=k(t),a=c[0],u=g("".concat(r," ").concat(a),t,e),i=o(document.querySelectorAll(u));return t.every((function(t){return i.some((function(e){return e===t}))}))?u:console.warn("\n      The selected elements can't be efficiently mapped.\n      Its probably best to use multiple single selectors instead!\n    ",t)}function k(t){var e=b(t),n=e.classes,r=e.attributes,o=e.tag,c=[];if(o&&c.push(o),n){var a=n.map((function(t){return".".concat(t)})).join("");c.push(a)}if(r){var u=Object.keys(r).reduce((function(t,e){return t.push("[".concat(e,'="').concat(r[e],'"]')),t}),[]).join("");c.push(u)}return c.length,[c.join("")]}function w(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.length&&!t.name?A(t,e):j(t,e)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,