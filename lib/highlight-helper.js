"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var attachComputeOverlayStylesToGlobal = function attachComputeOverlayStylesToGlobal() {
  var returnOnlyComputeOverlayStyles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  function computeOverlayStyles(target, borderWidth) {
    var widthHeightFactor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var leftTopFactor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var returnOnlyCoords = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    function elementExistsInDOM(element) {
      return document.body.contains(element);
    }

    function hasParentWithPositionFixed(element) {
      // eslint-disable-next-line no-cond-assign
      do {
        if (getComputedStyle(element).position === 'fixed') {
          return true;
        }
      } while (element = element.offsetParent);

      return false;
    }
    /**
    * Checks if the given pseudo element is bigger than the target element
    * @param {Element} element The element to compare the pseudo element with
    * @param {String} pseudoElement One of ':before' or ':after'
    * @return {Object}         Object containing top, left, width, height in px
    *                          ;null if not bigger
    */


    function isPseudoElementBigger(element, pseudoElement) {
      var _getComputedStyle = getComputedStyle(element, pseudoElement),
          left = _getComputedStyle.left,
          top = _getComputedStyle.top,
          marginLeft = _getComputedStyle.marginLeft,
          marginTop = _getComputedStyle.marginTop,
          width = _getComputedStyle.width,
          height = _getComputedStyle.height;

      var _element$getBoundingC = element.getBoundingClientRect(),
          elementWidth = _element$getBoundingC.width,
          elementHeight = _element$getBoundingC.height;

      var _ref = [element.offsetLeft, element.offsetTop],
          elementLeft = _ref[0],
          elementTop = _ref[1];

      if ((Number.isNaN(parseInt(width, 10)) || parseInt(width, 10) <= elementWidth) && (Number.isNaN(parseInt(height, 10)) || parseInt(height, 10) <= elementHeight)) {
        return null;
      }

      var differenceTop = (parseInt(top, 10) || 0) + (parseInt(marginTop, 10) || 0);
      var differenceLeft = (parseInt(left, 10) || 0) + (parseInt(marginLeft, 10) || 0);
      return {
        left: elementLeft + differenceLeft,
        top: elementTop + differenceTop,
        width: Math.max(parseInt(width, 10), elementWidth) || elementWidth,
        height: Math.max(parseInt(height, 10), elementHeight) || elementHeight
      };
    }

    function isAnyPseudoElementBiggerThanElement(target) {
      var beforeBigger = isPseudoElementBigger(target, ':before');
      var afterBigger = isPseudoElementBigger(target, ':after');

      if (beforeBigger && afterBigger) {
        if (beforeBigger.width * beforeBigger.height > afterBigger.width * afterBigger.height) {
          return beforeBigger;
        }

        return afterBigger;
      }

      return beforeBigger || afterBigger;
    }

    if (!elementExistsInDOM(target)) {
      return null;
    }

    var parentWithPositionFixed = hasParentWithPositionFixed(target);
    var boundingClientRect = target.getBoundingClientRect();
    var biggerPseudo = isAnyPseudoElementBiggerThanElement(target);
    var computedStyle = window.getComputedStyle(target);
    var outerWidth = computedStyle.overflow === 'visible' ? target.scrollWidth || boundingClientRect.width : target.offsetWidth || boundingClientRect.width;
    var outerHeight = computedStyle.overflow === 'visible' ? target.scrollHeight || boundingClientRect.height : target.offsetHeight || boundingClientRect.height;
    var htmlMarginLeft = parseInt(window.getComputedStyle(document.querySelector('html')).marginLeft.replace('px', ''), 10) || 0;
    var htmlMarginTop = parseInt(window.getComputedStyle(document.querySelector('html')).marginTop.replace('px', ''), 10) || 0;
    var scrollTop = typeof window.scrollY === 'undefined' ? window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0 : window.scrollY;
    var scrollLeft = typeof window.scrollX === 'undefined' ? window.pageXOffset || document.documentElement.scrollTop || document.body.scrollTop || 0 : window.scrollX;
    var coordinates = {
      position: parentWithPositionFixed ? 'fixed' : 'absolute',
      width: (biggerPseudo && biggerPseudo.width || outerWidth) + widthHeightFactor * borderWidth,
      height: (biggerPseudo && biggerPseudo.height || outerHeight) + widthHeightFactor * borderWidth,
      left: boundingClientRect.left + (parentWithPositionFixed ? 0 : scrollLeft) - leftTopFactor * borderWidth - htmlMarginLeft,
      top: boundingClientRect.top + (parentWithPositionFixed ? 0 : scrollTop) - leftTopFactor * borderWidth - htmlMarginTop
    };
    var styling = {
      border: "".concat(borderWidth.toString(), "px solid red"),
      backgroundColor: 'orange',
      'mix-blend-mode': 'difference',
      opacity: 0.2,
      zIndex: 2147483645,
      'min-width': '10px',
      'min-height': '10px'
    };
    return returnOnlyCoords ? coordinates : Object.assign({}, coordinates, styling);
  } // we need computeOverlayStyles without other code to be exported for the extension part
  // but we need computeOverlayStyles in the browser execute too, that's why this happens.


  var addToGlobalVariable = function addToGlobalVariable(computeOverlayStylesFunc) {
    window.trudonGlobals.computeOverlayStyles = computeOverlayStylesFunc;
    return computeOverlayStylesFunc;
  };

  if (returnOnlyComputeOverlayStyles) {
    return computeOverlayStyles;
  }

  if (window.trudonGlobals) {
    return addToGlobalVariable(computeOverlayStyles);
  }
};

var _default = {
  attachComputeOverlayStylesToGlobal: attachComputeOverlayStylesToGlobal,
  computeOverlayStyles: attachComputeOverlayStylesToGlobal(true)
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
