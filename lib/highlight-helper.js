"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var attachComputeOverlayStylesToGlobal = function attachComputeOverlayStylesToGlobal() {
  var returnOnlyComputeOverlayStyles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  function computeOverlayStyles(target, borderWidth) {
    var returnOnlyCoords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    function elementExistsInDOM(element) {
      return document.body.contains(element);
    }

    function hasParentWithPositionFixed(element) {
      // eslint-disable-next-line no-cond-assign
      do {
        if (getComputedStyle(element).position === 'fixed') {
          return true;
        }
      } while (element = element.offsetParent);

      return false;
    }
    /**
    * Checks if the given pseudo element is bigger than the target element
    * @param {Element} element The element to compare the pseudo element with
    * @param {String} pseudoElement One of ':before' or ':after'
    * @return {Object}         Object containing top, left, width, height in px
    *                          ;null if not bigger
    */


    function isPseudoElementBigger(element, pseudoElement) {
      var _getComputedStyle = getComputedStyle(element, pseudoElement),
          left = _getComputedStyle.left,
          top = _getComputedStyle.top,
          marginLeft = _getComputedStyle.marginLeft,
          marginTop = _getComputedStyle.marginTop,
          width = _getComputedStyle.width,
          height = _getComputedStyle.height;

      var _element$getBoundingC = element.getBoundingClientRect(),
          elementWidth = _element$getBoundingC.width,
          elementHeight = _element$getBoundingC.height;

      var _ref = [element.offsetLeft, element.offsetTop],
          elementLeft = _ref[0],
          elementTop = _ref[1];

      if ((Number.isNaN(parseInt(width, 10)) || parseInt(width, 10) <= elementWidth) && (Number.isNaN(parseInt(height, 10)) || parseInt(height, 10) <= elementHeight)) {
        return null;
      }

      var differenceTop = (parseInt(top, 10) || 0) + (parseInt(marginTop, 10) || 0);
      var differenceLeft = (parseInt(left, 10) || 0) + (parseInt(marginLeft, 10) || 0);
      return {
        left: elementLeft + differenceLeft,
        top: elementTop + differenceTop,
        width: Math.max(parseInt(width, 10), elementWidth) || elementWidth,
        height: Math.max(parseInt(height, 10), elementHeight) || elementHeight
      };
    }

    function isAnyPseudoElementBiggerThanElement(target) {
      var beforeBigger = isPseudoElementBigger(target, ':before');
      var afterBigger = isPseudoElementBigger(target, ':after');

      if (beforeBigger && afterBigger) {
        if (beforeBigger.width * beforeBigger.height > afterBigger.width * afterBigger.height) {
          return beforeBigger;
        }

        return afterBigger;
      }

      return beforeBigger || afterBigger;
    }

    if (!elementExistsInDOM(target)) {
      return null;
    }

    var parentWithPositionFixed = hasParentWithPositionFixed(target);
    var boundingClientRect = target.getBoundingClientRect();
    var biggerPseudo = isAnyPseudoElementBiggerThanElement(target);
    var computedStyle = window.getComputedStyle(target);
    var outerWidth = computedStyle.overflow === 'visible' ? target.scrollWidth || boundingClientRect.width : target.offsetWidth || boundingClientRect.width;
    var outerHeight = computedStyle.overflow === 'visible' ? target.scrollHeight || boundingClientRect.height : target.offsetHeight || boundingClientRect.height;
    var htmlMarginLeft = parseInt(window.getComputedStyle(document.querySelector('html')).marginLeft.replace('px', ''), 10) || 0;
    var htmlMarginTop = parseInt(window.getComputedStyle(document.querySelector('html')).marginTop.replace('px', ''), 10) || 0;
    var scrollTop = typeof window.scrollY === 'undefined' ? window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0 : window.scrollY;
    var scrollLeft = typeof window.scrollX === 'undefined' ? window.pageXOffset || document.documentElement.scrollTop || document.body.scrollTop || 0 : window.scrollX;
    var coordinates = {
      position: parentWithPositionFixed ? 'fixed' : 'absolute',
      width: (biggerPseudo && biggerPseudo.width || outerWidth) + borderWidth,
      height: (biggerPseudo && biggerPseudo.height || outerHeight) + borderWidth,
      left: boundingClientRect.left + (parentWithPositionFixed ? 0 : scrollLeft) - borderWidth - htmlMarginLeft,
      top: boundingClientRect.top + (parentWithPositionFixed ? 0 : scrollTop) - borderWidth - htmlMarginTop
    };
    var styling = {
      border: "".concat(borderWidth.toString(), "px solid red"),
      backgroundColor: 'orange',
      'mix-blend-mode': 'difference',
      opacity: 0.2,
      zIndex: 2147483645,
      'min-width': '10px',
      'min-height': '10px'
    };
    return returnOnlyCoords ? coordinates : Object.assign({}, coordinates, styling);
  } // we need computeOverlayStyles without other code to be exported for the extension part
  // but we need computeOverlayStyles in the browser execute too, that's why this happens.


  var addToGlobalVariable = function addToGlobalVariable(computeOverlayStylesFunc) {
    window.trudonGlobals.computeOverlayStyles = computeOverlayStylesFunc;
    return computeOverlayStylesFunc;
  };

  if (returnOnlyComputeOverlayStyles) {
    return computeOverlayStyles;
  }

  if (window.trudonGlobals) {
    return addToGlobalVariable(computeOverlayStyles);
  }
};

var _default = {
  attachComputeOverlayStylesToGlobal: attachComputeOverlayStylesToGlobal,
  computeOverlayStyles: attachComputeOverlayStylesToGlobal(true)
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhpZ2hsaWdodC1oZWxwZXIuanMiXSwibmFtZXMiOlsiYXR0YWNoQ29tcHV0ZU92ZXJsYXlTdHlsZXNUb0dsb2JhbCIsInJldHVybk9ubHlDb21wdXRlT3ZlcmxheVN0eWxlcyIsImNvbXB1dGVPdmVybGF5U3R5bGVzIiwidGFyZ2V0IiwiYm9yZGVyV2lkdGgiLCJyZXR1cm5Pbmx5Q29vcmRzIiwiZWxlbWVudEV4aXN0c0luRE9NIiwiZWxlbWVudCIsImRvY3VtZW50IiwiYm9keSIsImNvbnRhaW5zIiwiaGFzUGFyZW50V2l0aFBvc2l0aW9uRml4ZWQiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJvZmZzZXRQYXJlbnQiLCJpc1BzZXVkb0VsZW1lbnRCaWdnZXIiLCJwc2V1ZG9FbGVtZW50IiwibGVmdCIsInRvcCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Ub3AiLCJ3aWR0aCIsImhlaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsZW1lbnRXaWR0aCIsImVsZW1lbnRIZWlnaHQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwiZWxlbWVudExlZnQiLCJlbGVtZW50VG9wIiwiTnVtYmVyIiwiaXNOYU4iLCJwYXJzZUludCIsImRpZmZlcmVuY2VUb3AiLCJkaWZmZXJlbmNlTGVmdCIsIk1hdGgiLCJtYXgiLCJpc0FueVBzZXVkb0VsZW1lbnRCaWdnZXJUaGFuRWxlbWVudCIsImJlZm9yZUJpZ2dlciIsImFmdGVyQmlnZ2VyIiwicGFyZW50V2l0aFBvc2l0aW9uRml4ZWQiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJiaWdnZXJQc2V1ZG8iLCJjb21wdXRlZFN0eWxlIiwid2luZG93Iiwib3V0ZXJXaWR0aCIsIm92ZXJmbG93Iiwic2Nyb2xsV2lkdGgiLCJvZmZzZXRXaWR0aCIsIm91dGVySGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiaHRtbE1hcmdpbkxlZnQiLCJxdWVyeVNlbGVjdG9yIiwicmVwbGFjZSIsImh0bWxNYXJnaW5Ub3AiLCJzY3JvbGxUb3AiLCJzY3JvbGxZIiwicGFnZVlPZmZzZXQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWCIsInBhZ2VYT2Zmc2V0IiwiY29vcmRpbmF0ZXMiLCJzdHlsaW5nIiwiYm9yZGVyIiwidG9TdHJpbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJvcGFjaXR5IiwiekluZGV4IiwiT2JqZWN0IiwiYXNzaWduIiwiYWRkVG9HbG9iYWxWYXJpYWJsZSIsImNvbXB1dGVPdmVybGF5U3R5bGVzRnVuYyIsInRydWRvbkdsb2JhbHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFNQSxrQ0FBa0MsR0FBRyxTQUFyQ0Esa0NBQXFDLEdBQTRDO0FBQUEsTUFBM0NDLDhCQUEyQyx1RUFBVixLQUFVOztBQUNyRixXQUFTQyxvQkFBVCxDQUE4QkMsTUFBOUIsRUFBc0NDLFdBQXRDLEVBQTZFO0FBQUEsUUFBMUJDLGdCQUEwQix1RUFBUCxLQUFPOztBQUMzRSxhQUFTQyxrQkFBVCxDQUE0QkMsT0FBNUIsRUFBcUM7QUFDbkMsYUFBT0MsUUFBUSxDQUFDQyxJQUFULENBQWNDLFFBQWQsQ0FBdUJILE9BQXZCLENBQVA7QUFDRDs7QUFFRCxhQUFTSSwwQkFBVCxDQUFvQ0osT0FBcEMsRUFBNkM7QUFDM0M7QUFDQSxTQUFHO0FBQ0QsWUFBSUssZ0JBQWdCLENBQUNMLE9BQUQsQ0FBaEIsQ0FBMEJNLFFBQTFCLEtBQXVDLE9BQTNDLEVBQW9EO0FBQ2xELGlCQUFPLElBQVA7QUFDRDtBQUNGLE9BSkQsUUFJU04sT0FBTyxHQUFHQSxPQUFPLENBQUNPLFlBSjNCOztBQU1BLGFBQU8sS0FBUDtBQUNEO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNJLGFBQVNDLHFCQUFULENBQStCUixPQUEvQixFQUF3Q1MsYUFBeEMsRUFBdUQ7QUFBQSw4QkFHakRKLGdCQUFnQixDQUFDTCxPQUFELEVBQVVTLGFBQVYsQ0FIaUM7QUFBQSxVQUVuREMsSUFGbUQscUJB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aEI7QUFVQSxXQUFPaEUsZ0JBQWdCLEdBQUcwRCxXQUFILEdBQWlCTyxNQUFNLENBQUNDLE1BQVAsQ0FDdEMsRUFEc0MsRUFFdENSLFdBRnNDLEVBR3RDQyxPQUhzQyxDQUF4QztBQUtELEdBcklvRixDQXVJckY7QUFDQTs7O0FBQ0EsTUFBSVEsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUFVQyx3QkFBVixFQUFvQztBQUM1RDdCLElBQUFBLE1BQU0sQ0FBQzhCLGFBQVAsQ0FBcUJ4RSxvQkFBckIsR0FBNEN1RSx3QkFBNUM7QUFFQSxXQUFPQSx3QkFBUDtBQUNELEdBSkQ7O0FBTUEsTUFBSXhFLDhCQUFKLEVBQW9DO0FBQ2xDLFdBQU9DLG9CQUFQO0FBQ0Q7O0FBRUQsTUFBSTBDLE1BQU0sQ0FBQzhCLGFBQVgsRUFBMEI7QUFDeEIsV0FBT0YsbUJBQW1CLENBQUN0RSxvQkFBRCxDQUExQjtBQUNEO0FBQ0YsQ0F0SkQ7O2VBeUplO0FBQ2JGLEVBQUFBLGtDQUFrQyxFQUFsQ0Esa0NBRGE7QUFFYkUsRUFBQUEsb0JBQW9CLEVBQUVGLGtDQUFrQyxDQUFDLElBQUQ7QUFGM0MsQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF0dGFjaENvbXB1dGVPdmVybGF5U3R5bGVzVG9HbG9iYWwgPSAocmV0dXJuT25seUNvbXB1dGVPdmVybGF5U3R5bGVzID0gZmFsc2UpID0+IHtcbiAgZnVuY3Rpb24gY29tcHV0ZU92ZXJsYXlTdHlsZXModGFyZ2V0LCBib3JkZXJXaWR0aCwgcmV0dXJuT25seUNvb3JkcyA9IGZhbHNlKSB7XG4gICAgZnVuY3Rpb24gZWxlbWVudEV4aXN0c0luRE9NKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc1BhcmVudFdpdGhQb3NpdGlvbkZpeGVkKGVsZW1lbnQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuICAgICAgZG8ge1xuICAgICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQpO1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIHBzZXVkbyBlbGVtZW50IGlzIGJpZ2dlciB0aGFuIHRoZSB0YXJnZXQgZWxlbWVudFxuICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNvbXBhcmUgdGhlIHBzZXVkbyBlbGVtZW50IHdpdGhcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBwc2V1ZG9FbGVtZW50IE9uZSBvZiAnOmJlZm9yZScgb3IgJzphZnRlcidcbiAgICAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICBPYmplY3QgY29udGFpbmluZyB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQgaW4gcHhcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICA7bnVsbCBpZiBub3QgYmlnZ2VyXG4gICAgKi9cbiAgICBmdW5jdGlvbiBpc1BzZXVkb0VsZW1lbnRCaWdnZXIoZWxlbWVudCwgcHNldWRvRWxlbWVudCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBsZWZ0LCB0b3AsIG1hcmdpbkxlZnQsIG1hcmdpblRvcCwgd2lkdGgsIGhlaWdodFxuICAgICAgfSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgcHNldWRvRWxlbWVudCk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHdpZHRoOiBlbGVtZW50V2lkdGgsXG4gICAgICAgIGhlaWdodDogZWxlbWVudEhlaWdodFxuICAgICAgfSA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBbXG4gICAgICAgIGVsZW1lbnRMZWZ0LFxuICAgICAgICBlbGVtZW50VG9wXG4gICAgICBdID0gW1xuICAgICAgICBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgICAgIGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgICAgXTtcblxuICAgICAgaWYgKFxuICAgICAgICAoTnVtYmVyLmlzTmFOKHBhcnNlSW50KHdpZHRoLCAxMCkpIHx8IHBhcnNlSW50KHdpZHRoLCAxMCkgPD0gZWxlbWVudFdpZHRoXG4gICAgICApICYmIChcbiAgICAgICAgTnVtYmVyLmlzTmFOKHBhcnNlSW50KGhlaWdodCwgMTApKSB8fCBwYXJzZUludChoZWlnaHQsIDEwKSA8PSBlbGVtZW50SGVpZ2h0XG4gICAgICApKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgZGlmZmVyZW5jZVRvcCA9IChwYXJzZUludCh0b3AsIDEwKSB8fCAwKSArXG4gICAgICAgIChwYXJzZUludChtYXJnaW5Ub3AsIDEwKSB8fCAwKTtcbiAgICAgIGNvbnN0IGRpZmZlcmVuY2VMZWZ0ID0gKHBhcnNlSW50KGxlZnQsIDEwKSB8fCAwKSArXG4gICAgICAgIChwYXJzZUludChtYXJnaW5MZWZ0LCAxMCkgfHwgMCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IGVsZW1lbnRMZWZ0ICsgZGlmZmVyZW5jZUxlZnQsXG4gICAgICAgIHRvcDogZWxlbWVudFRvcCArIGRpZmZlcmVuY2VUb3AsXG4gICAgICAgIHdpZHRoOiBNYXRoLm1heChwYXJzZUludCh3aWR0aCwgMTApLCBlbGVtZW50V2lkdGgpIHx8IGVsZW1lbnRXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLm1heChwYXJzZUludChoZWlnaHQsIDEwKSwgZWxlbWVudEhlaWdodCkgfHwgZWxlbWVudEhlaWdodCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBbnlQc2V1ZG9FbGVtZW50QmlnZ2VyVGhhbkVsZW1lbnQodGFyZ2V0KSB7XG4gICAgICBjb25zdCBiZWZvcmVCaWdnZXIgPSBpc1BzZXVkb0VsZW1lbnRCaWdnZXIodGFyZ2V0LCAnOmJlZm9yZScpO1xuICAgICAgY29uc3QgYWZ0ZXJCaWdnZXIgPSBpc1BzZXVkb0VsZW1lbnRCaWdnZXIodGFyZ2V0LCAnOmFmdGVyJyk7XG5cbiAgICAgIGlmIChiZWZvcmVCaWdnZXIgJiYgYWZ0ZXJCaWdnZXIpIHtcbiAgICAgICAgaWYgKGJlZm9yZUJpZ2dlci53aWR0aCAqIGJlZm9yZUJpZ2dlci5oZWlnaHQgPlxuICAgICAgICAgIGFmdGVyQmlnZ2VyLndpZHRoICogYWZ0ZXJCaWdnZXIuaGVpZ2h0XG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBiZWZvcmVCaWdnZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWZ0ZXJCaWdnZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiZWZvcmVCaWdnZXIgfHwgYWZ0ZXJCaWdnZXI7XG4gICAgfVxuICAgIGlmICghZWxlbWVudEV4aXN0c0luRE9NKHRhcmdldCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudFdpdGhQb3NpdGlvbkZpeGVkID0gaGFzUGFyZW50V2l0aFBvc2l0aW9uRml4ZWQodGFyZ2V0KTtcbiAgICBjb25zdCBib3VuZGluZ0NsaWVudFJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgYmlnZ2VyUHNldWRvID0gaXNBbnlQc2V1ZG9FbGVtZW50QmlnZ2VyVGhhbkVsZW1lbnQodGFyZ2V0KTtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcblxuICAgIGNvbnN0IG91dGVyV2lkdGggPSBjb21wdXRlZFN0eWxlLm92ZXJmbG93ID09PSAndmlzaWJsZScgP1xuICAgICAgdGFyZ2V0LnNjcm9sbFdpZHRoIHx8IGJvdW5kaW5nQ2xpZW50UmVjdC53aWR0aCA6XG4gICAgICB0YXJnZXQub2Zmc2V0V2lkdGggfHwgYm91bmRpbmdDbGllbnRSZWN0LndpZHRoO1xuICAgIGNvbnN0IG91dGVySGVpZ2h0ID0gY29tcHV0ZWRTdHlsZS5vdmVyZmxvdyA9PT0gJ3Zpc2libGUnID9cbiAgICAgIHRhcmdldC5zY3JvbGxIZWlnaHQgfHwgYm91bmRpbmdDbGllbnRSZWN0LmhlaWdodCA6XG4gICAgICB0YXJnZXQub2Zmc2V0SGVpZ2h0IHx8IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQ7XG5cbiAgICBjb25zdCBodG1sTWFyZ2luTGVmdCA9IHBhcnNlSW50KFxuICAgICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpKS5tYXJnaW5MZWZ0LnJlcGxhY2UoJ3B4JywgJycpLFxuICAgICAgMTBcbiAgICApIHx8IDA7XG5cbiAgICBjb25zdCBodG1sTWFyZ2luVG9wID0gcGFyc2VJbnQoXG4gICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJykpLm1hcmdpblRvcC5yZXBsYWNlKCdweCcsICcnKSxcbiAgICAgIDEwXG4gICAgKSB8fCAwO1xuXG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gdHlwZW9mIHdpbmRvdy5zY3JvbGxZID09PSAndW5kZWZpbmVkJyA/XG4gICAgICB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwIDpcbiAgICAgIHdpbmRvdy5zY3JvbGxZO1xuXG4gICAgY29uc3Qgc2Nyb2xsTGVmdCA9IHR5cGVvZiB3aW5kb3cuc2Nyb2xsWCA9PT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgMCA6XG4gICAgICB3aW5kb3cuc2Nyb2xsWDtcblxuICAgIGNvbnN0IGNvb3JkaW5hdGVzID0ge1xuICAgICAgcG9zaXRpb246IHBhcmVudFdpdGhQb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScsXG4gICAgICB3aWR0aDogKGJpZ2dlclBzZXVkbyAmJiBiaWdnZXJQc2V1ZG8ud2lkdGggfHwgb3V0ZXJXaWR0aCkgKyBib3JkZXJXaWR0aCxcbiAgICAgIGhlaWdodDogKGJpZ2dlclBzZXVkbyAmJiBiaWdnZXJQc2V1ZG8uaGVpZ2h0IHx8IG91dGVySGVpZ2h0KSArIGJvcmRlcldpZHRoLFxuICAgICAgbGVmdDogKGJvdW5kaW5nQ2xpZW50UmVjdC5sZWZ0ICsgKHBhcmVudFdpdGhQb3NpdGlvbkZpeGVkID8gMCA6IHNjcm9sbExlZnQpKSAtIGJvcmRlcldpZHRoIC0gaHRtbE1hcmdpbkxlZnQsXG4gICAgICB0b3A6IChib3VuZGluZ0NsaWVudFJlY3QudG9wICsgKHBhcmVudFdpdGhQb3NpdGlvbkZpeGVkID8gMCA6IHNjcm9sbFRvcCkpIC0gYm9yZGVyV2lkdGggLSBodG1sTWFyZ2luVG9wLFxuICAgIH07XG5cbiAgICBjb25zdCBzdHlsaW5nID0ge1xuICAgICAgYm9yZGVyOiBgJHtib3JkZXJXaWR0aC50b1N0cmluZygpfXB4IHNvbGlkIHJlZGAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdvcmFuZ2UnLFxuICAgICAgJ21peC1ibGVuZC1tb2RlJzogJ2RpZmZlcmVuY2UnLFxuICAgICAgb3BhY2l0eTogMC4yLFxuICAgICAgekluZGV4OiAyMTQ3NDgzNjQ1LFxuICAgICAgJ21pbi13aWR0aCc6ICcxMHB4JyxcbiAgICAgICdtaW4taGVpZ2h0JzogJzEwcHgnLFxuICAgIH1cblxuICAgIHJldHVybiByZXR1cm5Pbmx5Q29vcmRzID8gY29vcmRpbmF0ZXMgOiBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICBjb29yZGluYXRlcyxcbiAgICAgIHN0eWxpbmcsXG4gICAgKTtcbiAgfVxuXG4gIC8vIHdlIG5lZWQgY29tcHV0ZU92ZXJsYXlTdHlsZXMgd2l0aG91dCBvdGhlciBjb2RlIHRvIGJlIGV4cG9ydGVkIGZvciB0aGUgZXh0ZW5zaW9uIHBhcnRcbiAgLy8gYnV0IHdlIG5lZWQgY29tcHV0ZU92ZXJsYXlTdHlsZXMgaW4gdGhlIGJyb3dzZXIgZXhlY3V0ZSB0b28sIHRoYXQncyB3aHkgdGhpcyBoYXBwZW5zLlxuICB2YXIgYWRkVG9HbG9iYWxWYXJpYWJsZSA9IGZ1bmN0aW9uIChjb21wdXRlT3ZlcmxheVN0eWxlc0Z1bmMpIHtcbiAgICB3aW5kb3cudHJ1ZG9uR2xvYmFscy5jb21wdXRlT3ZlcmxheVN0eWxlcyA9IGNvbXB1dGVPdmVybGF5U3R5bGVzRnVuYztcblxuICAgIHJldHVybiBjb21wdXRlT3ZlcmxheVN0eWxlc0Z1bmM7XG4gIH07XG5cbiAgaWYgKHJldHVybk9ubHlDb21wdXRlT3ZlcmxheVN0eWxlcykge1xuICAgIHJldHVybiBjb21wdXRlT3ZlcmxheVN0eWxlcztcbiAgfVxuXG4gIGlmICh3aW5kb3cudHJ1ZG9uR2xvYmFscykge1xuICAgIHJldHVybiBhZGRUb0dsb2JhbFZhcmlhYmxlKGNvbXB1dGVPdmVybGF5U3R5bGVzKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXR0YWNoQ29tcHV0ZU92ZXJsYXlTdHlsZXNUb0dsb2JhbCxcbiAgY29tcHV0ZU92ZXJsYXlTdHlsZXM6IGF0dGFjaENvbXB1dGVPdmVybGF5U3R5bGVzVG9HbG9iYWwodHJ1ZSksXG59O1xuIl0sImZpbGUiOiJoaWdobGlnaHQtaGVscGVyLmpzIn0=
