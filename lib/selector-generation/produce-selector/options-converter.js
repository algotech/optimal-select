"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.configToOptions = void 0;

var _relevanceHelper = require("./relevance-helper");

var _this = void 0;

/**
 * Transforms aSelectorConfig into optimal-select options
 * @param {SelectorConfig} selectorConfig
 * @return {Object}
 */
var configToOptions = function configToOptions(selectorConfig) {
  return {
    root: document,
    // define order of attribute processing
    priority: ['id', 'class'],
    // specify which attributes to ignore
    ignore: {
      id: ignoreIdFn.bind(_this, selectorConfig),
      "class": ignoreClassFn.bind(_this, selectorConfig),
      tag: ignoreTagFn.bind(_this, selectorConfig),
      attribute: ignoreAttributeFn.bind(_this, selectorConfig)
    },
    exclude: {
      className: excludeClassFn.bind(_this, selectorConfig)
    }
  };
};
/**
 * Decides if ids should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} a
 * @param {string} idName
 * @return {boolean}
 */


exports.configToOptions = configToOptions;

function ignoreIdFn(selectorConfig, a, idName) {
  if (selectorConfig.isAllowIds()) {
    if ((0, _relevanceHelper.isSelectorRandomlyGenerated)(idName) && selectorConfig.isExcludingRandomSelectors()) {
      return true;
    }

    var forbiddenSubstrings = selectorConfig.getForbiddenIdSubstrings();

    for (var i = 0; i < forbiddenSubstrings.length; i++) {
      if (idName.includes(forbiddenSubstrings[i])) {
        return true; // ignore id name with forbidden substring
      }
    }

    return false; // allow all ids that reached this point
  }

  return true; // ignore all ids
}
/**
 * Decides if classes should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} a
 * @param {string} className
 * @return {boolean}
 */


function ignoreClassFn(selectorConfig, a, className) {
  if (className && selectorConfig.isAllowClasses()) {
    return false; // allow all classes
  }

  return true; // ignore all classes
}
/**
 * Decides if tags should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} a
 * @param {string} tagName
 * @return {boolean}
 */


function ignoreTagFn(selectorConfig, a, tagName) {
  if (selectorConfig.isAllowTags()) {
    return false; // allow all tags
  }

  return true; // ignore all tags
}
/**
 * Decides if attributes should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} attributeName
 * @param {string} attributeValue
 * @param {Function} defaultPredicate
 * @return {boolean}
 */


function ignoreAttributeFn(selectorConfig, attributeName, attributeValue, defaultPredicate) {
  if (selectorConfig.isAllowAttributes()) {
    if (((0, _relevanceHelper.isSelectorRandomlyGenerated)(attributeName) || (0, _relevanceHelper.isSelectorRandomlyGenerated)(attributeValue)) && selectorConfig.isExcludingRandomSelectors()) {
      return true;
    }

    var forbiddenSubstrings = selectorConfig.getForbiddenAttributeSubstrings();

    for (var i = 0; i < forbiddenSubstrings.length; i++) {
      if (attributeName.includes(forbiddenSubstrings[i])) {
        return true;
      }
    } // allow default attributes


    return defaultPredicate(attributeName, attributeValue);
  }

  return true; // ignore all attributes
}
/**
 * Decides if a className should be excluded
 * @param {SelectorConfig} selectorConfig
 * @param {string} className
 * @return {boolean}
 */


function excludeClassFn(selectorConfig, className) {
  if (className.length > 30) {
    return true; // ignore long classes
  }

  if ((0, _relevanceHelper.isSelectorRandomlyGenerated)(className) && selectorConfig.isExcludingRandomSelectors()) {
    return true;
  }

  var forbiddenSubstrings = selectorConfig.getForbiddenClassSubstrings();

  for (var i = 0; i < forbiddenSubstrings.length; i++) {
    if (className.includes(forbiddenSubstrings[i])) {
      return true; // ignore class name with forbidden substring
    }
  }

  return false; // don't exclude classes who reached until here
}

var _default = {
  configToOptions: configToOptions
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9vcHRpb25zLWNvbnZlcnRlci5qcyJdLCJuYW1lcyI6WyJjb25maWdUb09wdGlvbnMiLCJzZWxlY3RvckNvbmZpZyIsInJvb3QiLCJkb2N1bWVudCIsInByaW9yaXR5IiwiaWdub3JlIiwiaWQiLCJpZ25vcmVJZEZuIiwiYmluZCIsImlnbm9yZUNsYXNzRm4iLCJ0YWciLCJpZ25vcmVUYWdGbiIsImF0dHJpYnV0ZSIsImlnbm9yZUF0dHJpYnV0ZUZuIiwiZXhjbHVkZSIsImNsYXNzTmFtZSIsImV4Y2x1ZGVDbGFzc0ZuIiwiYSIsImlkTmFtZSIsImlzQWxsb3dJZHMiLCJpc0V4Y2x1ZGluZ1JhbmRvbVNlbGVjdG9ycyIsImZvcmJpZGRlblN1YnN0cmluZ3MiLCJnZXRGb3JiaWRkZW5JZFN1YnN0cmluZ3MiLCJpIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJpc0FsbG93Q2xhc3NlcyIsInRhZ05hbWUiLCJpc0FsbG93VGFncyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVWYWx1ZSIsImRlZmF1bHRQcmVkaWNhdGUiLCJpc0FsbG93QXR0cmlidXRlcyIsImdldEZvcmJpZGRlbkF0dHJpYnV0ZVN1YnN0cmluZ3MiLCJnZXRGb3JiaWRkZW5DbGFzc1N1YnN0cmluZ3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBOzs7OztBQUtPLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQUMsY0FBYztBQUFBLFNBQUs7QUFDaERDLElBQUFBLElBQUksRUFBRUMsUUFEMEM7QUFFaEQ7QUFDQUMsSUFBQUEsUUFBUSxFQUFFLENBQUMsSUFBRCxFQUFPLE9BQVAsQ0FIc0M7QUFJaEQ7QUFDQUMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLEVBQUUsRUFBRUMsVUFBVSxDQUFDQyxJQUFYLENBQWdCLEtBQWhCLEVBQXNCUCxjQUF0QixDQURFO0FBRU4sZUFBT1EsYUFBYSxDQUFDRCxJ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QUF4QixFQUF3Q2MsU0FBeEMsRUFBbUQ7QUFDakQsTUFBSUEsU0FBUyxDQUFDUyxNQUFWLEdBQW1CLEVBQXZCLEVBQTJCO0FBQ3pCLFdBQU8sSUFBUCxDQUR5QixDQUNaO0FBQ2Q7O0FBRUQsTUFBSSxrREFBNEJULFNBQTVCLEtBQTBDZCxjQUFjLENBQUNtQiwwQkFBZixFQUE5QyxFQUEyRjtBQUN6RixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFNQyxtQkFBbUIsR0FBR3BCLGNBQWMsQ0FBQ2lDLDJCQUFmLEVBQTVCOztBQUVBLE9BQUssSUFBSVgsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsbUJBQW1CLENBQUNHLE1BQXhDLEVBQWdERCxDQUFDLEVBQWpELEVBQXFEO0FBQ25ELFFBQUlSLFNBQVMsQ0FBQ1UsUUFBVixDQUFtQkosbUJBQW1CLENBQUNFLENBQUQsQ0FBdEMsQ0FBSixFQUFnRDtBQUM5QyxhQUFPLElBQVAsQ0FEOEMsQ0FDakM7QUFDZDtBQUNGOztBQUVELFNBQU8sS0FBUCxDQWpCaUQsQ0FpQm5DO0FBQ2Y7O2VBRWM7QUFDYnZCLEVBQUFBLGVBQWUsRUFBZkE7QUFEYSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNTZWxlY3RvclJhbmRvbWx5R2VuZXJhdGVkIH0gZnJvbSAnLi9yZWxldmFuY2UtaGVscGVyJztcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIGFTZWxlY3RvckNvbmZpZyBpbnRvIG9wdGltYWwtc2VsZWN0IG9wdGlvbnNcbiAqIEBwYXJhbSB7U2VsZWN0b3JDb25maWd9IHNlbGVjdG9yQ29uZmlnXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCBjb25maWdUb09wdGlvbnMgPSBzZWxlY3RvckNvbmZpZyA9PiAoe1xuICByb290OiBkb2N1bWVudCxcbiAgLy8gZGVmaW5lIG9yZGVyIG9mIGF0dHJpYnV0ZSBwcm9jZXNzaW5nXG4gIHByaW9yaXR5OiBbJ2lkJywgJ2NsYXNzJ10sXG4gIC8vIHNwZWNpZnkgd2hpY2ggYXR0cmlidXRlcyB0byBpZ25vcmVcbiAgaWdub3JlOiB7XG4gICAgaWQ6IGlnbm9yZUlkRm4uYmluZCh0aGlzLCBzZWxlY3RvckNvbmZpZyksXG4gICAgY2xhc3M6IGlnbm9yZUNsYXNzRm4uYmluZCh0aGlzLCBzZWxlY3RvckNvbmZpZyksXG4gICAgdGFnOiBpZ25vcmVUYWdGbi5iaW5kKHRoaXMsIHNlbGVjdG9yQ29uZmlnKSxcbiAgICBhdHRyaWJ1dGU6IGlnbm9yZUF0dHJpYnV0ZUZuLmJpbmQodGhpcywgc2VsZWN0b3JDb25maWcpLFxuICB9LFxuICBleGNsdWRlOiB7XG4gICAgY2xhc3NOYW1lOiBleGNsdWRlQ2xhc3NGbi5iaW5kKHRoaXMsIHNlbGVjdG9yQ29uZmlnKSxcbiAgfVxufSk7XG5cbi8qKlxuICogRGVjaWRlcyBpZiBpZHMgc2hvdWxkIGJlIHVzZWQgaW4gc2VsZWN0b3IgZ2VuZXJhdGlvblxuICogQHBhcmFtIHtTZWxlY3RvckNvbmZpZ30gc2VsZWN0b3JDb25maWdcbiAqIEBwYXJhbSB7c3RyaW5nfSBhXG4gKiBAcGFyYW0ge3N0cmluZ30gaWROYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpZ25vcmVJZEZuKHNlbGVjdG9yQ29uZmlnLCBhLCBpZE5hbWUpIHtcbiAgaWYgKHNlbGVjdG9yQ29uZmlnLmlzQWxsb3dJZHMoKSkge1xuICAgIGlmIChpc1NlbGVjdG9yUmFuZG9tbHlHZW5lcmF0ZWQoaWROYW1lKSAmJiBzZWxlY3RvckNvbmZpZy5pc0V4Y2x1ZGluZ1JhbmRvbVNlbGVjdG9ycygpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZm9yYmlkZGVuU3Vic3RyaW5ncyA9IHNlbGVjdG9yQ29uZmlnLmdldEZvcmJpZGRlbklkU3Vic3RyaW5ncygpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb3JiaWRkZW5TdWJzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaWROYW1lLmluY2x1ZGVzKGZvcmJpZGRlblN1YnN0cmluZ3NbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyBpZ25vcmUgaWQgbmFtZSB3aXRoIGZvcmJpZGRlbiBzdWJzdHJpbmdcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7IC8vIGFsbG93IGFsbCBpZHMgdGhhdCByZWFjaGVkIHRoaXMgcG9pbnRcbiAgfVxuXG4gIHJldHVybiB0cnVlOyAvLyBpZ25vcmUgYWxsIGlkc1xufVxuXG4vKipcbiAqIERlY2lkZXMgaWYgY2xhc3NlcyBzaG91bGQgYmUgdXNlZCBpbiBzZWxlY3RvciBnZW5lcmF0aW9uXG4gKiBAcGFyYW0ge1NlbGVjdG9yQ29uZmlnfSBzZWxlY3RvckNvbmZpZ1xuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlnbm9yZUNsYXNzRm4oc2VsZWN0b3JDb25maWcsIGEsIGNsYXNzTmFtZSkge1xuICBpZiAoY2xhc3NOYW1lICYmIHNlbGVjdG9yQ29uZmlnLmlzQWxsb3dDbGFzc2VzKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7IC8vIGFsbG93IGFsbCBjbGFzc2VzXG4gIH1cblxuICByZXR1cm4gdHJ1ZTsgLy8gaWdub3JlIGFsbCBjbGFzc2VzXG59XG5cbi8qKlxuICogRGVjaWRlcyBpZiB0YWdzIHNob3VsZCBiZSB1c2VkIGluIHNlbGVjdG9yIGdlbmVyYXRpb25cbiAqIEBwYXJhbSB7U2VsZWN0b3JDb25maWd9IHNlbGVjdG9yQ29uZmlnXG4gKiBAcGFyYW0ge3N0cmluZ30gYVxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlnbm9yZVRhZ0ZuKHNlbGVjdG9yQ29uZmlnLCBhLCB0YWdOYW1lKSB7XG4gIGlmIChzZWxlY3RvckNvbmZpZy5pc0FsbG93VGFncygpKSB7XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBhbGxvdyBhbGwgdGFnc1xuICB9XG5cbiAgcmV0dXJuIHRydWU7IC8vIGlnbm9yZSBhbGwgdGFnc1xufVxuXG4vKipcbiAqIERlY2lkZXMgaWYgYXR0cmlidXRlcyBzaG91bGQgYmUgdXNlZCBpbiBzZWxlY3RvciBnZW5lcmF0aW9uXG4gKiBAcGFyYW0ge1NlbGVjdG9yQ29uZmlnfSBzZWxlY3RvckNvbmZpZ1xuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZU5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVWYWx1ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGVmYXVsdFByZWRpY2F0ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaWdub3JlQXR0cmlidXRlRm4oXG4gIHNlbGVjdG9yQ29uZmlnLFxuICBhdHRyaWJ1dGVOYW1lLFxuICBhdHRyaWJ1dGVWYWx1ZSxcbiAgZGVmYXVsdFByZWRpY2F0ZVxuKSB7XG4gIGlmIChzZWxlY3RvckNvbmZpZy5pc0FsbG93QXR0cmlidXRlcygpKSB7XG4gICAgaWYgKChcbiAgICAgICAgaXNTZWxlY3RvclJhbmRvbWx5R2VuZXJhdGVkKGF0dHJpYnV0ZU5hbWUpIHx8XG4gICAgICAgIGlzU2VsZWN0b3JSYW5kb21seUdlbmVyYXRlZChhdHRyaWJ1dGVWYWx1ZSlcbiAgICAgICkgJiZcbiAgICAgIHNlbGVjdG9yQ29uZmlnLmlzRXhjbHVkaW5nUmFuZG9tU2VsZWN0b3JzKClcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBmb3JiaWRkZW5TdWJzdHJpbmdzID0gc2VsZWN0b3JDb25maWcuZ2V0Rm9yYmlkZGVuQXR0cmlidXRlU3Vic3RyaW5ncygpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb3JiaWRkZW5TdWJzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXR0cmlidXRlTmFtZS5pbmNsdWRlcyhmb3JiaWRkZW5TdWJzdHJpbmdzW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbGxvdyBkZWZhdWx0IGF0dHJpYnV0ZXNcbiAgICByZXR1cm4gZGVmYXVsdFByZWRpY2F0ZShhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTsgLy8gaWdub3JlIGFsbCBhdHRyaWJ1dGVzXG59XG5cbi8qKlxuICogRGVjaWRlcyBpZiBhIGNsYXNzTmFtZSBzaG91bGQgYmUgZXhjbHVkZWRcbiAqIEBwYXJhbSB7U2VsZWN0b3JDb25maWd9IHNlbGVjdG9yQ29uZmlnXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBleGNsdWRlQ2xhc3NGbihzZWxlY3RvckNvbmZpZywgY2xhc3NOYW1lKSB7XG4gIGlmIChjbGFzc05hbWUubGVuZ3RoID4gMzApIHtcbiAgICByZXR1cm4gdHJ1ZTsgLy8gaWdub3JlIGxvbmcgY2xhc3Nlc1xuICB9XG5cbiAgaWYgKGlzU2VsZWN0b3JSYW5kb21seUdlbmVyYXRlZChjbGFzc05hbWUpICYmIHNlbGVjdG9yQ29uZmlnLmlzRXhjbHVkaW5nUmFuZG9tU2VsZWN0b3JzKCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IGZvcmJpZGRlblN1YnN0cmluZ3MgPSBzZWxlY3RvckNvbmZpZy5nZXRGb3JiaWRkZW5DbGFzc1N1YnN0cmluZ3MoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcmJpZGRlblN1YnN0cmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY2xhc3NOYW1lLmluY2x1ZGVzKGZvcmJpZGRlblN1YnN0cmluZ3NbaV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTsgLy8gaWdub3JlIGNsYXNzIG5hbWUgd2l0aCBmb3JiaWRkZW4gc3Vic3RyaW5nXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlOyAvLyBkb24ndCBleGNsdWRlIGNsYXNzZXMgd2hvIHJlYWNoZWQgdW50aWwgaGVyZVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbmZpZ1RvT3B0aW9uc1xufTtcbiJdLCJmaWxlIjoic2VsZWN0b3ItZ2VuZXJhdGlvbi9wcm9kdWNlLXNlbGVjdG9yL29wdGlvbnMtY29udmVydGVyLmpzIn0=
