"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.configToOptions = void 0;

var _relevanceHelper = require("./relevance-helper");

var _this = void 0;

/**
 * Transforms aSelectorConfig into optimal-select options
 * @param {SelectorConfig} selectorConfig
 * @return {Object}
 */
var configToOptions = function configToOptions(selectorConfig) {
  return {
    root: document,
    // define order of attribute processing
    priority: ['id', 'class'],
    // specify which attributes to ignore
    ignore: {
      id: ignoreIdFn.bind(_this, selectorConfig),
      "class": ignoreClassFn.bind(_this, selectorConfig),
      tag: ignoreTagFn.bind(_this, selectorConfig),
      attribute: ignoreAttributeFn.bind(_this, selectorConfig)
    },
    exclude: {
      className: excludeClassFn.bind(_this, selectorConfig)
    }
  };
};
/**
 * Decides if ids should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} a
 * @param {string} idName
 * @return {boolean}
 */


exports.configToOptions = configToOptions;

function ignoreIdFn(selectorConfig, a, idName) {
  if (selectorConfig.isAllowIds()) {
    if ((0, _relevanceHelper.isSelectorRandomlyGenerated)(idName) && selectorConfig.isExcludingRandomSelectors()) {
      return true;
    }

    var forbiddenSubstrings = selectorConfig.getForbiddenIdSubstrings();

    for (var i = 0; i < forbiddenSubstrings.length; i++) {
      if (idName.includes(forbiddenSubstrings[i])) {
        return true; // ignore id name with forbidden substring
      }
    }

    return false; // allow all ids that reached this point
  }

  return true; // ignore all ids
}
/**
 * Decides if classes should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} a
 * @param {string} className
 * @return {boolean}
 */


function ignoreClassFn(selectorConfig, a, className) {
  if (className && selectorConfig.isAllowClasses()) {
    if (className.length > 30) {
      return true; // ignore long classes
    } // if (isSelectorRandomlyGenerated(className) && selectorConfig.isExcludingRandomSelectors()) {
    //   return true;
    // }
    // const forbiddenSubstrings = selectorConfig.getForbiddenClassSubstrings();
    // for (let i = 0; i < forbiddenSubstrings.length; i++) {
    //   if (className.includes(forbiddenSubstrings[i])) {
    //     return true; // ignore class name with forbidden substring
    //   }
    // }


    return false; // don't ignore classes who reached until here
  }

  return true; // ignore all classes
}
/**
 * Decides if tags should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} a
 * @param {string} tagName
 * @return {boolean}
 */


function ignoreTagFn(selectorConfig, a, tagName) {
  if (selectorConfig.isAllowTags()) {
    return false; // allow all tags
  }

  return true; // ignore all tags
}
/**
 * Decides if attributes should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} attributeName
 * @param {string} attributeValue
 * @param {Function} defaultPredicate
 * @return {boolean}
 */


function ignoreAttributeFn(selectorConfig, attributeName, attributeValue, defaultPredicate) {
  if (selectorConfig.isAllowAttributes()) {
    if (((0, _relevanceHelper.isSelectorRandomlyGenerated)(attributeName) || (0, _relevanceHelper.isSelectorRandomlyGenerated)(attributeValue)) && selectorConfig.isExcludingRandomSelectors()) {
      return true;
    }

    var forbiddenSubstrings = selectorConfig.getForbiddenAttributeSubstrings();

    for (var i = 0; i < forbiddenSubstrings.length; i++) {
      if (attributeName.includes(forbiddenSubstrings[i])) {
        return true;
      }
    } // allow default attributes


    return defaultPredicate(attributeName, attributeValue);
  }

  return true; // ignore all attributes
}
/**
 * Decides if a className should be excluded
 * @param {SelectorConfig} selectorConfig
 * @param {string} className
 * @return {boolean}
 */


function excludeClassFn(selectorConfig, className) {
  if ((0, _relevanceHelper.isSelectorRandomlyGenerated)(className) && selectorConfig.isExcludingRandomSelectors()) {
    return true;
  }

  var forbiddenSubstrings = selectorConfig.getForbiddenClassSubstrings();

  for (var i = 0; i < forbiddenSubstrings.length; i++) {
    if (className.includes(forbiddenSubstrings[i])) {
      return true; // ignore class name with forbidden substring
    }
  }

  return false; // don't exclude classes who reached until here
}

var _default = {
  configToOptions: configToOptions
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9vcHRpb25zLWNvbnZlcnRlci5qcyJdLCJuYW1lcyI6WyJjb25maWdUb09wdGlvbnMiLCJzZWxlY3RvckNvbmZpZyIsInJvb3QiLCJkb2N1bWVudCIsInByaW9yaXR5IiwiaWdub3JlIiwiaWQiLCJpZ25vcmVJZEZuIiwiYmluZCIsImlnbm9yZUNsYXNzRm4iLCJ0YWciLCJpZ25vcmVUYWdGbiIsImF0dHJpYnV0ZSIsImlnbm9yZUF0dHJpYnV0ZUZuIiwiZXhjbHVkZSIsImNsYXNzTmFtZSIsImV4Y2x1ZGVDbGFzc0ZuIiwiYSIsImlkTmFtZSIsImlzQWxsb3dJZHMiLCJpc0V4Y2x1ZGluZ1JhbmRvbVNlbGVjdG9ycyIsImZvcmJpZGRlblN1YnN0cmluZ3MiLCJnZXRGb3JiaWRkZW5JZFN1YnN0cmluZ3MiLCJpIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJpc0FsbG93Q2xhc3NlcyIsInRhZ05hbWUiLCJpc0FsbG93VGFncyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVWYWx1ZSIsImRlZmF1bHRQcmVkaWNhdGUiLCJpc0FsbG93QXR0cmlidXRlcyIsImdldEZvcmJpZGRlbkF0dHJpYnV0ZVN1YnN0cmluZ3MiLCJnZXRGb3JiaWRkZW5DbGFzc1N1YnN0cmluZ3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBOzs7OztBQUtPLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQUMsY0FBYztBQUFBLFNBQUs7QUFDaERDLElBQUFBLElBQUksRUFBRUMsUUFEMEM7QUFFaEQ7QUFDQUMsSUFBQUEsUUFBUSxFQUFFLENBQUMsSUFBRCxFQUFPLE9BQVAsQ0FIc0M7QUFJaEQ7QUFDQUMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLEVBQUUsRUFBRUMsVUFBVSxDQUFDQyxJQUFYLENBQWdCLEtBQWhCLEVBQXNCUCxjQUF0QixDQURFO0FBRU4sZUFBT1EsYUFBYSxDQUFDRCxJ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QyxDQWlCdEM7OztBQUNBLFdBQU9RLGdCQUFnQixDQUFDRixhQUFELEVBQWdCQyxjQUFoQixDQUF2QjtBQUNEOztBQUVELFNBQU8sSUFBUCxDQXRCQSxDQXNCYTtBQUNkO0FBRUQ7Ozs7Ozs7O0FBTUEsU0FBU2QsY0FBVCxDQUF3QmYsY0FBeEIsRUFBd0NjLFNBQXhDLEVBQW1EO0FBQ2pELE1BQUksa0RBQTRCQSxTQUE1QixLQUEwQ2QsY0FBYyxDQUFDbUIsMEJBQWYsRUFBOUMsRUFBMkY7QUFDekYsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0QsTUFBTUMsbUJBQW1CLEdBQUdwQixjQUFjLENBQUNpQywyQkFBZixFQUE1Qjs7QUFFQSxPQUFLLElBQUlYLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLG1CQUFtQixDQUFDRyxNQUF4QyxFQUFnREQsQ0FBQyxFQUFqRCxFQUFxRDtBQUNuRCxRQUFJUixTQUFTLENBQUNVLFFBQVYsQ0FBbUJKLG1CQUFtQixDQUFDRSxDQUFELENBQXRDLENBQUosRUFBZ0Q7QUFDOUMsYUFBTyxJQUFQLENBRDhDLENBQ2pDO0FBQ2Q7QUFDRjs7QUFFRCxTQUFPLEtBQVAsQ0FaaUQsQ0FZbkM7QUFDZjs7ZUFFYztBQUNidkIsRUFBQUEsZUFBZSxFQUFmQTtBQURhLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1NlbGVjdG9yUmFuZG9tbHlHZW5lcmF0ZWQgfSBmcm9tICcuL3JlbGV2YW5jZS1oZWxwZXInO1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgYVNlbGVjdG9yQ29uZmlnIGludG8gb3B0aW1hbC1zZWxlY3Qgb3B0aW9uc1xuICogQHBhcmFtIHtTZWxlY3RvckNvbmZpZ30gc2VsZWN0b3JDb25maWdcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbmZpZ1RvT3B0aW9ucyA9IHNlbGVjdG9yQ29uZmlnID0+ICh7XG4gIHJvb3Q6IGRvY3VtZW50LFxuICAvLyBkZWZpbmUgb3JkZXIgb2YgYXR0cmlidXRlIHByb2Nlc3NpbmdcbiAgcHJpb3JpdHk6IFsnaWQnLCAnY2xhc3MnXSxcbiAgLy8gc3BlY2lmeSB3aGljaCBhdHRyaWJ1dGVzIHRvIGlnbm9yZVxuICBpZ25vcmU6IHtcbiAgICBpZDogaWdub3JlSWRGbi5iaW5kKHRoaXMsIHNlbGVjdG9yQ29uZmlnKSxcbiAgICBjbGFzczogaWdub3JlQ2xhc3NGbi5iaW5kKHRoaXMsIHNlbGVjdG9yQ29uZmlnKSxcbiAgICB0YWc6IGlnbm9yZVRhZ0ZuLmJpbmQodGhpcywgc2VsZWN0b3JDb25maWcpLFxuICAgIGF0dHJpYnV0ZTogaWdub3JlQXR0cmlidXRlRm4uYmluZCh0aGlzLCBzZWxlY3RvckNvbmZpZyksXG4gIH0sXG4gIGV4Y2x1ZGU6IHtcbiAgICBjbGFzc05hbWU6IGV4Y2x1ZGVDbGFzc0ZuLmJpbmQodGhpcywgc2VsZWN0b3JDb25maWcpLFxuICB9XG59KTtcblxuLyoqXG4gKiBEZWNpZGVzIGlmIGlkcyBzaG91bGQgYmUgdXNlZCBpbiBzZWxlY3RvciBnZW5lcmF0aW9uXG4gKiBAcGFyYW0ge1NlbGVjdG9yQ29uZmlnfSBzZWxlY3RvckNvbmZpZ1xuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZE5hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlnbm9yZUlkRm4oc2VsZWN0b3JDb25maWcsIGEsIGlkTmFtZSkge1xuICBpZiAoc2VsZWN0b3JDb25maWcuaXNBbGxvd0lkcygpKSB7XG4gICAgaWYgKGlzU2VsZWN0b3JSYW5kb21seUdlbmVyYXRlZChpZE5hbWUpICYmIHNlbGVjdG9yQ29uZmlnLmlzRXhjbHVkaW5nUmFuZG9tU2VsZWN0b3JzKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBmb3JiaWRkZW5TdWJzdHJpbmdzID0gc2VsZWN0b3JDb25maWcuZ2V0Rm9yYmlkZGVuSWRTdWJzdHJpbmdzKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcmJpZGRlblN1YnN0cmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpZE5hbWUuaW5jbHVkZXMoZm9yYmlkZGVuU3Vic3RyaW5nc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIGlnbm9yZSBpZCBuYW1lIHdpdGggZm9yYmlkZGVuIHN1YnN0cmluZ1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTsgLy8gYWxsb3cgYWxsIGlkcyB0aGF0IHJlYWNoZWQgdGhpcyBwb2ludFxuICB9XG5cbiAgcmV0dXJuIHRydWU7IC8vIGlnbm9yZSBhbGwgaWRzXG59XG5cbi8qKlxuICogRGVjaWRlcyBpZiBjbGFzc2VzIHNob3VsZCBiZSB1c2VkIGluIHNlbGVjdG9yIGdlbmVyYXRpb25cbiAqIEBwYXJhbSB7U2VsZWN0b3JDb25maWd9IHNlbGVjdG9yQ29uZmlnXG4gKiBAcGFyYW0ge3N0cmluZ30gYVxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaWdub3JlQ2xhc3NGbihzZWxlY3RvckNvbmZpZywgYSwgY2xhc3NOYW1lKSB7XG4gIGlmIChjbGFzc05hbWUgJiYgc2VsZWN0b3JDb25maWcuaXNBbGxvd0NsYXNzZXMoKSkge1xuICAgIGlmIChjbGFzc05hbWUubGVuZ3RoID4gMzApIHtcbiAgICAgIHJldHVybiB0cnVlOyAvLyBpZ25vcmUgbG9uZyBjbGFzc2VzXG4gICAgfVxuICAgIC8vIGlmIChpc1NlbGVjdG9yUmFuZG9tbHlHZW5lcmF0ZWQoY2xhc3NOYW1lKSAmJiBzZWxlY3RvckNvbmZpZy5pc0V4Y2x1ZGluZ1JhbmRvbVNlbGVjdG9ycygpKSB7XG4gICAgLy8gICByZXR1cm4gdHJ1ZTtcbiAgICAvLyB9XG4gICAgLy8gY29uc3QgZm9yYmlkZGVuU3Vic3RyaW5ncyA9IHNlbGVjdG9yQ29uZmlnLmdldEZvcmJpZGRlbkNsYXNzU3Vic3RyaW5ncygpO1xuXG4gICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBmb3JiaWRkZW5TdWJzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gICBpZiAoY2xhc3NOYW1lLmluY2x1ZGVzKGZvcmJpZGRlblN1YnN0cmluZ3NbaV0pKSB7XG4gICAgLy8gICAgIHJldHVybiB0cnVlOyAvLyBpZ25vcmUgY2xhc3MgbmFtZSB3aXRoIGZvcmJpZGRlbiBzdWJzdHJpbmdcbiAgICAvLyAgIH1cbiAgICAvLyB9XG5cbiAgICByZXR1cm4gZmFsc2U7IC8vIGRvbid0IGlnbm9yZSBjbGFzc2VzIHdobyByZWFjaGVkIHVudGlsIGhlcmVcbiAgfVxuXG4gIHJldHVybiB0cnVlOyAvLyBpZ25vcmUgYWxsIGNsYXNzZXNcbn1cblxuLyoqXG4gKiBEZWNpZGVzIGlmIHRhZ3Mgc2hvdWxkIGJlIHVzZWQgaW4gc2VsZWN0b3IgZ2VuZXJhdGlvblxuICogQHBhcmFtIHtTZWxlY3RvckNvbmZpZ30gc2VsZWN0b3JDb25maWdcbiAqIEBwYXJhbSB7c3RyaW5nfSBhXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaWdub3JlVGFnRm4oc2VsZWN0b3JDb25maWcsIGEsIHRhZ05hbWUpIHtcbiAgaWYgKHNlbGVjdG9yQ29uZmlnLmlzQWxsb3dUYWdzKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7IC8vIGFsbG93IGFsbCB0YWdzXG4gIH1cblxuICByZXR1cm4gdHJ1ZTsgLy8gaWdub3JlIGFsbCB0YWdzXG59XG5cbi8qKlxuICogRGVjaWRlcyBpZiBhdHRyaWJ1dGVzIHNob3VsZCBiZSB1c2VkIGluIHNlbGVjdG9yIGdlbmVyYXRpb25cbiAqIEBwYXJhbSB7U2VsZWN0b3JDb25maWd9IHNlbGVjdG9yQ29uZmlnXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlTmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVZhbHVlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkZWZhdWx0UHJlZGljYXRlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpZ25vcmVBdHRyaWJ1dGVGbihcbiAgc2VsZWN0b3JDb25maWcsXG4gIGF0dHJpYnV0ZU5hbWUsXG4gIGF0dHJpYnV0ZVZhbHVlLFxuICBkZWZhdWx0UHJlZGljYXRlXG4pIHtcbiAgaWYgKHNlbGVjdG9yQ29uZmlnLmlzQWxsb3dBdHRyaWJ1dGVzKCkpIHtcbiAgICBpZiAoKFxuICAgICAgICBpc1NlbGVjdG9yUmFuZG9tbHlHZW5lcmF0ZWQoYXR0cmlidXRlTmFtZSkgfHxcbiAgICAgICAgaXNTZWxlY3RvclJhbmRvbWx5R2VuZXJhdGVkKGF0dHJpYnV0ZVZhbHVlKVxuICAgICAgKSAmJlxuICAgICAgc2VsZWN0b3JDb25maWcuaXNFeGNsdWRpbmdSYW5kb21TZWxlY3RvcnMoKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGZvcmJpZGRlblN1YnN0cmluZ3MgPSBzZWxlY3RvckNvbmZpZy5nZXRGb3JiaWRkZW5BdHRyaWJ1dGVTdWJzdHJpbmdzKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcmJpZGRlblN1YnN0cmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhdHRyaWJ1dGVOYW1lLmluY2x1ZGVzKGZvcmJpZGRlblN1YnN0cmluZ3NbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFsbG93IGRlZmF1bHQgYXR0cmlidXRlc1xuICAgIHJldHVybiBkZWZhdWx0UHJlZGljYXRlKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlOyAvLyBpZ25vcmUgYWxsIGF0dHJpYnV0ZXNcbn1cblxuLyoqXG4gKiBEZWNpZGVzIGlmIGEgY2xhc3NOYW1lIHNob3VsZCBiZSBleGNsdWRlZFxuICogQHBhcmFtIHtTZWxlY3RvckNvbmZpZ30gc2VsZWN0b3JDb25maWdcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGV4Y2x1ZGVDbGFzc0ZuKHNlbGVjdG9yQ29uZmlnLCBjbGFzc05hbWUpIHtcbiAgaWYgKGlzU2VsZWN0b3JSYW5kb21seUdlbmVyYXRlZChjbGFzc05hbWUpICYmIHNlbGVjdG9yQ29uZmlnLmlzRXhjbHVkaW5nUmFuZG9tU2VsZWN0b3JzKCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBmb3JiaWRkZW5TdWJzdHJpbmdzID0gc2VsZWN0b3JDb25maWcuZ2V0Rm9yYmlkZGVuQ2xhc3NTdWJzdHJpbmdzKCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb3JiaWRkZW5TdWJzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNsYXNzTmFtZS5pbmNsdWRlcyhmb3JiaWRkZW5TdWJzdHJpbmdzW2ldKSkge1xuICAgICAgcmV0dXJuIHRydWU7IC8vIGlnbm9yZSBjbGFzcyBuYW1lIHdpdGggZm9yYmlkZGVuIHN1YnN0cmluZ1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTsgLy8gZG9uJ3QgZXhjbHVkZSBjbGFzc2VzIHdobyByZWFjaGVkIHVudGlsIGhlcmVcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb25maWdUb09wdGlvbnNcbn07XG4iXSwiZmlsZSI6InNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9vcHRpb25zLWNvbnZlcnRlci5qcyJ9
