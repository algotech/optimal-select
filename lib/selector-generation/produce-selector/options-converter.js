"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.configToOptions = void 0;

var _relevanceHelper = require("./relevance-helper");

var _this = void 0;

/**
 * Transforms aSelectorConfig into optimal-select options
 * @param {SelectorConfig} selectorConfig
 * @return {Object}
 */
var configToOptions = function configToOptions(selectorConfig) {
  return {
    root: document,
    // define order of attribute processing
    priority: ['id', 'class'],
    // specify which attributes to ignore
    ignore: {
      id: ignoreIdFn.bind(_this, selectorConfig),
      "class": ignoreClassFn.bind(_this, selectorConfig),
      tag: ignoreTagFn.bind(_this, selectorConfig),
      attribute: ignoreAttributeFn.bind(_this, selectorConfig)
    }
  };
};
/**
 * Decides if ids should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} a
 * @param {string} idName
 * @return {boolean}
 */


exports.configToOptions = configToOptions;

function ignoreIdFn(selectorConfig, a, idName) {
  if (selectorConfig.isAllowIds()) {
    if ((0, _relevanceHelper.isSelectorRandomlyGenerated)(idName) && selectorConfig.isExcludingRandomSelectors()) {
      return true;
    }

    return false; // allow all ids that reached this point
  }

  return true; // ignore all ids
}
/**
 * Decides if classes should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} a
 * @param {string} className
 * @return {boolean}
 */


function ignoreClassFn(selectorConfig, a, className) {
  if (className && selectorConfig.isAllowClasses()) {
    if (className.length > 30) {
      return true; // ignore long classes
    }

    if ((0, _relevanceHelper.isSelectorRandomlyGenerated)(className) && selectorConfig.isExcludingRandomSelectors()) {
      return true;
    }

    var forbiddenSubstrings = selectorConfig.getForbiddenClassSubstrings();

    for (var i = 0; i < forbiddenSubstrings.length; i++) {
      if (className.includes(forbiddenSubstrings[i])) {
        return true; // ignore class name with forbidden substring
      }
    }

    return false; // don't ignore classes who reached until here
  }

  return true; // ignore all classes
}
/**
 * Decides if tags should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} a
 * @param {string} tagName
 * @return {boolean}
 */


function ignoreTagFn(selectorConfig, a, tagName) {
  if (selectorConfig.isAllowTags()) {
    return false; // allow all tags
  }

  return true; // ignore all tags
}
/**
 * Decides if attributes should be used in selector generation
 * @param {SelectorConfig} selectorConfig
 * @param {string} attributeName
 * @param {string} attributeValue
 * @param {Function} defaultPredicate
 * @return {boolean}
 */


function ignoreAttributeFn(selectorConfig, attributeName, attributeValue, defaultPredicate) {
  if (selectorConfig.isAllowAttributes()) {
    if (((0, _relevanceHelper.isSelectorRandomlyGenerated)(attributeName) || (0, _relevanceHelper.isSelectorRandomlyGenerated)(attributeValue)) && selectorConfig.isExcludingRandomSelectors()) {
      return true;
    }

    var forbiddenSubstrings = selectorConfig.getForbiddenAttributeSubstrings();

    for (var i = 0; i < forbiddenSubstrings.length; i++) {
      if (attributeName.includes(forbiddenSubstrings[i])) {
        return true;
      }
    } // allow default attributes


    return defaultPredicate(attributeName, attributeValue);
  }

  return true; // ignore all attributes
}

var _default = {
  configToOptions: configToOptions
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
