"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSelectorRandomlyGenerated = isSelectorRandomlyGenerated;
exports["default"] = void 0;

/**
* Randomly generated selectors are the ones with at least 2 digits in a sequence
* of 5 characters. But numbers up to 12 are allowed so that bootstrap classes
* like col-md-12 are accepted
* @param {string} selector
* @return {boolean}
*/
function isSelectorRandomlyGenerated(selector) {
  var randomNumeral = !!(selector.match(/.*([0-9]{1}.{0,3}[0-9]{1}){1}.*/) && !selector.match(/.*\D+(1[0-2]){1}(\D{1}.*)?$/)); // check this options
  // - minimul 5 consonants in 6 consecutive characters (2c-1v-3c or 3c-1v-2c)
  // - minimum 4 consecutive consonants

  var noVowel = '[^aeiouy]';
  var vowel = '[aeiouy]';
  var cccVcc = new RegExp(".*".concat(noVowel).concat(noVowel).concat(noVowel).concat(vowel).concat(noVowel).concat(noVowel, ".*"), 'i');
  var ccVccc = new RegExp(".*".concat(noVowel).concat(noVowel).concat(vowel).concat(noVowel).concat(noVowel).concat(noVowel, ".*"), 'i');
  var fourConsecutiveVovels = new RegExp(".*".concat(noVowel).concat(noVowel).concat(noVowel).concat(noVowel, ".*"), 'i');
  var randomLiteral = !!selector.match(cccVcc) || !!selector.match(ccVccc) || !!selector.match(fourConsecutiveVovels);
  return randomNumeral || randomLiteral;
}

var _default = {
  isSelectorRandomlyGenerated: isSelectorRandomlyGenerated
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9yZWxldmFuY2UtaGVscGVyLmpzIl0sIm5hbWVzIjpbImlzU2VsZWN0b3JSYW5kb21seUdlbmVyYXRlZCIsInNlbGVjdG9yIiwicmFuZG9tTnVtZXJhbCIsIm1hdGNoIiwibm9Wb3dlbCIsInZvd2VsIiwiY2NjVmNjIiwiUmVnRXhwIiwiY2NWY2NjIiwiZm91ckNvbnNlY3V0aXZlVm92ZWxzIiwicmFuZG9tTGl0ZXJhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7OztBQU9PLFNBQVNBLDJCQUFULENBQXFDQyxRQUFyQyxFQUErQztBQUNwRCxNQUFJQyxhQUFhLEdBQUcsQ0FBQyxFQUFFRCxRQUFRLENBQUNFLEtBQVQsQ0FBZSxpQ0FBZixLQUNyQixDQUFDRixRQUFRLENBQUNFLEtBQVQsQ0FBZSw2QkFBZixDQURrQixDQUFyQixDQURvRCxDQUlwRDtBQUNBO0FBQ0E7O0FBQ0EsTUFBSUMsT0FBTyxHQUFHLFdBQWQ7QUFDQSxNQUFJQyxLQUFLLEdBQUcsVUFBWjtBQUNBLE1BQUlDLE1BQU0sR0FBRyxJQUFJQyxNQUFKLGFBQWdCSCxPQUFoQixTQUEwQkEsT0FBMUIsU0FBb0NBLE9BQXBDLFNBQThDQyxLQUE5QyxTQUFzREQsT0FBdEQsU0FBZ0VBLE9BQWhFLFNBQTZFLEdBQTdFLENBQWI7QUFDQSxNQUFJSSxNQUFNLEdBQUcsSUFBSUQsTUFBSixhQUFnQkgsT0FBaEIsU0FBMEJBLE9BQTFCLFNBQW9DQyxLQUFwQyxTQUE0Q0QsT0FBNUMsU0FBc0RBLE9BQXRELFNBQWdFQSxPQUFoRSxTQUE2RSxHQUE3RSxDQUFiO0FBQ0EsTUFBSUsscUJBQXFCLEdBQUcsSUFBSUYsTUFBSixhQUFnQkgsT0FBaEIsU0FBMEJBLE9BQTFCLFNBQW9DQSxPQUFwQyxTQUE4Q0EsT0FBOUMsU0FBMkQsR0FBM0QsQ0FBNUI7QUFFQSxNQUFJTSxhQUFhLEdBQUcsQ0FBQyxDQUFDVCxRQUFRLENBQUNFLEtBQVQsQ0FBZUcsTUFBZixDQUFGLElBQTRCLENBQUMsQ0FBQ0wsUUFBUSxDQUFDRSxLQUFULENBQWVLLE1BQWYsQ0FBOUIsSUFBd0QsQ0FBQyxDQUFDUCxRQUFRLENBQUNFLEtBQVQsQ0FBZU0scUJBQWYsQ0FBOUU7QUFFQSxTQUFPUCxhQUFhLElBQUlRLGFBQXhCO0FBQ0Q7O2VBRWM7QUFDYlYsRUFBQUEsMkJBQTJCLEVBQTNCQTtBQURhLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogUmFuZG9tbHkgZ2VuZXJhdGVkIHNlbGVjdG9ycyBhcmUgdGhlIG9uZXMgd2l0aCBhdCBsZWFzdCAyIGRpZ2l0cyBpbiBhIHNlcXVlbmNlXG4qIG9mIDUgY2hhcmFjdGVycy4gQnV0IG51bWJlcnMgdXAgdG8gMTIgYXJlIGFsbG93ZWQgc28gdGhhdCBib290c3RyYXAgY2xhc3Nlc1xuKiBsaWtlIGNvbC1tZC0xMiBhcmUgYWNjZXB0ZWRcbiogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4qIEByZXR1cm4ge2Jvb2xlYW59XG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2VsZWN0b3JSYW5kb21seUdlbmVyYXRlZChzZWxlY3Rvcikge1xuICB2YXIgcmFuZG9tTnVtZXJhbCA9ICEhKHNlbGVjdG9yLm1hdGNoKC8uKihbMC05XXsxfS57MCwzfVswLTldezF9KXsxfS4qLykgJiZcbiAgICAhc2VsZWN0b3IubWF0Y2goLy4qXFxEKygxWzAtMl0pezF9KFxcRHsxfS4qKT8kLykpO1xuXG4gIC8vIGNoZWNrIHRoaXMgb3B0aW9uc1xuICAvLyAtIG1pbmltdWwgNSBjb25zb25hbnRzIGluIDYgY29uc2VjdXRpdmUgY2hhcmFjdGVycyAoMmMtMXYtM2Mgb3IgM2MtMXYtMmMpXG4gIC8vIC0gbWluaW11bSA0IGNvbnNlY3V0aXZlIGNvbnNvbmFudHNcbiAgdmFyIG5vVm93ZWwgPSAnW15hZWlvdXldJztcbiAgdmFyIHZvd2VsID0gJ1thZWlvdXldJztcbiAgdmFyIGNjY1ZjYyA9IG5ldyBSZWdFeHAoYC4qJHtub1Zvd2VsfSR7bm9Wb3dlbH0ke25vVm93ZWx9JHt2b3dlbH0ke25vVm93ZWx9JHtub1Zvd2VsfS4qYCwgJ2knKTtcbiAgdmFyIGNjVmNjYyA9IG5ldyBSZWdFeHAoYC4qJHtub1Zvd2VsfSR7bm9Wb3dlbH0ke3Zvd2VsfSR7bm9Wb3dlbH0ke25vVm93ZWx9JHtub1Zvd2VsfS4qYCwgJ2knKTtcbiAgdmFyIGZvdXJDb25zZWN1dGl2ZVZvdmVscyA9IG5ldyBSZWdFeHAoYC4qJHtub1Zvd2VsfSR7bm9Wb3dlbH0ke25vVm93ZWx9JHtub1Zvd2VsfS4qYCwgJ2knKTtcblxuICB2YXIgcmFuZG9tTGl0ZXJhbCA9ICEhc2VsZWN0b3IubWF0Y2goY2NjVmNjKSB8fCAhIXNlbGVjdG9yLm1hdGNoKGNjVmNjYykgfHwgISFzZWxlY3Rvci5tYXRjaChmb3VyQ29uc2VjdXRpdmVWb3ZlbHMpO1xuXG4gIHJldHVybiByYW5kb21OdW1lcmFsIHx8IHJhbmRvbUxpdGVyYWw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNTZWxlY3RvclJhbmRvbWx5R2VuZXJhdGVkXG59O1xuIl0sImZpbGUiOiJzZWxlY3Rvci1nZW5lcmF0aW9uL3Byb2R1Y2Utc2VsZWN0b3IvcmVsZXZhbmNlLWhlbHBlci5qcyJ9
