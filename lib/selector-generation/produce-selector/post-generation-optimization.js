"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shortenSelectorByShifting = shortenSelectorByShifting;

/**
* Tries to shorten the selector if possible, starting from left
* @param {String} initialSelector The generated selector to be improved
* @param {Object} root            Document root where to search for element
* @param {JQuery} $element        The element to find a shorter selector for
* @param {Boolean} [isCalledByRunner]
*/
function shortenSelectorByShifting(initialSelector, root, $element, isCalledByRunner) {
  var shorterSelector = initialSelector.split(' ');
  var lastShifted = '';

  while (isSelectorValid(shorterSelector.join(' ')) && isSelectorUnique(root, shorterSelector, $element, isCalledByRunner)) {
    lastShifted = shorterSelector.shift();

    if (['>', '+', '~'].includes(shorterSelector[0])) {
      lastShifted += ' ' + shorterSelector.shift();
    }
  }

  var improvedSelector = "".concat(lastShifted, " ").concat(shorterSelector.join(' '));
  return improvedSelector.length < initialSelector.length ? improvedSelector : null;
}
/**
 * Checks if the provided selector matches only the desired element
 * @param {Object}  root         Document root where to search for element
 * @param {String}  selector     The generated selector to be improved
 * @param {JQuery}  $element     The element to check with the selector
 * @param {Boolean} [isCalledByRunner]
 */


var isSelectorUnique = function isSelectorUnique(root, selector, $element, isCalledByRunner) {
  return isCalledByRunner ? root.querySelector(selector.join(' ')) === $element && root.querySelectorAll(selector.join(' ')).length === 1 : $(root).find(selector.join(' ')).is($element) && $(root).find(selector.join(' ')).length == 1;
};
/**
* Checks if the selector is syntactically valid
* @param selector The selector to be checked
*/


function isSelectorValid(selector) {
  try {
    document.createDocumentFragment().querySelector(selector);
  } catch (e) {
    return false;
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9wb3N0LWdlbmVyYXRpb24tb3B0aW1pemF0aW9uLmpzIl0sIm5hbWVzIjpbInNob3J0ZW5TZWxlY3RvckJ5U2hpZnRpbmciLCJpbml0aWFsU2VsZWN0b3IiLCJyb290IiwiJGVsZW1lbnQiLCJpc0NhbGxlZEJ5UnVubmVyIiwic2hvcnRlclNlbGVjdG9yIiwic3BsaXQiLCJsYXN0U2hpZnRlZCIsImlzU2VsZWN0b3JWYWxpZCIsImpvaW4iLCJpc1NlbGVjdG9yVW5pcXVlIiwic2hpZnQiLCJpbmNsdWRlcyIsImltcHJvdmVkU2VsZWN0b3IiLCJsZW5ndGgiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiJCIsImZpbmQiLCJpcyIsImRvY3VtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7OztBQU9PLFNBQVNBLHlCQUFULENBQW1DQyxlQUFuQyxFQUFvREMsSUFBcEQsRUFBMERDLFFBQTFELEVBQW9FQyxnQkFBcEUsRUFBc0Y7QUFDM0YsTUFBSUMsZUFBZSxHQUFHSixlQUFlLENBQUNLLEtBQWhCLENBQXNCLEdBQXRCLENBQXRCO0FBQ0EsTUFBSUMsV0FBVyxHQUFHLEVBQWxCOztBQUVBLFNBQ0VDLGVBQWUsQ0FBQ0gsZUFBZSxDQUFDSSxJQUFoQixDQUFxQixHQUFyQixDQUFELENBQWYsSUFDQUMsZ0JBQWdCLENBQUNSLElBQUQsRUFBT0csZUFBUCxFQUF3QkYsUUFBeEIsRUFBa0NDLGdCQUFsQyxDQUZsQixFQUdFO0FBQ0FHLElBQUFBLFdBQVcsR0FBR0YsZUFBZSxDQUFDTSxLQUFoQixFQUFkOztBQUNBLFFBQUksQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0JDLFFBQWhCLENBQXlCUCxlQUFlLENBQUMsQ0FBRCxDQUF4QyxDQUFKLEVBQWtEO0FBQ2hERSxNQUFBQSxXQUFXLElBQUksTUFBTUYsZUFBZSxDQUFDTSxLQUFoQixFQUFyQjtBQUNEO0FBQ0Y7O0FBQ0QsTUFBTUUsZ0JBQWdCLGFBQU1OLFdBQU4sY0FBcUJGLGVBQWUsQ0FBQ0ksSUFBaEIsQ0FBcUIsR0FBckIsQ0FBckIsQ0FBdEI7QUFFQSxTQUFPSSxnQkFBZ0IsQ0FBQ0MsTUFBakIsR0FBMEJiLGVBQWUsQ0FBQ2EsTUFBMUMsR0FDTEQsZ0JBREssR0FFTCxJQUZGO0FBR0Q7QUFDRDs7Ozs7Ozs7O0FBT0EsSUFBTUgsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDUixJQUFELEVBQU9hLFFBQVAsRUFBaUJaLFFBQWpCLEVBQTJCQyxnQkFBM0I7QUFBQSxTQUN2QkEsZ0JBQWdCLEdBQ2RGLElBQUksQ0FBQ2MsYUFBTCxDQUFtQkQsUUFBUSxDQUFDTixJQUFULENBQWMsR0FBZCxDQUFuQixNQUEyQ04sUUFBM0MsSUFDQUQsSUFBSSxDQUFDZSxnQkFBTCxDQUFzQkYsUUFBUSxDQUFDTixJQUFULENBQWMsR0FBZCxDQUF0QixFQUEwQ0ssTUFBMUMsS0FBcUQsQ0FGdkMsR0FJZEksQ0FBQyxDQUFDaEIsSUFBRCxDQUFELENBQVFpQixJQUFSLENBQWFKLFFBQVEsQ0FBQ04sSUFBVCxDQUFjLEdBQWQsQ0FBYixFQUFpQ1csRUFBakMsQ0FBb0NqQixRQUFwQyxLQUNBZSxDQUFDLENBQUNoQixJQUFELENBQUQsQ0FBUWlCLElBQVIsQ0FBYUosUUFBUSxDQUFDTixJQUFULENBQWMsR0FBZCxDQUFiLEVBQWlDSyxNQUFqQyxJQUEyQyxDQU50QjtBQUFBLENBQXpCO0FBVUE7Ozs7OztBQUlBLFNBQVNOLGVBQVQsQ0FBeUJPLFFBQXpCLEVBQW1DO0FBQ2pDLE1BQUk7QUFDRk0sSUFBQUEsUUFBUSxDQUFDQyxzQkFBVCxHQUFrQ04sYUFBbEMsQ0FBZ0RELFFBQWhEO0FBQ0QsR0FGRCxDQUVFLE9BQU9RLENBQVAsRUFBVTtBQUNWLFdBQU8sS0FBUDtBQUNEOztBQUVELFNBQU8sSUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIFRyaWVzIHRvIHNob3J0ZW4gdGhlIHNlbGVjdG9yIGlmIHBvc3NpYmxlLCBzdGFydGluZyBmcm9tIGxlZnRcbiogQHBhcmFtIHtTdHJpbmd9IGluaXRpYWxTZWxlY3RvciBUaGUgZ2VuZXJhdGVkIHNlbGVjdG9yIHRvIGJlIGltcHJvdmVkXG4qIEBwYXJhbSB7T2JqZWN0fSByb290ICAgICAgICAgICAgRG9jdW1lbnQgcm9vdCB3aGVyZSB0byBzZWFyY2ggZm9yIGVsZW1lbnRcbiogQHBhcmFtIHtKUXVlcnl9ICRlbGVtZW50ICAgICAgICBUaGUgZWxlbWVudCB0byBmaW5kIGEgc2hvcnRlciBzZWxlY3RvciBmb3JcbiogQHBhcmFtIHtCb29sZWFufSBbaXNDYWxsZWRCeVJ1bm5lcl1cbiovXG5leHBvcnQgZnVuY3Rpb24gc2hvcnRlblNlbGVjdG9yQnlTaGlmdGluZyhpbml0aWFsU2VsZWN0b3IsIHJvb3QsICRlbGVtZW50LCBpc0NhbGxlZEJ5UnVubmVyKSB7XG4gIGxldCBzaG9ydGVyU2VsZWN0b3IgPSBpbml0aWFsU2VsZWN0b3Iuc3BsaXQoJyAnKTtcbiAgbGV0IGxhc3RTaGlmdGVkID0gJyc7XG5cbiAgd2hpbGUgKFxuICAgIGlzU2VsZWN0b3JWYWxpZChzaG9ydGVyU2VsZWN0b3Iuam9pbignICcpKSAmJlxuICAgIGlzU2VsZWN0b3JVbmlxdWUocm9vdCwgc2hvcnRlclNlbGVjdG9yLCAkZWxlbWVudCwgaXNDYWxsZWRCeVJ1bm5lcilcbiAgKSB7XG4gICAgbGFzdFNoaWZ0ZWQgPSBzaG9ydGVyU2VsZWN0b3Iuc2hpZnQoKTtcbiAgICBpZiAoWyc+JywgJysnLCAnfiddLmluY2x1ZGVzKHNob3J0ZXJTZWxlY3RvclswXSkpIHtcbiAgICAgIGxhc3RTaGlmdGVkICs9ICcgJyArIHNob3J0ZXJTZWxlY3Rvci5zaGlmdCgpO1xuICAgIH1cbiAgfVxuICBjb25zdCBpbXByb3ZlZFNlbGVjdG9yID0gYCR7bGFzdFNoaWZ0ZWR9ICR7c2hvcnRlclNlbGVjdG9yLmpvaW4oJyAnKX1gO1xuXG4gIHJldHVybiBpbXByb3ZlZFNlbGVjdG9yLmxlbmd0aCA8IGluaXRpYWxTZWxlY3Rvci5sZW5ndGggP1xuICAgIGltcHJvdmVkU2VsZWN0b3IgOlxuICAgIG51bGw7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgc2VsZWN0b3IgbWF0Y2hlcyBvbmx5IHRoZSBkZXNpcmVkIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSAgcm9vdCAgICAgICAgIERvY3VtZW50IHJvb3Qgd2hlcmUgdG8gc2VhcmNoIGZvciBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gIHNlbGVjdG9yICAgICBUaGUgZ2VuZXJhdGVkIHNlbGVjdG9yIHRvIGJlIGltcHJvdmVkXG4gKiBAcGFyYW0ge0pRdWVyeX0gICRlbGVtZW50ICAgICBUaGUgZWxlbWVudCB0byBjaGVjayB3aXRoIHRoZSBzZWxlY3RvclxuICogQHBhcmFtIHtCb29sZWFufSBbaXNDYWxsZWRCeVJ1bm5lcl1cbiAqL1xuY29uc3QgaXNTZWxlY3RvclVuaXF1ZSA9IChyb290LCBzZWxlY3RvciwgJGVsZW1lbnQsIGlzQ2FsbGVkQnlSdW5uZXIpID0+IChcbiAgaXNDYWxsZWRCeVJ1bm5lciA/IChcbiAgICByb290LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3Iuam9pbignICcpKSA9PT0gJGVsZW1lbnQgJiZcbiAgICByb290LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3Iuam9pbignICcpKS5sZW5ndGggPT09IDFcbiAgKSA6IChcbiAgICAkKHJvb3QpLmZpbmQoc2VsZWN0b3Iuam9pbignICcpKS5pcygkZWxlbWVudCkgJiZcbiAgICAkKHJvb3QpLmZpbmQoc2VsZWN0b3Iuam9pbignICcpKS5sZW5ndGggPT0gMVxuICApXG4pO1xuXG4vKipcbiogQ2hlY2tzIGlmIHRoZSBzZWxlY3RvciBpcyBzeW50YWN0aWNhbGx5IHZhbGlkXG4qIEBwYXJhbSBzZWxlY3RvciBUaGUgc2VsZWN0b3IgdG8gYmUgY2hlY2tlZFxuKi9cbmZ1bmN0aW9uIGlzU2VsZWN0b3JWYWxpZChzZWxlY3Rvcikge1xuICB0cnkge1xuICAgIGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuIl0sImZpbGUiOiJzZWxlY3Rvci1nZW5lcmF0aW9uL3Byb2R1Y2Utc2VsZWN0b3IvcG9zdC1nZW5lcmF0aW9uLW9wdGltaXphdGlvbi5qcyJ9
