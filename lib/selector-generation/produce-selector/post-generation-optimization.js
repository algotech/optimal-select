"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shortenSelectorByShifting = shortenSelectorByShifting;

/**
* Tries to shorten the selector if possible, starting from left
* @param {String} initialSelector The generated selector to be improved
* @param {Object} root            Document root where to search for element
* @param {Element} element        The element to find a shorter selector for
*/
function shortenSelectorByShifting(initialSelector, root, element) {
  var shorterSelector = initialSelector.split(' ');
  var lastShifted = '';

  while (isSelectorValid(shorterSelector.join(' ')) && isSelectorUnique(root, shorterSelector, element)) {
    lastShifted = shorterSelector.shift();

    if (['>', '+', '~'].includes(shorterSelector[0])) {
      lastShifted += ' ' + shorterSelector.shift();
    }
  }

  var improvedSelector = "".concat(lastShifted, " ").concat(shorterSelector.join(' '));
  return improvedSelector.length < initialSelector.length ? improvedSelector : null;
}
/**
 * Checks if the provided selector matches only the desired element
 * @param {Object}  root         Document root where to search for element
 * @param {String}  selector     The generated selector to be improved
 * @param {Element}  element     The element to check with the selector
 */


var isSelectorUnique = function isSelectorUnique(root, selector, element) {
  return root.querySelector(selector.join(' ')) === element && root.querySelectorAll(selector.join(' ')).length === 1;
};
/**
* Checks if the selector is syntactically valid
* @param selector The selector to be checked
*/


function isSelectorValid(selector) {
  try {
    document.createDocumentFragment().querySelector(selector);
  } catch (e) {
    return false;
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9wb3N0LWdlbmVyYXRpb24tb3B0aW1pemF0aW9uLmpzIl0sIm5hbWVzIjpbInNob3J0ZW5TZWxlY3RvckJ5U2hpZnRpbmciLCJpbml0aWFsU2VsZWN0b3IiLCJyb290IiwiZWxlbWVudCIsInNob3J0ZXJTZWxlY3RvciIsInNwbGl0IiwibGFzdFNoaWZ0ZWQiLCJpc1NlbGVjdG9yVmFsaWQiLCJqb2luIiwiaXNTZWxlY3RvclVuaXF1ZSIsInNoaWZ0IiwiaW5jbHVkZXMiLCJpbXByb3ZlZFNlbGVjdG9yIiwibGVuZ3RoIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImRvY3VtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0FBTU8sU0FBU0EseUJBQVQsQ0FBbUNDLGVBQW5DLEVBQW9EQyxJQUFwRCxFQUEwREMsT0FBMUQsRUFBbUU7QUFDeEUsTUFBSUMsZUFBZSxHQUFHSCxlQUFlLENBQUNJLEtBQWhCLENBQXNCLEdBQXRCLENBQXRCO0FBQ0EsTUFBSUMsV0FBVyxHQUFHLEVBQWxCOztBQUVBLFNBQ0VDLGVBQWUsQ0FBQ0gsZUFBZSxDQUFDSSxJQUFoQixDQUFxQixHQUFyQixDQUFELENBQWYsSUFDQUMsZ0JBQWdCLENBQUNQLElBQUQsRUFBT0UsZUFBUCxFQUF3QkQsT0FBeEIsQ0FGbEIsRUFHRTtBQUNBRyxJQUFBQSxXQUFXLEdBQUdGLGVBQWUsQ0FBQ00sS0FBaEIsRUFBZDs7QUFDQSxRQUFJLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCQyxRQUFoQixDQUF5QlAsZUFBZSxDQUFDLENBQUQsQ0FBeEMsQ0FBSixFQUFrRDtBQUNoREUsTUFBQUEsV0FBVyxJQUFJLE1BQU1GLGVBQWUsQ0FBQ00sS0FBaEIsRUFBckI7QUFDRDtBQUNGOztBQUNELE1BQU1FLGdCQUFnQixhQUFNTixXQUFOLGNBQXFCRixlQUFlLENBQUNJLElBQWhCLENBQXFCLEdBQXJCLENBQXJCLENBQXRCO0FBRUEsU0FBT0ksZ0JBQWdCLENBQUNDLE1BQWpCLEdBQTBCWixlQUFlLENBQUNZLE1BQTFDLEdBQ0xELGdCQURLLEdBRUwsSUFGRjtBQUdEO0FBQ0Q7Ozs7Ozs7O0FBTUEsSUFBTUgsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDUCxJQUFELEVBQU9ZLFFBQVAsRUFBaUJYLE9BQWpCO0FBQUEsU0FDdkJELElBQUksQ0FBQ2EsYUFBTCxDQUFtQkQsUUFBUSxDQUFDTixJQUFULENBQWMsR0FBZCxDQUFuQixNQUEyQ0wsT0FBM0MsSUFDQUQsSUFBSSxDQUFDYyxnQkFBTCxDQUFzQkYsUUFBUSxDQUFDTixJQUFULENBQWMsR0FBZCxDQUF0QixFQUEwQ0ssTUFBMUMsS0FBcUQsQ0FGOUI7QUFBQSxDQUF6QjtBQUtBOzs7Ozs7QUFJQSxTQUFTTixlQUFULENBQXlCTyxRQUF6QixFQUFtQztBQUNqQyxNQUFJO0FBQ0ZHLElBQUFBLFFBQVEsQ0FBQ0Msc0JBQVQsR0FBa0NILGFBQWxDLENBQWdERCxRQUFoRDtBQUNELEdBRkQsQ0FFRSxPQUFPSyxDQUFQLEVBQVU7QUFDVixXQUFPLEtBQVA7QUFDRDs7QUFFRCxTQUFPLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBUcmllcyB0byBzaG9ydGVuIHRoZSBzZWxlY3RvciBpZiBwb3NzaWJsZSwgc3RhcnRpbmcgZnJvbSBsZWZ0XG4qIEBwYXJhbSB7U3RyaW5nfSBpbml0aWFsU2VsZWN0b3IgVGhlIGdlbmVyYXRlZCBzZWxlY3RvciB0byBiZSBpbXByb3ZlZFxuKiBAcGFyYW0ge09iamVjdH0gcm9vdCAgICAgICAgICAgIERvY3VtZW50IHJvb3Qgd2hlcmUgdG8gc2VhcmNoIGZvciBlbGVtZW50XG4qIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAgICAgICAgVGhlIGVsZW1lbnQgdG8gZmluZCBhIHNob3J0ZXIgc2VsZWN0b3IgZm9yXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3J0ZW5TZWxlY3RvckJ5U2hpZnRpbmcoaW5pdGlhbFNlbGVjdG9yLCByb290LCBlbGVtZW50KSB7XG4gIGxldCBzaG9ydGVyU2VsZWN0b3IgPSBpbml0aWFsU2VsZWN0b3Iuc3BsaXQoJyAnKTtcbiAgbGV0IGxhc3RTaGlmdGVkID0gJyc7XG5cbiAgd2hpbGUgKFxuICAgIGlzU2VsZWN0b3JWYWxpZChzaG9ydGVyU2VsZWN0b3Iuam9pbignICcpKSAmJlxuICAgIGlzU2VsZWN0b3JVbmlxdWUocm9vdCwgc2hvcnRlclNlbGVjdG9yLCBlbGVtZW50KVxuICApIHtcbiAgICBsYXN0U2hpZnRlZCA9IHNob3J0ZXJTZWxlY3Rvci5zaGlmdCgpO1xuICAgIGlmIChbJz4nLCAnKycsICd+J10uaW5jbHVkZXMoc2hvcnRlclNlbGVjdG9yWzBdKSkge1xuICAgICAgbGFzdFNoaWZ0ZWQgKz0gJyAnICsgc2hvcnRlclNlbGVjdG9yLnNoaWZ0KCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGltcHJvdmVkU2VsZWN0b3IgPSBgJHtsYXN0U2hpZnRlZH0gJHtzaG9ydGVyU2VsZWN0b3Iuam9pbignICcpfWA7XG5cbiAgcmV0dXJuIGltcHJvdmVkU2VsZWN0b3IubGVuZ3RoIDwgaW5pdGlhbFNlbGVjdG9yLmxlbmd0aCA/XG4gICAgaW1wcm92ZWRTZWxlY3RvciA6XG4gICAgbnVsbDtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBwcm92aWRlZCBzZWxlY3RvciBtYXRjaGVzIG9ubHkgdGhlIGRlc2lyZWQgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9ICByb290ICAgICAgICAgRG9jdW1lbnQgcm9vdCB3aGVyZSB0byBzZWFyY2ggZm9yIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSAgc2VsZWN0b3IgICAgIFRoZSBnZW5lcmF0ZWQgc2VsZWN0b3IgdG8gYmUgaW1wcm92ZWRcbiAqIEBwYXJhbSB7RWxlbWVudH0gIGVsZW1lbnQgICAgIFRoZSBlbGVtZW50IHRvIGNoZWNrIHdpdGggdGhlIHNlbGVjdG9yXG4gKi9cbmNvbnN0IGlzU2VsZWN0b3JVbmlxdWUgPSAocm9vdCwgc2VsZWN0b3IsIGVsZW1lbnQpID0+IChcbiAgcm9vdC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yLmpvaW4oJyAnKSkgPT09IGVsZW1lbnQgJiZcbiAgcm9vdC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yLmpvaW4oJyAnKSkubGVuZ3RoID09PSAxXG4pO1xuXG4vKipcbiogQ2hlY2tzIGlmIHRoZSBzZWxlY3RvciBpcyBzeW50YWN0aWNhbGx5IHZhbGlkXG4qIEBwYXJhbSBzZWxlY3RvciBUaGUgc2VsZWN0b3IgdG8gYmUgY2hlY2tlZFxuKi9cbmZ1bmN0aW9uIGlzU2VsZWN0b3JWYWxpZChzZWxlY3Rvcikge1xuICB0cnkge1xuICAgIGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuIl0sImZpbGUiOiJzZWxlY3Rvci1nZW5lcmF0aW9uL3Byb2R1Y2Utc2VsZWN0b3IvcG9zdC1nZW5lcmF0aW9uLW9wdGltaXphdGlvbi5qcyJ9
