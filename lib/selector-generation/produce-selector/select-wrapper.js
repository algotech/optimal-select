"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _jquery = _interopRequireDefault(require("jquery"));

var _select = require("../../select");

var _selectorConfiguration = _interopRequireDefault(require("../selector-configuration"));

var _optionsConverter = require("./options-converter");

var _postGenerationOptimization = require("./post-generation-optimization");

var _exceptionsHelper = require("./exceptions-helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
  This is the fallback configuration of no configuration is supplied to
  produceSelector function.
 */
var defaultSelectorConfig = new _selectorConfiguration["default"]('Default Selector Configuration');
/**
 * Creates a selector for the provided element with the specifiec config
 * @param {JQuery} $element The element to create a selector for or {Element} if isCalledByRunner
 * @param {Object} [customPageDocument]
 * @param {SelectorConfig} [config]
 * @param {Function} [selectStrategy]
 * @param {Boolean} [isCalledByRunner]
 * @return {Object}
 */

function select($element, customPageDocument, config, selectStrategy, isCalledByRunner) {
  config = config || defaultSelectorConfig;
  selectStrategy = selectStrategy || _select.getSingleSelector;
  var selector = {
    $target: $element,
    success: true,
    hasError: false,
    hasWarning: false,
    value: null,
    errors: [],
    warnings: [],
    config: config
  };
  var options = (0, _optionsConverter.configToOptions)(config);

  try {
    // use custom document root if specified
    if (customPageDocument) {
      options.root = customPageDocument;
    }

    console.log('root', options.root, 'elem', $element); // produce the selector

    var untestedSelector = isCalledByRunner ? selectStrategy($element, options) : selectStrategy($element[0], options); // test the selector

    var isValid = isCalledByRunner ? options.root.querySelector(untestedSelector) === $element : (0, _jquery["default"])(options.root).find(untestedSelector).is($element);
    console.log('isValid', isValid);

    if (isValid) {
      var shorterSelector = (0, _postGenerationOptimization.shortenSelectorByShifting)(untestedSelector, options.root, $element, isCalledByRunner);
      console.log('shorterSel', shorterSelector, 'unt', untestedSelector);
      selector.value = shorterSelector || untestedSelector;
    } else {
      (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALIDATION_FAILED, {
        invalidatedSelector: untestedSelector,
        configComposition: config.getComposition(),
        expectedElement: $element[0] || $element,
        strategy: selectStrategy
      });
    }
  } catch (error) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.GENERATION_FAILED, {
      failedConfigComposition: config.getComposition(),
      error: error,
      strategy: selectStrategy
    });
  }

  if (!selector.value) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALUE_IS_MISSING, {
      foundValue: selector.value,
      strategy: selectStrategy
    });
  }

  selector.success = !selector.hasError;
  return selector;
}

var _default = select;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0U2VsZWN0b3JDb25maWciLCJTZWxlY3RvckNvbmZpZ3VyYXRpb24iLCJzZWxlY3QiLCIkZWxlbWVudCIsImN1c3RvbVBhZ2VEb2N1bWVudCIsImNvbmZpZyIsInNlbGVjdFN0cmF0ZWd5IiwiaXNDYWxsZWRCeVJ1bm5lciIsImdldFNpbmdsZVNlbGVjdG9yIiwic2VsZWN0b3IiLCIkdGFyZ2V0Iiwic3VjY2VzcyIsImhhc0Vycm9yIiwiaGFzV2FybmluZyIsInZhbHVlIiwiZXJyb3JzIiwid2FybmluZ3MiLCJvcHRpb25zIiwicm9vdCIsImNvbnNvbGUiLCJsb2ciLCJ1bnRlc3RlZFNlbGVjdG9yIiwiaXNWYWxpZCIsInF1ZXJ5U2VsZWN0b3IiLCJmaW5kIiwiaXMiLCJzaG9ydGVyU2VsZWN0b3IiLCJFUlJPUlMiLCJWQUxJREFUSU9OX0ZBSUxFRCIsImludmFsaWRhdGVkU2VsZWN0b3IiLCJjb25maWdDb21wb3NpdGlvbiIsImdldENvbXBvc2l0aW9uIiwiZXhwZWN0ZWRFbGVtZW50Iiwic3RyYXRlZ3kiLCJlcnJvciIsIkdFTkVSQVRJT05fRkFJTEVEIiwiZmFpbGVkQ29uZmlnQ29tcG9zaXRpb24iLCJWQUxVRV9JU19NSVNTSU5HIiwiZm91bmRWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7Ozs7QUFJQSxJQUFJQSxxQkFBcUIsR0FBRyxJQUFJQyxpQ0FBSixDQUMxQixnQ0FEMEIsQ0FBNUI7QUFJQTs7Ozs7Ozs7OztBQVNBLFNBQVNDLE1BQVQsQ0FDRUMsUUFERixFQUVFQyxrQkFGRixFQUdFQyxNQUhGLEVBSUVDLGNBSkYsRUFLRUMsZ0JBTEYsRUFNRTtBQUNBRixFQUFBQSxNQUFNLEdBQUdBLE1BQU0sSUFBSUwscUJBQW5CO0FBQ0FNLEVB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LFFBQVA7QUFDRDs7ZUFFY1AsTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCB7IGdldFNpbmdsZVNlbGVjdG9yIH0gZnJvbSAnLi4vLi4vc2VsZWN0JztcblxuaW1wb3J0IFNlbGVjdG9yQ29uZmlndXJhdGlvbiBmcm9tICcuLi9zZWxlY3Rvci1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IGNvbmZpZ1RvT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucy1jb252ZXJ0ZXInXG5pbXBvcnQgeyBzaG9ydGVuU2VsZWN0b3JCeVNoaWZ0aW5nIH0gZnJvbSAnLi9wb3N0LWdlbmVyYXRpb24tb3B0aW1pemF0aW9uJztcbmltcG9ydCB7IGFkZEVycm9yTWVzc2FnZSwgRVJST1JTIH0gZnJvbSAnLi9leGNlcHRpb25zLWhlbHBlcidcblxuLypcbiAgVGhpcyBpcyB0aGUgZmFsbGJhY2sgY29uZmlndXJhdGlvbiBvZiBubyBjb25maWd1cmF0aW9uIGlzIHN1cHBsaWVkIHRvXG4gIHByb2R1Y2VTZWxlY3RvciBmdW5jdGlvbi5cbiAqL1xubGV0IGRlZmF1bHRTZWxlY3RvckNvbmZpZyA9IG5ldyBTZWxlY3RvckNvbmZpZ3VyYXRpb24oXG4gICdEZWZhdWx0IFNlbGVjdG9yIENvbmZpZ3VyYXRpb24nXG4pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzZWxlY3RvciBmb3IgdGhlIHByb3ZpZGVkIGVsZW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVjIGNvbmZpZ1xuICogQHBhcmFtIHtKUXVlcnl9ICRlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNyZWF0ZSBhIHNlbGVjdG9yIGZvciBvciB7RWxlbWVudH0gaWYgaXNDYWxsZWRCeVJ1bm5lclxuICogQHBhcmFtIHtPYmplY3R9IFtjdXN0b21QYWdlRG9jdW1lbnRdXG4gKiBAcGFyYW0ge1NlbGVjdG9yQ29uZmlnfSBbY29uZmlnXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3NlbGVjdFN0cmF0ZWd5XVxuICogQHBhcmFtIHtCb29sZWFufSBbaXNDYWxsZWRCeVJ1bm5lcl1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gc2VsZWN0KFxuICAkZWxlbWVudCxcbiAgY3VzdG9tUGFnZURvY3VtZW50LFxuICBjb25maWcsXG4gIHNlbGVjdFN0cmF0ZWd5LFxuICBpc0NhbGxlZEJ5UnVubmVyXG4pIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IGRlZmF1bHRTZWxlY3RvckNvbmZpZztcbiAgc2VsZWN0U3RyYXRlZ3kgPSBzZWxlY3RTdHJhdGVneSB8fCBnZXRTaW5nbGVTZWxlY3RvcjtcblxuICBsZXQgc2VsZWN0b3IgPSB7XG4gICAgJHRhcmdldDogJGVsZW1lbnQsXG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgICBoYXNFcnJvcjogZmFsc2UsXG4gICAgaGFzV2FybmluZzogZmFsc2UsXG4gICAgdmFsdWU6IG51bGwsXG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW10sXG4gICAgY29uZmlnXG4gIH07XG4gIGxldCBvcHRpb25zID0gY29uZmlnVG9PcHRpb25zKGNvbmZpZyk7XG5cbiAgdHJ5IHtcbiAgICAvLyB1c2UgY3VzdG9tIGRvY3VtZW50IHJvb3QgaWYgc3BlY2lmaWVkXG4gICAgaWYgKGN1c3RvbVBhZ2VEb2N1bWVudCkge1xuICAgICAgb3B0aW9ucy5yb290ID0gY3VzdG9tUGFnZURvY3VtZW50O1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygncm9vdCcsIG9wdGlvbnMucm9vdCwgJ2VsZW0nLCAkZWxlbWVudCk7XG4gICAgLy8gcHJvZHVjZSB0aGUgc2VsZWN0b3JcbiAgICBsZXQgdW50ZXN0ZWRTZWxlY3RvciA9IGlzQ2FsbGVkQnlSdW5uZXIgP1xuICAgICAgc2VsZWN0U3RyYXRlZ3koJGVsZW1lbnQsIG9wdGlvbnMpIDpcbiAgICAgIHNlbGVjdFN0cmF0ZWd5KCRlbGVtZW50WzBdLCBvcHRpb25zKTtcbiAgICAvLyB0ZXN0IHRoZSBzZWxlY3RvclxuICAgIGxldCBpc1ZhbGlkID0gaXNDYWxsZWRCeVJ1bm5lciA/XG4gICAgICBvcHRpb25zLnJvb3QucXVlcnlTZWxlY3Rvcih1bnRlc3RlZFNlbGVjdG9yKSA9PT0gJGVsZW1lbnQgOlxuICAgICAgJChvcHRpb25zLnJvb3QpLmZpbmQodW50ZXN0ZWRTZWxlY3RvcikuaXMoJGVsZW1lbnQpO1xuXG4gICAgY29uc29sZS5sb2coJ2lzVmFsaWQnLCBpc1ZhbGlkKTtcbiAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgY29uc3Qgc2hvcnRlclNlbGVjdG9yID0gc2hvcnRlblNlbGVjdG9yQnlTaGlmdGluZyhcbiAgICAgICAgdW50ZXN0ZWRTZWxlY3Rvciwgb3B0aW9ucy5yb290LCAkZWxlbWVudCwgaXNDYWxsZWRCeVJ1bm5lclxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUubG9nKCdzaG9ydGVyU2VsJywgc2hvcnRlclNlbGVjdG9yLCAndW50JywgdW50ZXN0ZWRTZWxlY3Rvcik7XG4gICAgICBzZWxlY3Rvci52YWx1ZSA9IHNob3J0ZXJTZWxlY3RvciB8fCB1bnRlc3RlZFNlbGVjdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZGRFcnJvck1lc3NhZ2Uoc2VsZWN0b3IsIEVSUk9SUy5WQUxJREFUSU9OX0ZBSUxFRCwge1xuICAgICAgICBpbnZhbGlkYXRlZFNlbGVjdG9yOiB1bnRlc3RlZFNlbGVjdG9yLFxuICAgICAgICBjb25maWdDb21wb3NpdGlvbjogY29uZmlnLmdldENvbXBvc2l0aW9uKCksXG4gICAgICAgIGV4cGVjdGVkRWxlbWVudDogJGVsZW1lbnRbMF0gfHwgJGVsZW1lbnQsXG4gICAgICAgIHN0cmF0ZWd5OiBzZWxlY3RTdHJhdGVneVxuICAgICAgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGFkZEVycm9yTWVzc2FnZShzZWxlY3RvciwgRVJST1JTLkdFTkVSQVRJT05fRkFJTEVELCB7XG4gICAgICBmYWlsZWRDb25maWdDb21wb3NpdGlvbjogY29uZmlnLmdldENvbXBvc2l0aW9uKCksXG4gICAgICBlcnJvcixcbiAgICAgIHN0cmF0ZWd5OiBzZWxlY3RTdHJhdGVneVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFzZWxlY3Rvci52YWx1ZSkge1xuICAgIGFkZEVycm9yTWVzc2FnZShzZWxlY3RvciwgRVJST1JTLlZBTFVFX0lTX01JU1NJTkcsIHtcbiAgICAgIGZvdW5kVmFsdWU6IHNlbGVjdG9yLnZhbHVlLFxuICAgICAgc3RyYXRlZ3k6IHNlbGVjdFN0cmF0ZWd5XG4gICAgfSk7XG4gIH1cblxuICBzZWxlY3Rvci5zdWNjZXNzID0gIXNlbGVjdG9yLmhhc0Vycm9yO1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0O1xuIl0sImZpbGUiOiJzZWxlY3Rvci1nZW5lcmF0aW9uL3Byb2R1Y2Utc2VsZWN0b3Ivc2VsZWN0LXdyYXBwZXIuanMifQ==
