"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _select = require("../../select");

var _selectorConfiguration = _interopRequireDefault(require("../selector-configuration"));

var _optionsConverter = require("./options-converter");

var _postGenerationOptimization = require("./post-generation-optimization");

var _exceptionsHelper = require("./exceptions-helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
  This is the fallback configuration of no configuration is supplied to
  produceSelector function.
 */
var defaultSelectorConfig = new _selectorConfiguration["default"]('Default Selector Configuration');
/**
 * Creates a selector for the provided element with the specifiec config
 * @param {Element} element The element to create a selector for
 * @param {Object} [customPageDocument]
 * @param {SelectorConfig} [config]
 * @param {Function} [selectStrategy]
 * @return {Object}
 */

function select(element, customPageDocument, config, selectStrategy) {
  config = config || defaultSelectorConfig;
  selectStrategy = selectStrategy || _select.getSingleSelector;
  var selector = {
    $target: element,
    success: true,
    hasError: false,
    hasWarning: false,
    value: null,
    errors: [],
    warnings: [],
    config: config
  };
  var options = (0, _optionsConverter.configToOptions)(config);

  try {
    // use custom document root if specified
    if (customPageDocument) {
      options.root = customPageDocument;
    } // produce the selector


    var untestedSelector = selectStrategy(element, options); // test the selector

    var isValid = options.root.querySelector(untestedSelector) === element;

    if (isValid) {
      var shorterSelector = (0, _postGenerationOptimization.shortenSelectorByShifting)(untestedSelector, options.root, element);
      selector.value = shorterSelector || untestedSelector;
    } else {
      (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALIDATION_FAILED, {
        invalidatedSelector: untestedSelector,
        configComposition: config.getComposition(),
        expectedElement: element,
        strategy: selectStrategy
      });
    }
  } catch (error) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.GENERATION_FAILED, {
      failedConfigComposition: config.getComposition(),
      error: error,
      strategy: selectStrategy
    });
  }

  if (!selector.value) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALUE_IS_MISSING, {
      foundValue: selector.value,
      strategy: selectStrategy
    });
  }

  selector.success = !selector.hasError;
  return selector;
}

var _default = select;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0U2VsZWN0b3JDb25maWciLCJTZWxlY3RvckNvbmZpZ3VyYXRpb24iLCJzZWxlY3QiLCJlbGVtZW50IiwiY3VzdG9tUGFnZURvY3VtZW50IiwiY29uZmlnIiwic2VsZWN0U3RyYXRlZ3kiLCJnZXRTaW5nbGVTZWxlY3RvciIsInNlbGVjdG9yIiwiJHRhcmdldCIsInN1Y2Nlc3MiLCJoYXNFcnJvciIsImhhc1dhcm5pbmciLCJ2YWx1ZSIsImVycm9ycyIsIndhcm5pbmdzIiwib3B0aW9ucyIsInJvb3QiLCJ1bnRlc3RlZFNlbGVjdG9yIiwiaXNWYWxpZCIsInF1ZXJ5U2VsZWN0b3IiLCJzaG9ydGVyU2VsZWN0b3IiLCJFUlJPUlMiLCJWQUxJREFUSU9OX0ZBSUxFRCIsImludmFsaWRhdGVkU2VsZWN0b3IiLCJjb25maWdDb21wb3NpdGlvbiIsImdldENvbXBvc2l0aW9uIiwiZXhwZWN0ZWRFbGVtZW50Iiwic3RyYXRlZ3kiLCJlcnJvciIsIkdFTkVSQVRJT05fRkFJTEVEIiwiZmFpbGVkQ29uZmlnQ29tcG9zaXRpb24iLCJWQUxVRV9JU19NSVNTSU5HIiwiZm91bmRWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7Ozs7QUFJQSxJQUFJQSxxQkFBcUIsR0FBRyxJQUFJQyxpQ0FBSixDQUMxQixnQ0FEMEIsQ0FBNUI7QUFJQTs7Ozs7Ozs7O0FBUUEsU0FBU0MsTUFBVCxDQUNFQyxPQURGLEVBRUVDLGtCQUZGLEVBR0VDLE1BSEYsRUFJRUMsY0FKRixFQUtFO0FBQ0FELEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJTCxxQkFBbkI7QUFDQU0sRUFBQUEsY0FBYyxHQUFHQSxjQUFjLElBQUlDLHlCQUFuQztBQUVBLE1BQUlDLFFBQVEsR0FBRztBQUNiQyxJQUFBQSxPQUFPLEVBQUVOLE9BREk7QUFFYk8sSUFBQUEsT0FBTyxFQUFFLElBRkk7QUFHYkMsSUFBQUEsUUFBUSxFQUFFLEtBSEc7QUFJYkMsSUFBQUEsVUFBVSxFQUFFLEtBSkM7QUFLYkMsSUFBQUEsS0FBSyxFQUFFLElBTE07QUFNYkMsSUFBQUEsTUFBTSxFQUFFLEVBTks7QUFPYkMsSUFBQUEsUUFBUSxFQUFFLEVBUEc7QUFRYlYsSUFBQUEsTUFBTSxFQUFOQTtBQVJhLEdBQWY7QUFVQSxNQUFJVyxPQUFPLEdBQUcsdUNBQWdCWCxNQUFoQixDQUFkOztBQUVBLE1BQUk7QUFDRjtBQUNBLFFBQUlELGtCQUFKLEVBQXdCO0FBQ3RCWSxNQUFBQSxPQUFPLENBQUNDLElBQVIsR0FBZWIsa0JBQWY7QUFDRCxLQUpDLENBTUY7OztBQUNBLFFBQUljLGdCQUFnQixHQUFHWixjQUFjLENBQUNILE9BQUQsRUFBVWEsT0FBVixDQUFyQyxDQVBFLENBUUY7O0FBQ0EsUUFBSUcsT0FBTyxHQUFHSCxPQUFPLENBQUNDLElBQVIsQ0FBYUcsYUFBYixDQUEyQkYsZ0JBQTNCLE1BQWlEZixPQUEvRDs7QUFFQSxRQUFJZ0IsT0FBSixFQUFhO0FBQ1gsVUFBTUUsZUFBZSxHQUFHLDJEQUN0QkgsZ0JBRHNCLEVBQ0pGLE9BQU8sQ0FBQ0MsSUFESixFQUNVZCxPQURWLENBQXhCO0FBSUFLLE1BQUFBLFFBQVEsQ0FBQ0ssS0FBVCxHQUFpQlEsZUFBZSxJQUFJSCxnQkFBcEM7QUFDRCxLQU5ELE1BTU87QUFDTCw2Q0FBZ0JWLFFBQWhCLEVBQTBCYyx5QkFBT0MsaUJBQWpDLEVBQW9EO0FBQ2xEQyxRQUFBQSxtQkFBbUIsRUFBRU4sZ0JBRDZCO0FBRWxETyxRQUFBQSxpQkFBaUIsRUFBRXBCLE1BQU0sQ0FBQ3FCLGNBQVAsRUFGK0I7QUFHbERDLFFBQUFBLGVBQWUsRUFBRXhCLE9BSGlDO0FBSWxEeUIsUUFBQUEsUUFBUSxFQUFFdEI7QUFKd0MsT0FBcEQ7QUFNRDtBQUNGLEdBekJELENBeUJFLE9BQU91QixLQUFQLEVBQWM7QUFDZCwyQ0FBZ0JyQixRQUFoQixFQUEwQmMseUJBQU9RLGlCQUFqQyxFQUFvRDtBQUNsREMsTUFBQUEsdUJBQXVCLEVBQUUxQixNQUFNLENBQUNxQixjQUFQLEVBRHlCO0FBRWxERyxNQUFBQSxLQUFLLEVBQUxBLEtBRmtEO0FBR2xERCxNQUFBQSxRQUFRLEVBQUV0QjtBQUh3QyxLQUFwRDtBQUtEOztBQUVELE1BQUksQ0FBQ0UsUUFBUSxDQUFDSyxLQUFkLEVBQXFCO0FBQ25CLDJDQUFnQkwsUUFBaEIsRUFBMEJjLHlCQUFPVSxnQkFBakMsRUFBbUQ7QUFDakRDLE1BQUFBLFVBQVUsRUFBRXpCLFFBQVEsQ0FBQ0ssS0FENEI7QUFFakRlLE1BQUFBLFFBQVEsRUFBRXRCO0FBRnVDLEtBQW5EO0FBSUQ7O0FBRURFLEVBQUFBLFFBQVEsQ0FBQ0UsT0FBVCxHQUFtQixDQUFDRixRQUFRLENBQUNHLFFBQTdCO0FBRUEsU0FBT0gsUUFBUDtBQUNEOztlQUVjTixNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0U2luZ2xlU2VsZWN0b3IgfSBmcm9tICcuLi8uLi9zZWxlY3QnO1xuXG5pbXBvcnQgU2VsZWN0b3JDb25maWd1cmF0aW9uIGZyb20gJy4uL3NlbGVjdG9yLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgY29uZmlnVG9PcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zLWNvbnZlcnRlcidcbmltcG9ydCB7IHNob3J0ZW5TZWxlY3RvckJ5U2hpZnRpbmcgfSBmcm9tICcuL3Bvc3QtZ2VuZXJhdGlvbi1vcHRpbWl6YXRpb24nO1xuaW1wb3J0IHsgYWRkRXJyb3JNZXNzYWdlLCBFUlJPUlMgfSBmcm9tICcuL2V4Y2VwdGlvbnMtaGVscGVyJ1xuXG4vKlxuICBUaGlzIGlzIHRoZSBmYWxsYmFjayBjb25maWd1cmF0aW9uIG9mIG5vIGNvbmZpZ3VyYXRpb24gaXMgc3VwcGxpZWQgdG9cbiAgcHJvZHVjZVNlbGVjdG9yIGZ1bmN0aW9uLlxuICovXG5sZXQgZGVmYXVsdFNlbGVjdG9yQ29uZmlnID0gbmV3IFNlbGVjdG9yQ29uZmlndXJhdGlvbihcbiAgJ0RlZmF1bHQgU2VsZWN0b3IgQ29uZmlndXJhdGlvbidcbik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNlbGVjdG9yIGZvciB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWMgY29uZmlnXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY3JlYXRlIGEgc2VsZWN0b3IgZm9yXG4gKiBAcGFyYW0ge09iamVjdH0gW2N1c3RvbVBhZ2VEb2N1bWVudF1cbiAqIEBwYXJhbSB7U2VsZWN0b3JDb25maWd9IFtjb25maWddXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbc2VsZWN0U3RyYXRlZ3ldXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHNlbGVjdChcbiAgZWxlbWVudCxcbiAgY3VzdG9tUGFnZURvY3VtZW50LFxuICBjb25maWcsXG4gIHNlbGVjdFN0cmF0ZWd5XG4pIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IGRlZmF1bHRTZWxlY3RvckNvbmZpZztcbiAgc2VsZWN0U3RyYXRlZ3kgPSBzZWxlY3RTdHJhdGVneSB8fCBnZXRTaW5nbGVTZWxlY3RvcjtcblxuICBsZXQgc2VsZWN0b3IgPSB7XG4gICAgJHRhcmdldDogZWxlbWVudCxcbiAgICBzdWNjZXNzOiB0cnVlLFxuICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICBoYXNXYXJuaW5nOiBmYWxzZSxcbiAgICB2YWx1ZTogbnVsbCxcbiAgICBlcnJvcnM6IFtdLFxuICAgIHdhcm5pbmdzOiBbXSxcbiAgICBjb25maWdcbiAgfTtcbiAgbGV0IG9wdGlvbnMgPSBjb25maWdUb09wdGlvbnMoY29uZmlnKTtcblxuICB0cnkge1xuICAgIC8vIHVzZSBjdXN0b20gZG9jdW1lbnQgcm9vdCBpZiBzcGVjaWZpZWRcbiAgICBpZiAoY3VzdG9tUGFnZURvY3VtZW50KSB7XG4gICAgICBvcHRpb25zLnJvb3QgPSBjdXN0b21QYWdlRG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gcHJvZHVjZSB0aGUgc2VsZWN0b3JcbiAgICBsZXQgdW50ZXN0ZWRTZWxlY3RvciA9IHNlbGVjdFN0cmF0ZWd5KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIC8vIHRlc3QgdGhlIHNlbGVjdG9yXG4gICAgbGV0IGlzVmFsaWQgPSBvcHRpb25zLnJvb3QucXVlcnlTZWxlY3Rvcih1bnRlc3RlZFNlbGVjdG9yKSA9PT0gZWxlbWVudDtcblxuICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICBjb25zdCBzaG9ydGVyU2VsZWN0b3IgPSBzaG9ydGVuU2VsZWN0b3JCeVNoaWZ0aW5nKFxuICAgICAgICB1bnRlc3RlZFNlbGVjdG9yLCBvcHRpb25zLnJvb3QsIGVsZW1lbnRcbiAgICAgICk7XG5cbiAgICAgIHNlbGVjdG9yLnZhbHVlID0gc2hvcnRlclNlbGVjdG9yIHx8IHVudGVzdGVkU2VsZWN0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZEVycm9yTWVzc2FnZShzZWxlY3RvciwgRVJST1JTLlZBTElEQVRJT05fRkFJTEVELCB7XG4gICAgICAgIGludmFsaWRhdGVkU2VsZWN0b3I6IHVudGVzdGVkU2VsZWN0b3IsXG4gICAgICAgIGNvbmZpZ0NvbXBvc2l0aW9uOiBjb25maWcuZ2V0Q29tcG9zaXRpb24oKSxcbiAgICAgICAgZXhwZWN0ZWRFbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBzdHJhdGVneTogc2VsZWN0U3RyYXRlZ3lcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBhZGRFcnJvck1lc3NhZ2Uoc2VsZWN0b3IsIEVSUk9SUy5HRU5FUkFUSU9OX0ZBSUxFRCwge1xuICAgICAgZmFpbGVkQ29uZmlnQ29tcG9zaXRpb246IGNvbmZpZy5nZXRDb21wb3NpdGlvbigpLFxuICAgICAgZXJyb3IsXG4gICAgICBzdHJhdGVneTogc2VsZWN0U3RyYXRlZ3lcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghc2VsZWN0b3IudmFsdWUpIHtcbiAgICBhZGRFcnJvck1lc3NhZ2Uoc2VsZWN0b3IsIEVSUk9SUy5WQUxVRV9JU19NSVNTSU5HLCB7XG4gICAgICBmb3VuZFZhbHVlOiBzZWxlY3Rvci52YWx1ZSxcbiAgICAgIHN0cmF0ZWd5OiBzZWxlY3RTdHJhdGVneVxuICAgIH0pO1xuICB9XG5cbiAgc2VsZWN0b3Iuc3VjY2VzcyA9ICFzZWxlY3Rvci5oYXNFcnJvcjtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdDtcbiJdLCJmaWxlIjoic2VsZWN0b3ItZ2VuZXJhdGlvbi9wcm9kdWNlLXNlbGVjdG9yL3NlbGVjdC13cmFwcGVyLmpzIn0=
