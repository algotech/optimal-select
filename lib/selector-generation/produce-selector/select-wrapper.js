"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _jquery = _interopRequireDefault(require("jquery"));

var _select = require("../../select");

var _selectorConfiguration = _interopRequireDefault(require("../selector-configuration"));

var _optionsConverter = require("./options-converter");

var _postGenerationOptimization = require("./post-generation-optimization");

var _exceptionsHelper = require("./exceptions-helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
  This is the fallback configuration of no configuration is supplied to
  produceSelector function.
 */
var defaultSelectorConfig = new _selectorConfiguration["default"]('Default Selector Configuration');
/**
 * Creates a selector for the provided element with the specifiec config
 * @param {JQuery} $element The element to create a selector for
 * @param {Object} [customPageDocument]
 * @param {SelectorConfig} [config]
 * @param {Function} [selectStrategy]
 * @return {Object}
 */

function select($element, customPageDocument, config, selectStrategy) {
  config = config || defaultSelectorConfig;
  selectStrategy = selectStrategy || _select.getSingleSelector;
  var selector = {
    $target: $element,
    success: true,
    hasError: false,
    hasWarning: false,
    value: null,
    errors: [],
    warnings: [],
    config: config
  };
  var options = (0, _optionsConverter.configToOptions)(config);
  console.log('config -> options', config, options);

  try {
    // use custom document root if specified
    if (customPageDocument) {
      options.root = customPageDocument;
    } // produce the selector


    var untestedSelector = selectStrategy($element[0], options); // test the selector

    var isValid = (0, _jquery["default"])(options.root).find(untestedSelector).is($element);

    if (isValid) {
      var shorterSelector = (0, _postGenerationOptimization.shortenSelectorByShifting)(untestedSelector, options.root, $element);
      selector.value = shorterSelector || untestedSelector;
    } else {
      (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALIDATION_FAILED, {
        invalidatedSelector: untestedSelector,
        configComposition: config.getComposition(),
        expectedElement: $element[0] || $element,
        strategy: selectStrategy
      });
    }
  } catch (error) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.GENERATION_FAILED, {
      failedConfigComposition: config.getComposition(),
      error: error,
      strategy: selectStrategy
    });
  }

  if (!selector.value) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALUE_IS_MISSING, {
      foundValue: selector.value,
      strategy: selectStrategy
    });
  }

  selector.success = !selector.hasError;
  return selector;
}

var _default = select;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0U2VsZWN0b3JDb25maWciLCJTZWxlY3RvckNvbmZpZ3VyYXRpb24iLCJzZWxlY3QiLCIkZWxlbWVudCIsImN1c3RvbVBhZ2VEb2N1bWVudCIsImNvbmZpZyIsInNlbGVjdFN0cmF0ZWd5IiwiZ2V0U2luZ2xlU2VsZWN0b3IiLCJzZWxlY3RvciIsIiR0YXJnZXQiLCJzdWNjZXNzIiwiaGFzRXJyb3IiLCJoYXNXYXJuaW5nIiwidmFsdWUiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsIm9wdGlvbnMiLCJjb25zb2xlIiwibG9nIiwicm9vdCIsInVudGVzdGVkU2VsZWN0b3IiLCJpc1ZhbGlkIiwiZmluZCIsImlzIiwic2hvcnRlclNlbGVjdG9yIiwiRVJST1JTIiwiVkFMSURBVElPTl9GQUlMRUQiLCJpbnZhbGlkYXRlZFNlbGVjdG9yIiwiY29uZmlnQ29tcG9zaXRpb24iLCJnZXRDb21wb3NpdGlvbiIsImV4cGVjdGVkRWxlbWVudCIsInN0cmF0ZWd5IiwiZXJyb3IiLCJHRU5FUkFUSU9OX0ZBSUxFRCIsImZhaWxlZENvbmZpZ0NvbXBvc2l0aW9uIiwiVkFMVUVfSVNfTUlTU0lORyIsImZvdW5kVmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBOzs7O0FBSUEsSUFBSUEscUJBQXFCLEdBQUcsSUFBSUMsaUNBQUosQ0FDMUIsZ0NBRDBCLENBQTVCO0FBSUE7Ozs7Ozs7OztBQVFBLFNBQVNDLE1BQVQsQ0FDRUMsUUFERixFQUVFQyxrQkFGRixFQUdFQyxNQUhGLEVBSUVDLGNBSkYsRUFLRTtBQUNBRCxFQUFBQSxNQUFNLEdBQUdBLE1BQU0sSUFBSUwscUJBQW5CO0FBQ0FNLEVBQUFBLGNBQWMsR0FBR0EsY0FBYyxJQUFJQyx5QkFBbkM7QUFFQSxNQUFJQyxRQUFRLEdBQUc7QUFDYkMsSUFBQUEsT0FBTyxFQUFFTixRQURJO0FBRWJPLElBQUFBLE9BQU8sRUFBRSxJQUZJO0FBR2JDLElBQUFBLFFBQVEsRUFBRSxLQUhHO0FBSWJDLElBQUFBLFVBQVUsRUFBRSxLQUpDO0FBS2JDLElBQUFBLEtBQUssRUFBRSxJQUxNO0FBTWJDLElBQUFBLE1BQU0sRUFBRSxFQU5LO0FBT2JDLElBQUFBLFFBQVEsRUFBRSxFQVBHO0FBUWJWLElBQUFBLE1BQU0sRUFBTkE7QUFSYSxHQUFmO0FBVUEsTUFBSVcsT0FBTyxHQUFHLHVDQUFnQlgsTUFBaEIsQ0FBZDtBQUNBWSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQkFBWixFQUFpQ2IsTUFBakMsRUFBeUNXLE9BQXpDOztBQUNBLE1BQUk7QUFDRjtBQUNBLFFBQUlaLGtCQUFKLEVBQXdCO0FBQ3RCWSxNQUFBQSxPQUFPLENBQUNHLElBQVIsR0FBZWYsa0JBQWY7QUFDRCxLQUpDLENBS0Y7OztBQUNBLFFBQUlnQixnQkFBZ0IsR0FBR2QsY0FBYyxDQUFDSCxRQUFRLENBQUMsQ0FBRCxDQUFULEVBQWNhLE9BQWQsQ0FBckMsQ0FORSxDQU9GOztBQUNBLFFBQUlLLE9BQU8sR0FBRyx3QkFBRUwsT0FBTyxDQUFDRyxJQUFWLEVBQWdCRyxJQUFoQixDQUFxQkYsZ0JBQXJCLEVBQXVDRyxFQUF2QyxDQUEwQ3BCLFFBQTFDLENBQWQ7O0FBRUEsUUFBSWtCLE9BQUosRUFBYTtBQUNYLFVBQU1HLGVBQWUsR0FBRywyREFDdEJKLGdCQURzQixFQUNKSixPQUFPLENBQUNHLElBREosRUFDVWhCLFFBRFYsQ0FBeEI7QUFJQUssTUFBQUEsUUFBUSxDQUFDSyxLQUFULEdBQWlCVyxlQUFlLElBQUlKLGdCQUFwQztBQUNELEtBTkQsTUFNTztBQUNMLDZDQUFnQlosUUFBaEIsRUFBMEJpQix5QkFBT0MsaUJBQWpDLEVBQW9EO0FBQ2xEQyxRQUFBQSxtQkFBbUIsRUFBRVAsZ0JBRDZCO0FBRWxEUSxRQUFBQSxpQkFBaUIsRUFBRXZCLE1BQU0sQ0FBQ3dCLGNBQVAsRUFGK0I7QUFHbERDLFFBQUFBLGVBQWUsRUFBRTNCLFFBQVEsQ0FBQyxDQUFELENBQVIsSUFBZUEsUUFIa0I7QUFJbEQ0QixRQUFBQSxRQUFRLEVBQUV6QjtBQUp3QyxPQUFwRDtBQU1EO0FBQ0YsR0F4QkQsQ0F3QkUsT0FBTzBCLEtBQVAsRUFBYztBQUNkLDJDQUFnQnhCLFFBQWhCLEVBQTBCaUIseUJBQU9RLGlCQUFqQyxFQUFvRDtBQUNsREMsTUFBQUEsdUJBQXVCLEVBQUU3QixNQUFNLENBQUN3QixjQUFQLEVBRHlCO0FBRWxERyxNQUFBQSxLQUFLLEVBQUxBLEtBRmtEO0FBR2xERCxNQUFBQSxRQUFRLEVBQUV6QjtBQUh3QyxLQUFwRDtBQUtEOztBQUVELE1BQUksQ0FBQ0UsUUFBUSxDQUFDSyxLQUFkLEVBQXFCO0FBQ25CLDJDQUFnQkwsUUFBaEIsRUFBMEJpQix5QkFBT1UsZ0JBQWpDLEVBQW1EO0FBQ2pEQyxNQUFBQSxVQUFVLEVBQUU1QixRQUFRLENBQUNLLEtBRDRCO0FBRWpEa0IsTUFBQUEsUUFBUSxFQUFFekI7QUFGdUMsS0FBbkQ7QUFJRDs7QUFFREUsRUFBQUEsUUFBUSxDQUFDRSxPQUFULEdBQW1CLENBQUNGLFFBQVEsQ0FBQ0csUUFBN0I7QUFFQSxTQUFPSCxRQUFQO0FBQ0Q7O2VBRWNOLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJCBmcm9tICdqcXVlcnknXG5pbXBvcnQgeyBnZXRTaW5nbGVTZWxlY3RvciB9IGZyb20gJy4uLy4uL3NlbGVjdCc7XG5cbmltcG9ydCBTZWxlY3RvckNvbmZpZ3VyYXRpb24gZnJvbSAnLi4vc2VsZWN0b3ItY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBjb25maWdUb09wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMtY29udmVydGVyJ1xuaW1wb3J0IHsgc2hvcnRlblNlbGVjdG9yQnlTaGlmdGluZyB9IGZyb20gJy4vcG9zdC1nZW5lcmF0aW9uLW9wdGltaXphdGlvbic7XG5pbXBvcnQgeyBhZGRFcnJvck1lc3NhZ2UsIEVSUk9SUyB9IGZyb20gJy4vZXhjZXB0aW9ucy1oZWxwZXInXG5cbi8qXG4gIFRoaXMgaXMgdGhlIGZhbGxiYWNrIGNvbmZpZ3VyYXRpb24gb2Ygbm8gY29uZmlndXJhdGlvbiBpcyBzdXBwbGllZCB0b1xuICBwcm9kdWNlU2VsZWN0b3IgZnVuY3Rpb24uXG4gKi9cbmxldCBkZWZhdWx0U2VsZWN0b3JDb25maWcgPSBuZXcgU2VsZWN0b3JDb25maWd1cmF0aW9uKFxuICAnRGVmYXVsdCBTZWxlY3RvciBDb25maWd1cmF0aW9uJ1xuKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2VsZWN0b3IgZm9yIHRoZSBwcm92aWRlZCBlbGVtZW50IHdpdGggdGhlIHNwZWNpZmllYyBjb25maWdcbiAqIEBwYXJhbSB7SlF1ZXJ5fSAkZWxlbWVudCBUaGUgZWxlbWVudCB0byBjcmVhdGUgYSBzZWxlY3RvciBmb3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBbY3VzdG9tUGFnZURvY3VtZW50XVxuICogQHBhcmFtIHtTZWxlY3RvckNvbmZpZ30gW2NvbmZpZ11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtzZWxlY3RTdHJhdGVneV1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gc2VsZWN0KFxuICAkZWxlbWVudCxcbiAgY3VzdG9tUGFnZURvY3VtZW50LFxuICBjb25maWcsXG4gIHNlbGVjdFN0cmF0ZWd5XG4pIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IGRlZmF1bHRTZWxlY3RvckNvbmZpZztcbiAgc2VsZWN0U3RyYXRlZ3kgPSBzZWxlY3RTdHJhdGVneSB8fCBnZXRTaW5nbGVTZWxlY3RvcjtcblxuICBsZXQgc2VsZWN0b3IgPSB7XG4gICAgJHRhcmdldDogJGVsZW1lbnQsXG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgICBoYXNFcnJvcjogZmFsc2UsXG4gICAgaGFzV2FybmluZzogZmFsc2UsXG4gICAgdmFsdWU6IG51bGwsXG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW10sXG4gICAgY29uZmlnXG4gIH07XG4gIGxldCBvcHRpb25zID0gY29uZmlnVG9PcHRpb25zKGNvbmZpZyk7XG4gIGNvbnNvbGUubG9nKCdjb25maWcgLT4gb3B0aW9ucycsIGNvbmZpZywgb3B0aW9ucyk7XG4gIHRyeSB7XG4gICAgLy8gdXNlIGN1c3RvbSBkb2N1bWVudCByb290IGlmIHNwZWNpZmllZFxuICAgIGlmIChjdXN0b21QYWdlRG9jdW1lbnQpIHtcbiAgICAgIG9wdGlvbnMucm9vdCA9IGN1c3RvbVBhZ2VEb2N1bWVudDtcbiAgICB9XG4gICAgLy8gcHJvZHVjZSB0aGUgc2VsZWN0b3JcbiAgICBsZXQgdW50ZXN0ZWRTZWxlY3RvciA9IHNlbGVjdFN0cmF0ZWd5KCRlbGVtZW50WzBdLCBvcHRpb25zKTtcbiAgICAvLyB0ZXN0IHRoZSBzZWxlY3RvclxuICAgIGxldCBpc1ZhbGlkID0gJChvcHRpb25zLnJvb3QpLmZpbmQodW50ZXN0ZWRTZWxlY3RvcikuaXMoJGVsZW1lbnQpO1xuXG4gICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgIGNvbnN0IHNob3J0ZXJTZWxlY3RvciA9IHNob3J0ZW5TZWxlY3RvckJ5U2hpZnRpbmcoXG4gICAgICAgIHVudGVzdGVkU2VsZWN0b3IsIG9wdGlvbnMucm9vdCwgJGVsZW1lbnRcbiAgICAgICk7XG5cbiAgICAgIHNlbGVjdG9yLnZhbHVlID0gc2hvcnRlclNlbGVjdG9yIHx8IHVudGVzdGVkU2VsZWN0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZEVycm9yTWVzc2FnZShzZWxlY3RvciwgRVJST1JTLlZBTElEQVRJT05fRkFJTEVELCB7XG4gICAgICAgIGludmFsaWRhdGVkU2VsZWN0b3I6IHVudGVzdGVkU2VsZWN0b3IsXG4gICAgICAgIGNvbmZpZ0NvbXBvc2l0aW9uOiBjb25maWcuZ2V0Q29tcG9zaXRpb24oKSxcbiAgICAgICAgZXhwZWN0ZWRFbGVtZW50OiAkZWxlbWVudFswXSB8fCAkZWxlbWVudCxcbiAgICAgICAgc3RyYXRlZ3k6IHNlbGVjdFN0cmF0ZWd5XG4gICAgICB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHNlbGVjdG9yLCBFUlJPUlMuR0VORVJBVElPTl9GQUlMRUQsIHtcbiAgICAgIGZhaWxlZENvbmZpZ0NvbXBvc2l0aW9uOiBjb25maWcuZ2V0Q29tcG9zaXRpb24oKSxcbiAgICAgIGVycm9yLFxuICAgICAgc3RyYXRlZ3k6IHNlbGVjdFN0cmF0ZWd5XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIXNlbGVjdG9yLnZhbHVlKSB7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHNlbGVjdG9yLCBFUlJPUlMuVkFMVUVfSVNfTUlTU0lORywge1xuICAgICAgZm91bmRWYWx1ZTogc2VsZWN0b3IudmFsdWUsXG4gICAgICBzdHJhdGVneTogc2VsZWN0U3RyYXRlZ3lcbiAgICB9KTtcbiAgfVxuXG4gIHNlbGVjdG9yLnN1Y2Nlc3MgPSAhc2VsZWN0b3IuaGFzRXJyb3I7XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Q7XG4iXSwiZmlsZSI6InNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJ9
