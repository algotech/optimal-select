"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _jquery = _interopRequireDefault(require("jquery"));

var _select = require("../../select");

var _selectorConfiguration = _interopRequireDefault(require("../selector-configuration"));

var _optionsConverter = require("./options-converter");

var _postGenerationOptimization = require("./post-generation-optimization");

var _exceptionsHelper = require("./exceptions-helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
  This is the fallback configuration of no configuration is supplied to
  produceSelector function.
 */
var defaultSelectorConfig = new _selectorConfiguration["default"]('Default Selector Configuration');
/**
 * Creates a selector for the provided element with the specifiec config
 * @param {JQuery} $element The element to create a selector for or {Element} if isCalledByRunner
 * @param {Object} [customPageDocument]
 * @param {SelectorConfig} [config]
 * @param {Function} [selectStrategy]
 * @param {Boolean} [isCalledByRunner]
 * @return {Object}
 */

function select($element, customPageDocument, config, selectStrategy, isCalledByRunner) {
  config = config || defaultSelectorConfig;
  selectStrategy = selectStrategy || _select.getSingleSelector;
  var selector = {
    $target: $element,
    success: true,
    hasError: false,
    hasWarning: false,
    value: null,
    errors: [],
    warnings: [],
    config: config
  };
  var options = (0, _optionsConverter.configToOptions)(config);

  try {
    // use custom document root if specified
    if (customPageDocument) {
      options.root = customPageDocument;
    } // produce the selector


    var untestedSelector = isCalledByRunner ? selectStrategy($element, options) : selectStrategy($element[0], options); // test the selector

    var isValid = isCalledByRunner ? options.root.querySelector(untestedSelector) === $element : (0, _jquery["default"])(options.root).find(untestedSelector).is($element);

    if (isValid) {
      var shorterSelector = (0, _postGenerationOptimization.shortenSelectorByShifting)(untestedSelector, options.root, $element, isCalledByRunner);
      selector.value = shorterSelector || untestedSelector;
    } else {
      (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALIDATION_FAILED, {
        invalidatedSelector: untestedSelector,
        configComposition: config.getComposition(),
        expectedElement: $element[0] || $element,
        strategy: selectStrategy
      });
    }
  } catch (error) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.GENERATION_FAILED, {
      failedConfigComposition: config.getComposition(),
      error: error,
      strategy: selectStrategy
    });
  }

  if (!selector.value) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALUE_IS_MISSING, {
      foundValue: selector.value,
      strategy: selectStrategy
    });
  }

  selector.success = !selector.hasError;
  return selector;
}

var _default = select;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0U2VsZWN0b3JDb25maWciLCJTZWxlY3RvckNvbmZpZ3VyYXRpb24iLCJzZWxlY3QiLCIkZWxlbWVudCIsImN1c3RvbVBhZ2VEb2N1bWVudCIsImNvbmZpZyIsInNlbGVjdFN0cmF0ZWd5IiwiaXNDYWxsZWRCeVJ1bm5lciIsImdldFNpbmdsZVNlbGVjdG9yIiwic2VsZWN0b3IiLCIkdGFyZ2V0Iiwic3VjY2VzcyIsImhhc0Vycm9yIiwiaGFzV2FybmluZyIsInZhbHVlIiwiZXJyb3JzIiwid2FybmluZ3MiLCJvcHRpb25zIiwicm9vdCIsInVudGVzdGVkU2VsZWN0b3IiLCJpc1ZhbGlkIiwicXVlcnlTZWxlY3RvciIsImZpbmQiLCJpcyIsInNob3J0ZXJTZWxlY3RvciIsIkVSUk9SUyIsIlZBTElEQVRJT05fRkFJTEVEIiwiaW52YWxpZGF0ZWRTZWxlY3RvciIsImNvbmZpZ0NvbXBvc2l0aW9uIiwiZ2V0Q29tcG9zaXRpb24iLCJleHBlY3RlZEVsZW1lbnQiLCJzdHJhdGVneSIsImVycm9yIiwiR0VORVJBVElPTl9GQUlMRUQiLCJmYWlsZWRDb25maWdDb21wb3NpdGlvbiIsIlZBTFVFX0lTX01JU1NJTkciLCJmb3VuZFZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTs7OztBQUlBLElBQUlBLHFCQUFxQixHQUFHLElBQUlDLGlDQUFKLENBQzFCLGdDQUQwQixDQUE1QjtBQUlBOzs7Ozs7Ozs7O0FBU0EsU0FBU0MsTUFBVCxDQUNFQyxRQURGLEVBRUVDLGtCQUZGLEVBR0VDLE1BSEYsRUFJRUMsY0FKRixFQUtFQyxnQkFMRixFQU1FO0FBQ0FGLEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJTCxxQkFBbkI7QUFDQU0sRUFBQUEsY0FBYyxHQUFHQSxjQUFjLElBQUlFLHlCQUFuQztBQUVBLE1BQUlDLFFBQVEsR0FBRztBQUNiQyxJQUFBQSxPQUFPLEVBQUVQLFFBREk7QUFFYlEsSUFBQUEsT0FBTyxFQUFFLElBRkk7QUFHYkMsSUFBQUEsUUFBUSxFQUFFLEtBSEc7QUFJYkMsSUFBQUEsVUFBVSxFQUFFLEtBSkM7QUFLYkMsSUFBQUEsS0FBSyxFQUFFLElBTE07QUFNYkMsSUFBQUEsTUFBTSxFQUFFLEVBTks7QUFPYkMsSUFBQUEsUUFBUSxFQUFFLEVBUEc7QUFRYlgsSUFBQUEsTUFBTSxFQUFOQTtBQVJhLEdBQWY7QUFVQSxNQUFJWSxPQUFPLEdBQUcsdUNBQWdCWixNQUFoQixDQUFkOztBQUVBLE1BQUk7QUFDRjtBQUNBLFFBQUlELGtCQUFKLEVBQXdCO0FBQ3RCYSxNQUFBQSxPQUFPLENBQUNDLElBQVIsR0FBZWQsa0JBQWY7QUFDRCxLQUpDLENBTUY7OztBQUNBLFFBQUllLGdCQUFnQixHQUFHWixnQkFBZ0IsR0FDckNELGNBQWMsQ0FBQ0gsUUFBRCxFQUFXYyxPQUFYLENBRHVCLEdBRXJDWCxjQUFjLENBQUNILFFBQVEsQ0FBQyxDQUFELENBQVQsRUFBY2MsT0FBZCxDQUZoQixDQVBFLENBVUY7O0FBQ0EsUUFBSUcsT0FBTyxHQUFHYixnQkFBZ0IsR0FDNUJVLE9BQU8sQ0FBQ0MsSUFBUixDQUFhRyxhQUFiLENBQTJCRixnQkFBM0IsTUFBaURoQixRQURyQixHQUU1Qix3QkFBRWMsT0FBTyxDQUFDQyxJQUFWLEVBQWdCSSxJQUFoQixDQUFxQkgsZ0JBQXJCLEVBQXVDSSxFQUF2QyxDQUEwQ3BCLFFBQTFDLENBRkY7O0FBSUEsUUFBSWlCLE9BQUosRUFBYTtBQUNYLFVBQU1JLGVBQWUsR0FBRywyREFDdEJMLGdCQURzQixFQUNKRixPQUFPLENBQUNDLElBREosRUFDVWYsUUFEVixFQUNvQkksZ0JBRHBCLENBQXhCO0FBSUFFLE1BQUFBLFFBQVEsQ0FBQ0ssS0FBVCxHQUFpQlUsZUFBZSxJQUFJTCxnQkFBcEM7QUFDRCxLQU5ELE1BTU87QUFDTCw2Q0FBZ0JWLFFBQWhCLEVBQTBCZ0IseUJBQU9DLGlCQUFqQyxFQUFvRDtBQUNsREMsUUFBQUEsbUJBQW1CLEVBQUVSLGdCQUQ2QjtBQUVsRFMsUUFBQUEsaUJBQWlCLEVBQUV2QixNQUFNLENBQUN3QixjQUFQLEVBRitCO0FBR2xEQyxRQUFBQSxlQUFlLEVBQUUzQixRQUFRLENBQUMsQ0FBRCxDQUFSLElBQWVBLFFBSGtCO0FBSWxENEIsUUFBQUEsUUFBUSxFQUFFekI7QUFKd0MsT0FBcEQ7QUFNRDtBQUNGLEdBN0JELENBNkJFLE9BQU8wQixLQUFQLEVBQWM7QUFDZCwyQ0FBZ0J2QixRQUFoQixFQUEwQmdCLHlCQUFPUSxpQkFBakMsRUFBb0Q7QUFDbERDLE1BQUFBLHVCQUF1QixFQUFFN0IsTUFBTSxDQUFDd0IsY0FBUCxFQUR5QjtBQUVsREcsTUFBQUEsS0FBSyxFQUFMQSxLQUZrRDtBQUdsREQsTUFBQUEsUUFBUSxFQUFFekI7QUFId0MsS0FBcEQ7QUFLRDs7QUFFRCxNQUFJLENBQUNHLFFBQVEsQ0FBQ0ssS0FBZCxFQUFxQjtBQUNuQiwyQ0FBZ0JMLFFBQWhCLEVBQTBCZ0IseUJBQU9VLGdCQUFqQyxFQUFtRDtBQUNqREMsTUFBQUEsVUFBVSxFQUFFM0IsUUFBUSxDQUFDSyxLQUQ0QjtBQUVqRGlCLE1BQUFBLFFBQVEsRUFBRXpCO0FBRnVDLEtBQW5EO0FBSUQ7O0FBRURHLEVBQUFBLFFBQVEsQ0FBQ0UsT0FBVCxHQUFtQixDQUFDRixRQUFRLENBQUNHLFFBQTdCO0FBRUEsU0FBT0gsUUFBUDtBQUNEOztlQUVjUCxNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IHsgZ2V0U2luZ2xlU2VsZWN0b3IgfSBmcm9tICcuLi8uLi9zZWxlY3QnO1xuXG5pbXBvcnQgU2VsZWN0b3JDb25maWd1cmF0aW9uIGZyb20gJy4uL3NlbGVjdG9yLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgY29uZmlnVG9PcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zLWNvbnZlcnRlcidcbmltcG9ydCB7IHNob3J0ZW5TZWxlY3RvckJ5U2hpZnRpbmcgfSBmcm9tICcuL3Bvc3QtZ2VuZXJhdGlvbi1vcHRpbWl6YXRpb24nO1xuaW1wb3J0IHsgYWRkRXJyb3JNZXNzYWdlLCBFUlJPUlMgfSBmcm9tICcuL2V4Y2VwdGlvbnMtaGVscGVyJ1xuXG4vKlxuICBUaGlzIGlzIHRoZSBmYWxsYmFjayBjb25maWd1cmF0aW9uIG9mIG5vIGNvbmZpZ3VyYXRpb24gaXMgc3VwcGxpZWQgdG9cbiAgcHJvZHVjZVNlbGVjdG9yIGZ1bmN0aW9uLlxuICovXG5sZXQgZGVmYXVsdFNlbGVjdG9yQ29uZmlnID0gbmV3IFNlbGVjdG9yQ29uZmlndXJhdGlvbihcbiAgJ0RlZmF1bHQgU2VsZWN0b3IgQ29uZmlndXJhdGlvbidcbik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNlbGVjdG9yIGZvciB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWMgY29uZmlnXG4gKiBAcGFyYW0ge0pRdWVyeX0gJGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY3JlYXRlIGEgc2VsZWN0b3IgZm9yIG9yIHtFbGVtZW50fSBpZiBpc0NhbGxlZEJ5UnVubmVyXG4gKiBAcGFyYW0ge09iamVjdH0gW2N1c3RvbVBhZ2VEb2N1bWVudF1cbiAqIEBwYXJhbSB7U2VsZWN0b3JDb25maWd9IFtjb25maWddXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbc2VsZWN0U3RyYXRlZ3ldXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtpc0NhbGxlZEJ5UnVubmVyXVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBzZWxlY3QoXG4gICRlbGVtZW50LFxuICBjdXN0b21QYWdlRG9jdW1lbnQsXG4gIGNvbmZpZyxcbiAgc2VsZWN0U3RyYXRlZ3ksXG4gIGlzQ2FsbGVkQnlSdW5uZXJcbikge1xuICBjb25maWcgPSBjb25maWcgfHwgZGVmYXVsdFNlbGVjdG9yQ29uZmlnO1xuICBzZWxlY3RTdHJhdGVneSA9IHNlbGVjdFN0cmF0ZWd5IHx8IGdldFNpbmdsZVNlbGVjdG9yO1xuXG4gIGxldCBzZWxlY3RvciA9IHtcbiAgICAkdGFyZ2V0OiAkZWxlbWVudCxcbiAgICBzdWNjZXNzOiB0cnVlLFxuICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICBoYXNXYXJuaW5nOiBmYWxzZSxcbiAgICB2YWx1ZTogbnVsbCxcbiAgICBlcnJvcnM6IFtdLFxuICAgIHdhcm5pbmdzOiBbXSxcbiAgICBjb25maWdcbiAgfTtcbiAgbGV0IG9wdGlvbnMgPSBjb25maWdUb09wdGlvbnMoY29uZmlnKTtcblxuICB0cnkge1xuICAgIC8vIHVzZSBjdXN0b20gZG9jdW1lbnQgcm9vdCBpZiBzcGVjaWZpZWRcbiAgICBpZiAoY3VzdG9tUGFnZURvY3VtZW50KSB7XG4gICAgICBvcHRpb25zLnJvb3QgPSBjdXN0b21QYWdlRG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gcHJvZHVjZSB0aGUgc2VsZWN0b3JcbiAgICBsZXQgdW50ZXN0ZWRTZWxlY3RvciA9IGlzQ2FsbGVkQnlSdW5uZXIgP1xuICAgICAgc2VsZWN0U3RyYXRlZ3koJGVsZW1lbnQsIG9wdGlvbnMpIDpcbiAgICAgIHNlbGVjdFN0cmF0ZWd5KCRlbGVtZW50WzBdLCBvcHRpb25zKTtcbiAgICAvLyB0ZXN0IHRoZSBzZWxlY3RvclxuICAgIGxldCBpc1ZhbGlkID0gaXNDYWxsZWRCeVJ1bm5lciA/XG4gICAgICBvcHRpb25zLnJvb3QucXVlcnlTZWxlY3Rvcih1bnRlc3RlZFNlbGVjdG9yKSA9PT0gJGVsZW1lbnQgOlxuICAgICAgJChvcHRpb25zLnJvb3QpLmZpbmQodW50ZXN0ZWRTZWxlY3RvcikuaXMoJGVsZW1lbnQpO1xuXG4gICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgIGNvbnN0IHNob3J0ZXJTZWxlY3RvciA9IHNob3J0ZW5TZWxlY3RvckJ5U2hpZnRpbmcoXG4gICAgICAgIHVudGVzdGVkU2VsZWN0b3IsIG9wdGlvbnMucm9vdCwgJGVsZW1lbnQsIGlzQ2FsbGVkQnlSdW5uZXJcbiAgICAgICk7XG5cbiAgICAgIHNlbGVjdG9yLnZhbHVlID0gc2hvcnRlclNlbGVjdG9yIHx8IHVudGVzdGVkU2VsZWN0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZEVycm9yTWVzc2FnZShzZWxlY3RvciwgRVJST1JTLlZBTElEQVRJT05fRkFJTEVELCB7XG4gICAgICAgIGludmFsaWRhdGVkU2VsZWN0b3I6IHVudGVzdGVkU2VsZWN0b3IsXG4gICAgICAgIGNvbmZpZ0NvbXBvc2l0aW9uOiBjb25maWcuZ2V0Q29tcG9zaXRpb24oKSxcbiAgICAgICAgZXhwZWN0ZWRFbGVtZW50OiAkZWxlbWVudFswXSB8fCAkZWxlbWVudCxcbiAgICAgICAgc3RyYXRlZ3k6IHNlbGVjdFN0cmF0ZWd5XG4gICAgICB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHNlbGVjdG9yLCBFUlJPUlMuR0VORVJBVElPTl9GQUlMRUQsIHtcbiAgICAgIGZhaWxlZENvbmZpZ0NvbXBvc2l0aW9uOiBjb25maWcuZ2V0Q29tcG9zaXRpb24oKSxcbiAgICAgIGVycm9yLFxuICAgICAgc3RyYXRlZ3k6IHNlbGVjdFN0cmF0ZWd5XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIXNlbGVjdG9yLnZhbHVlKSB7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHNlbGVjdG9yLCBFUlJPUlMuVkFMVUVfSVNfTUlTU0lORywge1xuICAgICAgZm91bmRWYWx1ZTogc2VsZWN0b3IudmFsdWUsXG4gICAgICBzdHJhdGVneTogc2VsZWN0U3RyYXRlZ3lcbiAgICB9KTtcbiAgfVxuXG4gIHNlbGVjdG9yLnN1Y2Nlc3MgPSAhc2VsZWN0b3IuaGFzRXJyb3I7XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Q7XG4iXSwiZmlsZSI6InNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJ9
