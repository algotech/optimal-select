"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _select = require("../../select");

var _selectorConfiguration = _interopRequireDefault(require("../selector-configuration"));

var _optionsConverter = require("./options-converter");

var _postGenerationOptimization = require("./post-generation-optimization");

var _exceptionsHelper = require("./exceptions-helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
  This is the fallback configuration of no configuration is supplied to
  produceSelector function.
 */
var defaultSelectorConfig = new _selectorConfiguration["default"]('Default Selector Configuration');
/**
 * Creates a selector for the provided element with the specifiec config
 * @param {Element} element The element to create a selector for
 * @param {Object} [customPageDocument]
 * @param {SelectorConfig} [config]
 * @param {Function} [selectStrategy]
 * @return {Object}
 */

function select(element, customPageDocument, config, selectStrategy) {
  config = config || defaultSelectorConfig;
  selectStrategy = selectStrategy || _select.getSingleSelector;
  var selector = {
    $target: element,
    success: true,
    hasError: false,
    hasWarning: false,
    value: null,
    errors: [],
    warnings: [],
    config: config
  };
  var options = (0, _optionsConverter.configToOptions)(config);

  try {
    // use custom document root if specified
    if (customPageDocument) {
      options.root = customPageDocument;
    } // produce the selector


    var untestedSelector = selectStrategy(element, options); // test the selector

    var isValid = options.root.querySelector(untestedSelector) === element;

    if (isValid) {
      var shorterSelector = (0, _postGenerationOptimization.shortenSelectorByShifting)(untestedSelector, options.root, element);
      selector.value = shorterSelector || untestedSelector;
    } else {
      (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALIDATION_FAILED, {
        invalidatedSelector: untestedSelector,
        configComposition: config.getComposition(),
        expectedElement: element,
        strategy: selectStrategy
      });
    }
  } catch (error) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.GENERATION_FAILED, {
      failedConfigComposition: config.getComposition(),
      error: error,
      strategy: selectStrategy
    });
  }

  if (!selector.value) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALUE_IS_MISSING, {
      foundValue: selector.value,
      strategy: selectStrategy
    });
  }

  selector.success = !selector.hasError;
  return selector;
}

var _default = select;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0U2VsZWN0b3JDb25maWciLCJTZWxlY3RvckNvbmZpZ3VyYXRpb24iLCJzZWxlY3QiLCJlbGVtZW50IiwiY3VzdG9tUGFnZURvY3VtZW50IiwiY29uZmlnIiwic2VsZWN0U3RyYXRlZ3kiLCJnZXRTaW5nbGVTZWxlY3RvciIsInNlbGVjdG9yIiwiJHRhcmdldCIsInN1Y2Nlc3MiLCJoYXNFcnJvciIsImhhc1dhcm5pbmciLCJ2YWx1ZSIsImVycm9ycyIsIndhcm5pbmdzIiwib3B0aW9ucyIsInJvb3QiLCJ1bnRlc3RlZFNlbGVjdG9yIiwiaXNWYWxpZCIsInF1ZXJ5U2VsZWN0b3IiLCJzaG9ydGVyU2VsZWN0b3IiLCJFUlJPUlMiLCJWQUxJREFUSU9OX0ZBSUxFRCIsImludmFsaWRhdGVkU2VsZWN0b3IiLCJjb25maWdDb21wb3NpdGlvbiIsImdldENvbXBvc2l0aW9uIiwiZXhwZWN0ZWRFbGVtZW50Iiwic3RyYXRlZ3kiLCJlcnJvciIsIkdFTkVSQVRJT05fRkFJTEVEIiwiZmFpbGVkQ29uZmlnQ29tcG9zaXRpb24iLCJWQUxVRV9JU19NSVNTSU5HIiwiZm91bmRWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxxQkFBcUIsR0FBRyxJQUFJQyxpQ0FBSixDQUMxQixnQ0FEMEIsQ0FBNUI7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNDLE1BQVQsQ0FDRUMsT0FERixFQUVFQyxrQkFGRixFQUdFQyxNQUhGLEVBSUVDLGNBSkYsRUFLRTtBQUNBRCxFQUFBQSxNQUFNLEdBQUdBLE1BQU0sSUFBSUwscUJBQW5CO0FBQ0FNLEVBQUFBLGNBQWMsR0FBR0EsY0FBYyxJQUFJQyx5QkFBbkM7QUFFQSxNQUFJQyxRQUFRLEdBQUc7QUFDYkMsSUFBQUEsT0FBTyxFQUFFTixPQURJO0FBRWJPLElBQUFBLE9BQU8sRUFBRSxJQUZJO0FBR2JDLElBQUFBLFFBQVEsRUFBRSxLQUhHO0FBSWJDLElBQUFBLFVBQVUsRUFBRSxLQUpDO0FBS2JDLElBQUFBLEtBQUssRUFBRSxJQUxNO0FBTWJDLElBQUFBLE1BQU0sRUFBRSxFQU5LO0FBT2JDLElBQUFBLFFBQVEsRUFBRSxFQVBHO0FBUWJWLElBQUFBLE1BQU0sRUFBTkE7QUFSYSxHQUFmO0FBVUEsTUFBSVcsT0FBTyxHQUFHLHVDQUFnQlgsTUFBaEIsQ0FBZDs7QUFFQSxNQUFJO0FBQ0Y7QUFDQSxRQUFJRCxrQkFBSixFQUF3QjtBQUN0QlksTUFBQUEsT0FBTyxDQUFDQyxJQUFSLEdBQWViLGtCQUFmO0FBQ0QsS0FKQyxDQU1GOzs7QUFDQSxRQUFJYyxnQkFBZ0IsR0FBR1osY0FBYyxDQUFDSCxPQUFELEVBQVVhLE9BQVYsQ0FBckMsQ0FQRSxDQVFGOztBQUNBLFFBQUlHLE9BQU8sR0FBR0gsT0FBTyxDQUFDQyxJQUFSLENBQWFHLGFBQWIsQ0FBMkJGLGdCQUEzQixNQUFpRGYsT0FBL0Q7O0FBRUEsUUFBSWdCLE9BQUosRUFBYTtBQUNYLFVBQU1FLGVBQWUsR0FBRywyREFDdEJILGdCQURzQixFQUNKRixPQUFPLENBQUNDLElBREosRUFDVWQsT0FEVixDQUF4QjtBQUlBSyxNQUFBQSxRQUFRLENBQUNLLEtBQVQsR0FBaUJRLGVBQWUsSUFBSUgsZ0JBQXBDO0FBQ0QsS0FORCxNQU1PO0FBQ0wsNkNBQWdCVixRQUFoQixFQUEwQmMseUJBQU9DLGlCQUFqQyxFQUFvRDtBQUNsREMsUUFBQUEsbUJBQW1CLEVBQUVOLGdCQUQ2QjtBQUVsRE8sUUFBQUEsaUJBQWlCLEVBQUVwQixNQUFNLENBQUNxQixjQUFQLEVBRitCO0FBR2xEQyxRQUFBQSxlQUFlLEVBQUV4QixPQUhpQztBQUlsRHlCLFFBQUFBLFFBQVEsRUFBRXRCO0FBSndDLE9BQXBEO0FBTUQ7QUFDRixHQXpCRCxDQXlCRSxPQUFPdUIsS0FBUCxFQUFjO0FBQ2QsMkNBQWdCckIsUUFBaEIsRUFBMEJjLHlCQUFPUSxpQkFBakMsRUFBb0Q7QUFDbERDLE1BQUFBLHVCQUF1QixFQUFFMUIsTUFBTSxDQUFDcUIsY0FBUCxFQUR5QjtBQUVsREcsTUFBQUEsS0FBSyxFQUFMQSxLQUZrRDtBQUdsREQsTUFBQUEsUUFBUSxFQUFFdEI7QUFId0MsS0FBcEQ7QUFLRDs7QUFFRCxNQUFJLENBQUNFLFFBQVEsQ0FBQ0ssS0FBZCxFQUFxQjtBQUNuQiwyQ0FBZ0JMLFFBQWhCLEVBQTBCYyx5QkFBT1UsZ0JBQWpDLEVBQW1EO0FBQ2pEQyxNQUFBQSxVQUFVLEVBQUV6QixRQUFRLENBQUNLLEtBRDRCO0FBRWpEZSxNQUFBQSxRQUFRLEVBQUV0QjtBQUZ1QyxLQUFuRDtBQUlEOztBQUVERSxFQUFBQSxRQUFRLENBQUNFLE9BQVQsR0FBbUIsQ0FBQ0YsUUFBUSxDQUFDRyxRQUE3QjtBQUVBLFNBQU9ILFFBQVA7QUFDRDs7ZUFFY04sTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFNpbmdsZVNlbGVjdG9yIH0gZnJvbSAnLi4vLi4vc2VsZWN0JztcblxuaW1wb3J0IFNlbGVjdG9yQ29uZmlndXJhdGlvbiBmcm9tICcuLi9zZWxlY3Rvci1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IGNvbmZpZ1RvT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucy1jb252ZXJ0ZXInXG5pbXBvcnQgeyBzaG9ydGVuU2VsZWN0b3JCeVNoaWZ0aW5nIH0gZnJvbSAnLi9wb3N0LWdlbmVyYXRpb24tb3B0aW1pemF0aW9uJztcbmltcG9ydCB7IGFkZEVycm9yTWVzc2FnZSwgRVJST1JTIH0gZnJvbSAnLi9leGNlcHRpb25zLWhlbHBlcidcblxuLypcbiAgVGhpcyBpcyB0aGUgZmFsbGJhY2sgY29uZmlndXJhdGlvbiBvZiBubyBjb25maWd1cmF0aW9uIGlzIHN1cHBsaWVkIHRvXG4gIHByb2R1Y2VTZWxlY3RvciBmdW5jdGlvbi5cbiAqL1xubGV0IGRlZmF1bHRTZWxlY3RvckNvbmZpZyA9IG5ldyBTZWxlY3RvckNvbmZpZ3VyYXRpb24oXG4gICdEZWZhdWx0IFNlbGVjdG9yIENvbmZpZ3VyYXRpb24nXG4pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzZWxlY3RvciBmb3IgdGhlIHByb3ZpZGVkIGVsZW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVjIGNvbmZpZ1xuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNyZWF0ZSBhIHNlbGVjdG9yIGZvclxuICogQHBhcmFtIHtPYmplY3R9IFtjdXN0b21QYWdlRG9jdW1lbnRdXG4gKiBAcGFyYW0ge1NlbGVjdG9yQ29uZmlnfSBbY29uZmlnXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3NlbGVjdFN0cmF0ZWd5XVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBzZWxlY3QoXG4gIGVsZW1lbnQsXG4gIGN1c3RvbVBhZ2VEb2N1bWVudCxcbiAgY29uZmlnLFxuICBzZWxlY3RTdHJhdGVneVxuKSB7XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCBkZWZhdWx0U2VsZWN0b3JDb25maWc7XG4gIHNlbGVjdFN0cmF0ZWd5ID0gc2VsZWN0U3RyYXRlZ3kgfHwgZ2V0U2luZ2xlU2VsZWN0b3I7XG5cbiAgbGV0IHNlbGVjdG9yID0ge1xuICAgICR0YXJnZXQ6IGVsZW1lbnQsXG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgICBoYXNFcnJvcjogZmFsc2UsXG4gICAgaGFzV2FybmluZzogZmFsc2UsXG4gICAgdmFsdWU6IG51bGwsXG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW10sXG4gICAgY29uZmlnXG4gIH07XG4gIGxldCBvcHRpb25zID0gY29uZmlnVG9PcHRpb25zKGNvbmZpZyk7XG5cbiAgdHJ5IHtcbiAgICAvLyB1c2UgY3VzdG9tIGRvY3VtZW50IHJvb3QgaWYgc3BlY2lmaWVkXG4gICAgaWYgKGN1c3RvbVBhZ2VEb2N1bWVudCkge1xuICAgICAgb3B0aW9ucy5yb290ID0gY3VzdG9tUGFnZURvY3VtZW50O1xuICAgIH1cblxuICAgIC8vIHByb2R1Y2UgdGhlIHNlbGVjdG9yXG4gICAgbGV0IHVudGVzdGVkU2VsZWN0b3IgPSBzZWxlY3RTdHJhdGVneShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAvLyB0ZXN0IHRoZSBzZWxlY3RvclxuICAgIGxldCBpc1ZhbGlkID0gb3B0aW9ucy5yb290LnF1ZXJ5U2VsZWN0b3IodW50ZXN0ZWRTZWxlY3RvcikgPT09IGVsZW1lbnQ7XG5cbiAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgY29uc3Qgc2hvcnRlclNlbGVjdG9yID0gc2hvcnRlblNlbGVjdG9yQnlTaGlmdGluZyhcbiAgICAgICAgdW50ZXN0ZWRTZWxlY3Rvciwgb3B0aW9ucy5yb290LCBlbGVtZW50XG4gICAgICApO1xuXG4gICAgICBzZWxlY3Rvci52YWx1ZSA9IHNob3J0ZXJTZWxlY3RvciB8fCB1bnRlc3RlZFNlbGVjdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZGRFcnJvck1lc3NhZ2Uoc2VsZWN0b3IsIEVSUk9SUy5WQUxJREFUSU9OX0ZBSUxFRCwge1xuICAgICAgICBpbnZhbGlkYXRlZFNlbGVjdG9yOiB1bnRlc3RlZFNlbGVjdG9yLFxuICAgICAgICBjb25maWdDb21wb3NpdGlvbjogY29uZmlnLmdldENvbXBvc2l0aW9uKCksXG4gICAgICAgIGV4cGVjdGVkRWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgc3RyYXRlZ3k6IHNlbGVjdFN0cmF0ZWd5XG4gICAgICB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHNlbGVjdG9yLCBFUlJPUlMuR0VORVJBVElPTl9GQUlMRUQsIHtcbiAgICAgIGZhaWxlZENvbmZpZ0NvbXBvc2l0aW9uOiBjb25maWcuZ2V0Q29tcG9zaXRpb24oKSxcbiAgICAgIGVycm9yLFxuICAgICAgc3RyYXRlZ3k6IHNlbGVjdFN0cmF0ZWd5XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIXNlbGVjdG9yLnZhbHVlKSB7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHNlbGVjdG9yLCBFUlJPUlMuVkFMVUVfSVNfTUlTU0lORywge1xuICAgICAgZm91bmRWYWx1ZTogc2VsZWN0b3IudmFsdWUsXG4gICAgICBzdHJhdGVneTogc2VsZWN0U3RyYXRlZ3lcbiAgICB9KTtcbiAgfVxuXG4gIHNlbGVjdG9yLnN1Y2Nlc3MgPSAhc2VsZWN0b3IuaGFzRXJyb3I7XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Q7XG4iXSwiZmlsZSI6InNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJ9
