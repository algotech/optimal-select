"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _jquery = _interopRequireDefault(require("jquery"));

var _select = require("../../select");

var _selectorConfiguration = _interopRequireDefault(require("../selector-configuration"));

var _optionsConverter = require("./options-converter");

var _postGenerationOptimization = require("./post-generation-optimization");

var _exceptionsHelper = require("./exceptions-helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
  This is the fallback configuration of no configuration is supplied to
  produceSelector function.
 */
var defaultSelectorConfig = new _selectorConfiguration["default"]('Default Selector Configuration');
/**
 * Creates a selector for the provided element with the specifiec config
 * @param {JQuery} $element The element to create a selector for
 * @param {Object} [customPageDocument]
 * @param {SelectorConfig} [config]
 * @param {Function} [selectStrategy]
 * @return {Object}
 */

function select($element, customPageDocument, config, selectStrategy) {
  config = config || defaultSelectorConfig;
  selectStrategy = selectStrategy || _select.getSingleSelector;
  var selector = {
    $target: $element,
    success: true,
    hasError: false,
    hasWarning: false,
    value: null,
    errors: [],
    warnings: [],
    config: config
  };
  var options = (0, _optionsConverter.configToOptions)(config);

  try {
    // use custom document root if specified
    if (customPageDocument) {
      options.root = customPageDocument;
    } // produce the selector


    var untestedSelector = selectStrategy($element[0], options); // test the selector

    var isValid = (0, _jquery["default"])(options.root).find(untestedSelector).is($element);

    if (isValid) {
      var shorterSelector = (0, _postGenerationOptimization.shortenSelectorByShifting)(untestedSelector, options.root, $element);
      selector.value = shorterSelector || untestedSelector;
    } else {
      (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALIDATION_FAILED, {
        invalidatedSelector: untestedSelector,
        configComposition: config.getComposition(),
        expectedElement: $element[0] || $element,
        strategy: selectStrategy
      });
    }
  } catch (error) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.GENERATION_FAILED, {
      failedConfigComposition: config.getComposition(),
      error: error,
      strategy: selectStrategy
    });
  }

  if (!selector.value) {
    (0, _exceptionsHelper.addErrorMessage)(selector, _exceptionsHelper.ERRORS.VALUE_IS_MISSING, {
      foundValue: selector.value,
      strategy: selectStrategy
    });
  }

  selector.success = !selector.hasError;
  return selector;
}

var _default = select;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJdLCJuYW1lcyI6WyJkZWZhdWx0U2VsZWN0b3JDb25maWciLCJTZWxlY3RvckNvbmZpZ3VyYXRpb24iLCJzZWxlY3QiLCIkZWxlbWVudCIsImN1c3RvbVBhZ2VEb2N1bWVudCIsImNvbmZpZyIsInNlbGVjdFN0cmF0ZWd5IiwiZ2V0U2luZ2xlU2VsZWN0b3IiLCJzZWxlY3RvciIsIiR0YXJnZXQiLCJzdWNjZXNzIiwiaGFzRXJyb3IiLCJoYXNXYXJuaW5nIiwidmFsdWUiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsIm9wdGlvbnMiLCJyb290IiwidW50ZXN0ZWRTZWxlY3RvciIsImlzVmFsaWQiLCJmaW5kIiwiaXMiLCJzaG9ydGVyU2VsZWN0b3IiLCJFUlJPUlMiLCJWQUxJREFUSU9OX0ZBSUxFRCIsImludmFsaWRhdGVkU2VsZWN0b3IiLCJjb25maWdDb21wb3NpdGlvbiIsImdldENvbXBvc2l0aW9uIiwiZXhwZWN0ZWRFbGVtZW50Iiwic3RyYXRlZ3kiLCJlcnJvciIsIkdFTkVSQVRJT05fRkFJTEVEIiwiZmFpbGVkQ29uZmlnQ29tcG9zaXRpb24iLCJWQUxVRV9JU19NSVNTSU5HIiwiZm91bmRWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7Ozs7QUFJQSxJQUFJQSxxQkFBcUIsR0FBRyxJQUFJQyxpQ0FBSixDQUMxQixnQ0FEMEIsQ0FBNUI7QUFJQTs7Ozs7Ozs7O0FBUUEsU0FBU0MsTUFBVCxDQUNFQyxRQURGLEVBRUVDLGtCQUZGLEVBR0VDLE1BSEYsRUFJRUMsY0FKRixFQUtFO0FBQ0FELEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJTCxxQkFBbkI7QUFDQU0sRUFBQUEsY0FBYyxHQUFHQSxjQUFjLElBQUlDLHlCQUFuQztBQUVBLE1BQUlDLFFBQVEsR0FBRztBQUNiQyxJQUFBQSxPQUFPLEVBQUVOLFFBREk7QUFFYk8sSUFBQUEsT0FBTyxFQUFFLElBRkk7QUFHYkMsSUFBQUEsUUFBUSxFQUFFLEtBSEc7QUFJYkMsSUFBQUEsVUFBVSxFQUFFLEtBSkM7QUFLYkMsSUFBQUEsS0FBSyxFQUFFLElBTE07QUFNYkMsSUFBQUEsTUFBTSxFQUFFLEVBTks7QUFPYkMsSUFBQUEsUUFBUSxFQUFFLEVBUEc7QUFRYlYsSUFBQUEsTUFBTSxFQUFOQTtBQVJhLEdBQWY7QUFVQSxNQUFJVyxPQUFPLEdBQUcsdUNBQWdCWCxNQUFoQixDQUFkOztBQUVBLE1BQUk7QUFDRjtBQUNBLFFBQUlELGtCQUFKLEVBQXdCO0FBQ3RCWSxNQUFBQSxPQUFPLENBQUNDLElBQVIsR0FBZWIsa0JBQWY7QUFDRCxLQUpDLENBS0Y7OztBQUNBLFFBQUljLGdCQUFnQixHQUFHWixjQUFjLENBQUNILFFBQVEsQ0FBQyxDQUFELENBQVQsRUFBY2EsT0FBZCxDQUFyQyxDQU5FLENBT0Y7O0FBQ0EsUUFBSUcsT0FBTyxHQUFHLHdCQUFFSCxPQUFPLENBQUNDLElBQVYsRUFBZ0JHLElBQWhCLENBQXFCRixnQkFBckIsRUFBdUNHLEVBQXZDLENBQTBDbEIsUUFBMUMsQ0FBZDs7QUFFQSxRQUFJZ0IsT0FBSixFQUFhO0FBQ1gsVUFBTUcsZUFBZSxHQUFHLDJEQUN0QkosZ0JBRHNCLEVBQ0pGLE9BQU8sQ0FBQ0MsSUFESixFQUNVZCxRQURWLENBQXhCO0FBSUFLLE1BQUFBLFFBQVEsQ0FBQ0ssS0FBVCxHQUFpQlMsZUFBZSxJQUFJSixnQkFBcEM7QUFDRCxLQU5ELE1BTU87QUFDTCw2Q0FBZ0JWLFFBQWhCLEVBQTBCZSx5QkFBT0MsaUJBQWpDLEVBQW9EO0FBQ2xEQyxRQUFBQSxtQkFBbUIsRUFBRVAsZ0JBRDZCO0FBRWxEUSxRQUFBQSxpQkFBaUIsRUFBRXJCLE1BQU0sQ0FBQ3NCLGNBQVAsRUFGK0I7QUFHbERDLFFBQUFBLGVBQWUsRUFBRXpCLFFBQVEsQ0FBQyxDQUFELENBQVIsSUFBZUEsUUFIa0I7QUFJbEQwQixRQUFBQSxRQUFRLEVBQUV2QjtBQUp3QyxPQUFwRDtBQU1EO0FBQ0YsR0F4QkQsQ0F3QkUsT0FBT3dCLEtBQVAsRUFBYztBQUNkLDJDQUFnQnRCLFFBQWhCLEVBQTBCZSx5QkFBT1EsaUJBQWpDLEVBQW9EO0FBQ2xEQyxNQUFBQSx1QkFBdUIsRUFBRTNCLE1BQU0sQ0FBQ3NCLGNBQVAsRUFEeUI7QUFFbERHLE1BQUFBLEtBQUssRUFBTEEsS0FGa0Q7QUFHbERELE1BQUFBLFFBQVEsRUFBRXZCO0FBSHdDLEtBQXBEO0FBS0Q7O0FBRUQsTUFBSSxDQUFDRSxRQUFRLENBQUNLLEtBQWQsRUFBcUI7QUFDbkIsMkNBQWdCTCxRQUFoQixFQUEwQmUseUJBQU9VLGdCQUFqQyxFQUFtRDtBQUNqREMsTUFBQUEsVUFBVSxFQUFFMUIsUUFBUSxDQUFDSyxLQUQ0QjtBQUVqRGdCLE1BQUFBLFFBQVEsRUFBRXZCO0FBRnVDLEtBQW5EO0FBSUQ7O0FBRURFLEVBQUFBLFFBQVEsQ0FBQ0UsT0FBVCxHQUFtQixDQUFDRixRQUFRLENBQUNHLFFBQTdCO0FBRUEsU0FBT0gsUUFBUDtBQUNEOztlQUVjTixNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IHsgZ2V0U2luZ2xlU2VsZWN0b3IgfSBmcm9tICcuLi8uLi9zZWxlY3QnO1xuXG5pbXBvcnQgU2VsZWN0b3JDb25maWd1cmF0aW9uIGZyb20gJy4uL3NlbGVjdG9yLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgY29uZmlnVG9PcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zLWNvbnZlcnRlcidcbmltcG9ydCB7IHNob3J0ZW5TZWxlY3RvckJ5U2hpZnRpbmcgfSBmcm9tICcuL3Bvc3QtZ2VuZXJhdGlvbi1vcHRpbWl6YXRpb24nO1xuaW1wb3J0IHsgYWRkRXJyb3JNZXNzYWdlLCBFUlJPUlMgfSBmcm9tICcuL2V4Y2VwdGlvbnMtaGVscGVyJ1xuXG4vKlxuICBUaGlzIGlzIHRoZSBmYWxsYmFjayBjb25maWd1cmF0aW9uIG9mIG5vIGNvbmZpZ3VyYXRpb24gaXMgc3VwcGxpZWQgdG9cbiAgcHJvZHVjZVNlbGVjdG9yIGZ1bmN0aW9uLlxuICovXG5sZXQgZGVmYXVsdFNlbGVjdG9yQ29uZmlnID0gbmV3IFNlbGVjdG9yQ29uZmlndXJhdGlvbihcbiAgJ0RlZmF1bHQgU2VsZWN0b3IgQ29uZmlndXJhdGlvbidcbik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNlbGVjdG9yIGZvciB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWMgY29uZmlnXG4gKiBAcGFyYW0ge0pRdWVyeX0gJGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY3JlYXRlIGEgc2VsZWN0b3IgZm9yXG4gKiBAcGFyYW0ge09iamVjdH0gW2N1c3RvbVBhZ2VEb2N1bWVudF1cbiAqIEBwYXJhbSB7U2VsZWN0b3JDb25maWd9IFtjb25maWddXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbc2VsZWN0U3RyYXRlZ3ldXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHNlbGVjdChcbiAgJGVsZW1lbnQsXG4gIGN1c3RvbVBhZ2VEb2N1bWVudCxcbiAgY29uZmlnLFxuICBzZWxlY3RTdHJhdGVneVxuKSB7XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCBkZWZhdWx0U2VsZWN0b3JDb25maWc7XG4gIHNlbGVjdFN0cmF0ZWd5ID0gc2VsZWN0U3RyYXRlZ3kgfHwgZ2V0U2luZ2xlU2VsZWN0b3I7XG5cbiAgbGV0IHNlbGVjdG9yID0ge1xuICAgICR0YXJnZXQ6ICRlbGVtZW50LFxuICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgaGFzRXJyb3I6IGZhbHNlLFxuICAgIGhhc1dhcm5pbmc6IGZhbHNlLFxuICAgIHZhbHVlOiBudWxsLFxuICAgIGVycm9yczogW10sXG4gICAgd2FybmluZ3M6IFtdLFxuICAgIGNvbmZpZ1xuICB9O1xuICBsZXQgb3B0aW9ucyA9IGNvbmZpZ1RvT3B0aW9ucyhjb25maWcpO1xuXG4gIHRyeSB7XG4gICAgLy8gdXNlIGN1c3RvbSBkb2N1bWVudCByb290IGlmIHNwZWNpZmllZFxuICAgIGlmIChjdXN0b21QYWdlRG9jdW1lbnQpIHtcbiAgICAgIG9wdGlvbnMucm9vdCA9IGN1c3RvbVBhZ2VEb2N1bWVudDtcbiAgICB9XG4gICAgLy8gcHJvZHVjZSB0aGUgc2VsZWN0b3JcbiAgICBsZXQgdW50ZXN0ZWRTZWxlY3RvciA9IHNlbGVjdFN0cmF0ZWd5KCRlbGVtZW50WzBdLCBvcHRpb25zKTtcbiAgICAvLyB0ZXN0IHRoZSBzZWxlY3RvclxuICAgIGxldCBpc1ZhbGlkID0gJChvcHRpb25zLnJvb3QpLmZpbmQodW50ZXN0ZWRTZWxlY3RvcikuaXMoJGVsZW1lbnQpO1xuXG4gICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgIGNvbnN0IHNob3J0ZXJTZWxlY3RvciA9IHNob3J0ZW5TZWxlY3RvckJ5U2hpZnRpbmcoXG4gICAgICAgIHVudGVzdGVkU2VsZWN0b3IsIG9wdGlvbnMucm9vdCwgJGVsZW1lbnRcbiAgICAgICk7XG5cbiAgICAgIHNlbGVjdG9yLnZhbHVlID0gc2hvcnRlclNlbGVjdG9yIHx8IHVudGVzdGVkU2VsZWN0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZEVycm9yTWVzc2FnZShzZWxlY3RvciwgRVJST1JTLlZBTElEQVRJT05fRkFJTEVELCB7XG4gICAgICAgIGludmFsaWRhdGVkU2VsZWN0b3I6IHVudGVzdGVkU2VsZWN0b3IsXG4gICAgICAgIGNvbmZpZ0NvbXBvc2l0aW9uOiBjb25maWcuZ2V0Q29tcG9zaXRpb24oKSxcbiAgICAgICAgZXhwZWN0ZWRFbGVtZW50OiAkZWxlbWVudFswXSB8fCAkZWxlbWVudCxcbiAgICAgICAgc3RyYXRlZ3k6IHNlbGVjdFN0cmF0ZWd5XG4gICAgICB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHNlbGVjdG9yLCBFUlJPUlMuR0VORVJBVElPTl9GQUlMRUQsIHtcbiAgICAgIGZhaWxlZENvbmZpZ0NvbXBvc2l0aW9uOiBjb25maWcuZ2V0Q29tcG9zaXRpb24oKSxcbiAgICAgIGVycm9yLFxuICAgICAgc3RyYXRlZ3k6IHNlbGVjdFN0cmF0ZWd5XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIXNlbGVjdG9yLnZhbHVlKSB7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHNlbGVjdG9yLCBFUlJPUlMuVkFMVUVfSVNfTUlTU0lORywge1xuICAgICAgZm91bmRWYWx1ZTogc2VsZWN0b3IudmFsdWUsXG4gICAgICBzdHJhdGVneTogc2VsZWN0U3RyYXRlZ3lcbiAgICB9KTtcbiAgfVxuXG4gIHNlbGVjdG9yLnN1Y2Nlc3MgPSAhc2VsZWN0b3IuaGFzRXJyb3I7XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Q7XG4iXSwiZmlsZSI6InNlbGVjdG9yLWdlbmVyYXRpb24vcHJvZHVjZS1zZWxlY3Rvci9zZWxlY3Qtd3JhcHBlci5qcyJ9
