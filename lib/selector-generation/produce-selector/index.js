"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSelector = getSelector;
exports["default"] = exports.produceSelector = void 0;

var _jquery = _interopRequireDefault(require("jquery"));

var _select = _interopRequireWildcard(require("../../select"));

var _selectorConfiguration = _interopRequireDefault(require("../selector-configuration"));

var _selectWrapper = _interopRequireDefault(require("./select-wrapper"));

var _exceptionsHelper = require("./exceptions-helper");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var defaultSelectorConfig = new _selectorConfiguration["default"]('Default Selector Configuration');
/**
 * Produces the selector and uses fallbacks in case the current config
 * is too restrictive for the current element
 * @param {JQuery} $element
 * @param {Object} $customPageDocument
 * @param {SelectorConfig} config
 * @return {Object}
 */

function produceSelectorFn($element, $customPageDocument, config) {
  // try with the specified config and default strategy
  var sel1 = (0, _selectWrapper["default"])($element, $customPageDocument, config, _select["default"]);

  if (!sel1.hasError) {
    return sel1;
  } // try with the fallback config and default strategy


  var sel2 = (0, _selectWrapper["default"])($element, $customPageDocument, null, _select["default"]);

  if (!defaultSelectorConfig.isIncludedInConfig(config)) {
    (0, _exceptionsHelper.addWarningMessage)(sel2, _exceptionsHelper.WARNINGS.FELL_TO_DEFAULT_CONFIG);
  }

  if (!sel2.hasError) {
    return sel2;
  } // try with the specified config and the fallback strategy


  var sel3 = (0, _selectWrapper["default"])($element, $customPageDocument, config, _select.getSingleSelector);
  (0, _exceptionsHelper.addWarningMessage)(sel3, _exceptionsHelper.WARNINGS.FELL_TO_DEFAULT_STRATEGY);

  if (!sel3.hasError) {
    return sel3;
  } // try with the fallback config and the fallback strategy


  var sel4 = (0, _selectWrapper["default"])($element, $customPageDocument, null, _select.getSingleSelector);

  if (!defaultSelectorConfig.isIncludedInConfig(config)) {
    (0, _exceptionsHelper.addWarningMessage)(sel4, _exceptionsHelper.WARNINGS.FELL_TO_DEFAULT_CONFIG);
  }

  (0, _exceptionsHelper.addWarningMessage)(sel4, _exceptionsHelper.WARNINGS.FELL_TO_DEFAULT_STRATEGY);

  if (!sel4.hasError) {
    return sel4;
  } // try with tags only config and defaultStrategy


  var tagsOnlyComposition = {
    classes: false,
    ids: false,
    tags: true,
    attributes: false,
    exceptions: Object.assign({}, {
      forbiddenClassSubstrings: config.getForbiddenClassSubstrings()
    }, {
      forbiddenIdSubstrings: config.getForbiddenIdSubstrings()
    }, {
      forbiddenAttributeSubstrings: config.getForbiddenAttributeSubstrings()
    })
  };
  var configTagsOnly = new _selectorConfiguration["default"](config.name, tagsOnlyComposition);
  var sel5 = (0, _selectWrapper["default"])($element, $customPageDocument, configTagsOnly, _select["default"]);

  if (!configTagsOnly.isIncludedInConfig(config)) {
    (0, _exceptionsHelper.addWarningMessage)(sel5, _exceptionsHelper.WARNINGS.FELL_TO_DEFAULT_CONFIG);
  }

  if (!sel5.hasError) {
    return sel5;
  }

  logAllInvalidSelectorsError(sel1, sel2, sel3, sel4, sel5);
  return null;
}

function logAllInvalidSelectorsError(sel1, sel2, sel3, sel4, sel5) {
  console.error('All produce selector attempts failed. The selectors are:');
  console.error('userConfig + defaultStrategy', sel1);
  console.error('fallbackConfig + defaultStrategy', sel2);
  console.error('userConfig + fallbackStrategy', sel3);
  console.error('fallbackConfig + fallbackStrategy', sel4);
  console.error('tagsOnlyComposition + defaultStrategy', sel5);
}

function produceSelectorFnWrapper($element, $customPageDocument, config) {
  var selector = produceSelectorFn($element, $customPageDocument, config);

  if (selector == null) {
    return console.error('Selector is null!');
  }

  if (selector.hasError) {
    console.error('Selector with errors: ', selector.errors);
  }

  if (selector.hasWarning) {
    console.warn('Selector with warnings: ', selector.warnings);
  }

  return selector;
}
/**
* Produces a selector without needing jquery element as param or
* an instance of SelectorConfig(useful for algotech-testing-runner)
*
* @param {HTMLElement}      element
* @param {Object}           config
* @return {string}
*/


function getSelector(element, config) {
  var selectorConfig = new _selectorConfiguration["default"]('Global Selector Config', config);
  return produceSelectorFnWrapper((0, _jquery["default"])(element), null, selectorConfig);
}

var produceSelector = produceSelectorFnWrapper;
exports.produceSelector = produceSelector;
var _default = {
  produceSelector: produceSelectorFnWrapper
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
